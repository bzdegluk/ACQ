###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Eval_STM32L\Source\src\SDK_EVAL_Timers.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Eval_STM32L\Source\src\SDK_EVAL_Timers.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SDK_EVAL_Timers.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SDK_EVAL_Timers.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Eval_STM32L\Source\src\SDK_EVAL_Timers.c
      1          /**
      2           * @file    SDK_EVAL_Timers.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.0
      5           * @date    August 7, 2012
      6           * @brief   SDK EVAL timers configuration.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SDK_EVAL_Timers.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     NVIC_SetPriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD508             BPL.N    ??NVIC_SetPriority_0
   \   00000008   0x010A             LSLS     R2,R1,#+4
   \   0000000A   0x....             LDR.N    R3,??DataTable6  ;; 0xe000ed18
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0xF010 0x040F      ANDS     R4,R0,#0xF
   \   00000012   0x18E3             ADDS     R3,R4,R3
   \   00000014   0xF803 0x2C04      STRB     R2,[R3, #-4]
   \   00000018   0xE003             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \   0000001A   0x010A             LSLS     R2,R1,#+4
   \   0000001C   0x....             LDR.N    R3,??DataTable6_1  ;; 0xe000e400
   \   0000001E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000020   0x54C2             STRB     R2,[R0, R3]
   \                     ??NVIC_SetPriority_1: (+1)
   \   00000022   0xBC10             POP      {R4}
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t SysTick_Config(uint32_t)
   \                     SysTick_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x1E60             SUBS     R0,R4,#+1
   \   00000006   0xF1B0 0x7F80      CMP      R0,#+16777216
   \   0000000A   0xD301             BCC.N    ??SysTick_Config_0
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE00E             B.N      ??SysTick_Config_1
   \                     ??SysTick_Config_0: (+1)
   \   00000010   0x1E60             SUBS     R0,R4,#+1
   \   00000012   0x....             LDR.N    R1,??DataTable6_2  ;; 0xe000e014
   \   00000014   0x6008             STR      R0,[R1, #+0]
   \   00000016   0x210F             MOVS     R1,#+15
   \   00000018   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001C   0x.... 0x....      BL       NVIC_SetPriority
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable6_3  ;; 0xe000e018
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0x2007             MOVS     R0,#+7
   \   00000028   0x....             LDR.N    R1,??DataTable6_4  ;; 0xe000e010
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??SysTick_Config_1: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
     26          //#include "Serwer.h"
     27          

   \                                 In section .bss, align 4
     28          int SysyTickCnt;
   \                     SysyTickCnt:
   \   00000000                      DS8 4
     29          
     30          /**
     31           * @addtogroup SDK_EVAL_STM32L
     32           * @{
     33           */
     34          
     35          /**
     36           * @addtogroup SDK_EVAL_Timers
     37           * @{
     38           */
     39          
     40          
     41          /**
     42           * @defgroup SDK_EVAL_Timers_Private_TypesDefinitions           SDK EVAL Timers Private Types Definitions
     43           * @{
     44           */
     45          
     46          /**
     47           *@}
     48           */
     49          
     50          
     51          /**
     52           * @defgroup SDK_EVAL_Timers_Private_Defines                    SDK EVAL Timers Private Defines
     53           * @{
     54           */
     55          
     56          /**
     57           *@}
     58           */
     59          
     60          
     61          /**
     62           * @defgroup SDK_EVAL_Timers_Private_Macros                     SDK EVAL Timers Private Macros
     63           * @{
     64           */
     65          
     66          /**
     67           * @brief  Absolute value macro.
     68           * @param  x: Value on which apply the abs function.
     69           * @retval None
     70           */
     71          #define ABS(x)  (x>0?x:-x)
     72          
     73          
     74          /**
     75           *@}
     76           */
     77          
     78          /**
     79           * @defgroup SDK_EVAL_Timers_Private_Variables                  SDK EVAL Timers Private Variables
     80           * @{
     81           */
     82          

   \                                 In section .bss, align 4
     83          volatile  extern uint32_t lSystickCounter=0;
   \                     lSystickCounter:
   \   00000000                      DS8 4
     84          
     85          /**
     86           *@}
     87           */
     88          
     89          /**
     90           * @defgroup SDK_EVAL_Timers_Private_FunctionPrototypes         SDK EVAL Timers Private Function Prototypes
     91           * @{
     92           */
     93          
     94          /**
     95           *@}
     96           */
     97          
     98          
     99          /**
    100           * @defgroup SDK_EVAL_Timers_Private_Functions                  SDK EVAL Timers Private Functions
    101           * @{
    102           */
    103          
    104          
    105          
    106          /**
    107           * @brief  Computes two integer value prescaler and period such that Cycles = prescaler * period.
    108           * @param  lCycles the specified cycles for the desired timer value.
    109           * @param  pnPrescaler prescaler factor.
    110           * @param  pnCounter period factor.
    111           * @retval None.
    112          */

   \                                 In section .text, align 2, keep-with-next
    113          void SdkEvalTimersFindFactors(uint32_t lCycles, uint16_t *pnPrescaler, uint16_t *pnCounter)
    114          {
   \                     SdkEvalTimersFindFactors: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    115            uint16_t b0;
    116            uint16_t a0;
    117            long err, err_min=lCycles;
   \   00000002   0x0006             MOVS     R6,R0
    118          
    119            *pnPrescaler = a0 = ((lCycles-1)/0xffff) + 1;
   \   00000004   0x1E47             SUBS     R7,R0,#+1
   \   00000006   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   0000000A   0xFBB7 0xF7FC      UDIV     R7,R7,R12
   \   0000000E   0x1C7F             ADDS     R7,R7,#+1
   \   00000010   0x003C             MOVS     R4,R7
   \   00000012   0x800C             STRH     R4,[R1, #+0]
    120            *pnCounter = b0 = lCycles / *pnPrescaler;
   \   00000014   0x880F             LDRH     R7,[R1, #+0]
   \   00000016   0xFBB0 0xF7F7      UDIV     R7,R0,R7
   \   0000001A   0x003B             MOVS     R3,R7
   \   0000001C   0x8013             STRH     R3,[R2, #+0]
    121          
    122            for (; *pnPrescaler < 0xffff-1; (*pnPrescaler)++)
   \                     ??SdkEvalTimersFindFactors_0: (+1)
   \   0000001E   0x880F             LDRH     R7,[R1, #+0]
   \   00000020   0xF64F 0x7CFE      MOVW     R12,#+65534
   \   00000024   0x4567             CMP      R7,R12
   \   00000026   0xDA39             BGE.N    ??SdkEvalTimersFindFactors_1
    123            {
    124              *pnCounter = lCycles / *pnPrescaler;
   \   00000028   0x880F             LDRH     R7,[R1, #+0]
   \   0000002A   0xFBB0 0xF7F7      UDIV     R7,R0,R7
   \   0000002E   0x8017             STRH     R7,[R2, #+0]
    125              err = (long)*pnPrescaler * (long)*pnCounter - (long)lCycles;
   \   00000030   0x880F             LDRH     R7,[R1, #+0]
   \   00000032   0xF8B2 0xC000      LDRH     R12,[R2, #+0]
   \   00000036   0xFB0C 0xF707      MUL      R7,R12,R7
   \   0000003A   0x1A3F             SUBS     R7,R7,R0
   \   0000003C   0x003D             MOVS     R5,R7
    126              if (ABS(err) > (*pnPrescaler / 2))
   \   0000003E   0x2D01             CMP      R5,#+1
   \   00000040   0xDB01             BLT.N    ??SdkEvalTimersFindFactors_2
   \   00000042   0x002F             MOVS     R7,R5
   \   00000044   0xE000             B.N      ??SdkEvalTimersFindFactors_3
   \                     ??SdkEvalTimersFindFactors_2: (+1)
   \   00000046   0x426F             RSBS     R7,R5,#+0
   \                     ??SdkEvalTimersFindFactors_3: (+1)
   \   00000048   0xF8B1 0xC000      LDRH     R12,[R1, #+0]
   \   0000004C   0xF05F 0x0E02      MOVS     LR,#+2
   \   00000050   0xFB9C 0xFCFE      SDIV     R12,R12,LR
   \   00000054   0x45BC             CMP      R12,R7
   \   00000056   0xDA09             BGE.N    ??SdkEvalTimersFindFactors_4
    127              {
    128                (*pnCounter)++;
   \   00000058   0x8817             LDRH     R7,[R2, #+0]
   \   0000005A   0x1C7F             ADDS     R7,R7,#+1
   \   0000005C   0x8017             STRH     R7,[R2, #+0]
    129                err = (long)*pnPrescaler * (long)*pnCounter - (long)lCycles;
   \   0000005E   0x880F             LDRH     R7,[R1, #+0]
   \   00000060   0xF8B2 0xC000      LDRH     R12,[R2, #+0]
   \   00000064   0xFB0C 0xF707      MUL      R7,R12,R7
   \   00000068   0x1A3F             SUBS     R7,R7,R0
   \   0000006A   0x003D             MOVS     R5,R7
    130              }
    131              if (ABS(err) < ABS(err_min))
   \                     ??SdkEvalTimersFindFactors_4: (+1)
   \   0000006C   0x2D01             CMP      R5,#+1
   \   0000006E   0xDB01             BLT.N    ??SdkEvalTimersFindFactors_5
   \   00000070   0x002F             MOVS     R7,R5
   \   00000072   0xE000             B.N      ??SdkEvalTimersFindFactors_6
   \                     ??SdkEvalTimersFindFactors_5: (+1)
   \   00000074   0x426F             RSBS     R7,R5,#+0
   \                     ??SdkEvalTimersFindFactors_6: (+1)
   \   00000076   0x2E01             CMP      R6,#+1
   \   00000078   0xDB01             BLT.N    ??SdkEvalTimersFindFactors_7
   \   0000007A   0x46B4             MOV      R12,R6
   \   0000007C   0xE001             B.N      ??SdkEvalTimersFindFactors_8
   \                     ??SdkEvalTimersFindFactors_7: (+1)
   \   0000007E   0xF1D6 0x0C00      RSBS     R12,R6,#+0
   \                     ??SdkEvalTimersFindFactors_8: (+1)
   \   00000082   0x4567             CMP      R7,R12
   \   00000084   0xDA06             BGE.N    ??SdkEvalTimersFindFactors_9
    132              {
    133                err_min = err;
   \   00000086   0x002E             MOVS     R6,R5
    134                a0 = *pnPrescaler;
   \   00000088   0x880F             LDRH     R7,[R1, #+0]
   \   0000008A   0x003C             MOVS     R4,R7
    135                b0 = *pnCounter;
   \   0000008C   0x8817             LDRH     R7,[R2, #+0]
   \   0000008E   0x003B             MOVS     R3,R7
    136                if (err == 0) break;
   \   00000090   0x2D00             CMP      R5,#+0
   \   00000092   0xD003             BEQ.N    ??SdkEvalTimersFindFactors_1
    137              }
    138            }
   \                     ??SdkEvalTimersFindFactors_9: (+1)
   \   00000094   0x880F             LDRH     R7,[R1, #+0]
   \   00000096   0x1C7F             ADDS     R7,R7,#+1
   \   00000098   0x800F             STRH     R7,[R1, #+0]
   \   0000009A   0xE7C0             B.N      ??SdkEvalTimersFindFactors_0
    139          
    140            *pnPrescaler = a0;
   \                     ??SdkEvalTimersFindFactors_1: (+1)
   \   0000009C   0x800C             STRH     R4,[R1, #+0]
    141            *pnCounter = b0;
   \   0000009E   0x8013             STRH     R3,[R2, #+0]
    142          
    143          }
   \   000000A0   0xBDF0             POP      {R4-R7,PC}       ;; return
    144          
    145          
    146          /**
    147           * @brief  Configures the specified timer to raise an interrupt every time the counter
    148           *         reaches the nPeriod value counting with a prescaler of nPrescaler.
    149           * @note   The specified timer is configured but not enabled.
    150           * @param  xTim timer to be set.
    151           *          This parameter can be a pointer to @ref TIM_TypeDef .
    152           * @param  nPrescaler prescaler factor.
    153           * @param  nPeriod period factor.
    154           * @retval None.
    155           */

   \                                 In section .text, align 2, keep-with-next
    156          void SdkEvalTimersTimConfig(TIM_TypeDef* xTim, uint16_t nPrescaler, uint16_t nPeriod)
    157          {
   \                     SdkEvalTimersTimConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    158            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    159            NVIC_InitTypeDef NVIC_InitStructure;
    160          
    161            /* disable the timer */
    162            TIM_Cmd(xTim, DISABLE);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       TIM_Cmd
    163          
    164            /* Configure the timer in update mode */
    165            TIM_ITConfig(xTim, TIM_IT_Update, DISABLE);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       TIM_ITConfig
    166          
    167            /* put the timer clock on */
    168            if(xTim == TIM2)
   \   0000001C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000020   0xD104             BNE.N    ??SdkEvalTimersTimConfig_0
    169              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
   \   0000002A   0xE01E             B.N      ??SdkEvalTimersTimConfig_1
    170            else if(xTim==TIM3)
   \                     ??SdkEvalTimersTimConfig_0: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40000400
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD104             BNE.N    ??SdkEvalTimersTimConfig_2
    171              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
   \   0000003A   0xE016             B.N      ??SdkEvalTimersTimConfig_1
    172            else if(xTim==TIM4)
   \                     ??SdkEvalTimersTimConfig_2: (+1)
   \   0000003C   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40000800
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD104             BNE.N    ??SdkEvalTimersTimConfig_3
    173              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x2004             MOVS     R0,#+4
   \   00000046   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
   \   0000004A   0xE00E             B.N      ??SdkEvalTimersTimConfig_1
    174            else if(xTim==TIM6)
   \                     ??SdkEvalTimersTimConfig_3: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40001000
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD104             BNE.N    ??SdkEvalTimersTimConfig_4
    175              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
   \   0000005A   0xE006             B.N      ??SdkEvalTimersTimConfig_1
    176            else if(xTim==TIM7)
   \                     ??SdkEvalTimersTimConfig_4: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40001400
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD103             BNE.N    ??SdkEvalTimersTimConfig_1
    177              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x2020             MOVS     R0,#+32
   \   00000066   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    178          
    179            /* Init the time base structure */
    180            TIM_TimeBaseStructInit( &TIM_TimeBaseStructure );
   \                     ??SdkEvalTimersTimConfig_1: (+1)
   \   0000006A   0xA801             ADD      R0,SP,#+4
   \   0000006C   0x.... 0x....      BL       TIM_TimeBaseStructInit
    181          
    182            /* Time base configuration */
    183            TIM_TimeBaseStructure.TIM_Period = nPeriod;
   \   00000070   0xF8AD 0x6008      STRH     R6,[SP, #+8]
    184            TIM_TimeBaseStructure.TIM_Prescaler = nPrescaler;
   \   00000074   0xF8AD 0x5004      STRH     R5,[SP, #+4]
    185            TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    186            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    187          
    188            TIM_TimeBaseInit(xTim, &TIM_TimeBaseStructure);
   \   00000084   0xA901             ADD      R1,SP,#+4
   \   00000086   0x0020             MOVS     R0,R4
   \   00000088   0x.... 0x....      BL       TIM_TimeBaseInit
    189          
    190          
    191            /* NVIC configuration */
    192            if(xTim == TIM2)
   \   0000008C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000090   0xD103             BNE.N    ??SdkEvalTimersTimConfig_5
    193              NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \   00000092   0x201C             MOVS     R0,#+28
   \   00000094   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000098   0xE01A             B.N      ??SdkEvalTimersTimConfig_6
    194            else if(xTim == TIM3)
   \                     ??SdkEvalTimersTimConfig_5: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40000400
   \   0000009C   0x4284             CMP      R4,R0
   \   0000009E   0xD103             BNE.N    ??SdkEvalTimersTimConfig_7
    195              NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
   \   000000A0   0x201D             MOVS     R0,#+29
   \   000000A2   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000A6   0xE013             B.N      ??SdkEvalTimersTimConfig_6
    196            else if(xTim == TIM4)
   \                     ??SdkEvalTimersTimConfig_7: (+1)
   \   000000A8   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40000800
   \   000000AA   0x4284             CMP      R4,R0
   \   000000AC   0xD103             BNE.N    ??SdkEvalTimersTimConfig_8
    197              NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
   \   000000AE   0x201E             MOVS     R0,#+30
   \   000000B0   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000B4   0xE00C             B.N      ??SdkEvalTimersTimConfig_6
    198            else if(xTim == TIM6)
   \                     ??SdkEvalTimersTimConfig_8: (+1)
   \   000000B6   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40001000
   \   000000B8   0x4284             CMP      R4,R0
   \   000000BA   0xD103             BNE.N    ??SdkEvalTimersTimConfig_9
    199              NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
   \   000000BC   0x202B             MOVS     R0,#+43
   \   000000BE   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000C2   0xE005             B.N      ??SdkEvalTimersTimConfig_6
    200            else if(xTim == TIM7)
   \                     ??SdkEvalTimersTimConfig_9: (+1)
   \   000000C4   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40001400
   \   000000C6   0x4284             CMP      R4,R0
   \   000000C8   0xD102             BNE.N    ??SdkEvalTimersTimConfig_6
    201              NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
   \   000000CA   0x202C             MOVS     R0,#+44
   \   000000CC   0xF88D 0x0000      STRB     R0,[SP, #+0]
    202          
    203            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   \                     ??SdkEvalTimersTimConfig_6: (+1)
   \   000000D0   0x200F             MOVS     R0,#+15
   \   000000D2   0xF88D 0x0001      STRB     R0,[SP, #+1]
    204            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xF88D 0x0002      STRB     R0,[SP, #+2]
    205            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0xF88D 0x0003      STRB     R0,[SP, #+3]
    206          
    207            NVIC_Init(&NVIC_InitStructure);
   \   000000E2   0xA800             ADD      R0,SP,#+0
   \   000000E4   0x.... 0x....      BL       NVIC_Init
    208          
    209            /* Clear the timer pending bit */
    210            TIM_ClearITPendingBit(xTim , TIM_IT_Update);
   \   000000E8   0x2101             MOVS     R1,#+1
   \   000000EA   0x0020             MOVS     R0,R4
   \   000000EC   0x.... 0x....      BL       TIM_ClearITPendingBit
    211          
    212          }
   \   000000F0   0xBD7F             POP      {R0-R6,PC}       ;; return
    213          
    214          #ifdef USE_SYSTICK_DELAY
    215          /**
    216            * @brief  This function handles SysTick Handler.
    217            * @param  None
    218            * @retval None
    219            */

   \                                 In section .text, align 2, keep-with-next
    220          void SysTick_Handler(void)  
    221          {  
    222            /*  if (ACQ_wait_answ_timer > 0)        // waiting for the answer
    223                ACQ_wait_answ_timer--;
    224            
    225            if (ACQ_loop_timer > 0)               // waiting till end of second to start next loop
    226                ACQ_loop_timer--;
    227            
    228              if (ACQ_session_timer > 0)          // waiting till end of current session window
    229                ACQ_session_timer--;
    230             */
    231            lSystickCounter++;
   \                     SysTick_Handler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_9
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable6_9
   \   00000008   0x6008             STR      R0,[R1, #+0]
    232            SysyTickCnt++;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_10
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable6_10
   \   00000012   0x6008             STR      R0,[R1, #+0]
    233          }
   \   00000014   0x4770             BX       LR               ;; return
    234          
    235          /**
    236            * @brief  This function implements return the current
    237            *         systick with a step of 1 ms.
    238            * @param  lTimeMs desired delay expressed in ms.
    239            * @retval None
    240            */
    241          
    242          /**
    243            * @brief  This function implements return the current
    244            *         systick with a step of 1 ms.
    245            * @param  lTimeMs desired delay expressed in ms.
    246            * @retval None
    247            */

   \                                 In section .text, align 2, keep-with-next
    248          uint32_t SdkGetCurrentSysTick(void)
    249          {
    250            return lSystickCounter;
   \                     SdkGetCurrentSysTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_9
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    251            
    252          }
    253          

   \                                 In section .text, align 2, keep-with-next
    254          void SdkStartSysTick(void)
    255          {
   \                     SdkStartSysTick: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    256            SysTick_Config(32000);
   \   00000002   0xF44F 0x40FA      MOV      R0,#+32000
   \   00000006   0x.... 0x....      BL       SysTick_Config
    257            lSystickCounter = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable6_9
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    258          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    259          
    260          /**
    261            * @brief  This function implements a delay using the microcontroller
    262            *         Systick with a step of 1 ms.
    263            * @param  lTimeMs desired delay expressed in ms.
    264            * @retval None
    265            */

   \                                 In section .text, align 2, keep-with-next
    266          void SdkDelayMs(uint32_t lTimeMs)
    267          {
    268            uint32_t nWaitPeriod = ~lSystickCounter;
   \                     SdkDelayMs: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_9
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x43C9             MVNS     R1,R1
    269            
    270            if(nWaitPeriod<lTimeMs)
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0xD206             BCS.N    ??SdkDelayMs_0
    271            {
    272              while( lSystickCounter != 0xFFFFFFFF);
   \                     ??SdkDelayMs_1: (+1)
   \   0000000A   0x....             LDR.N    R2,??DataTable6_9
   \   0000000C   0x6812             LDR      R2,[R2, #+0]
   \   0000000E   0xF112 0x0F01      CMN      R2,#+1
   \   00000012   0xD1FA             BNE.N    ??SdkDelayMs_1
    273              nWaitPeriod = lTimeMs-nWaitPeriod;
   \   00000014   0x1A41             SUBS     R1,R0,R1
   \   00000016   0xE001             B.N      ??SdkDelayMs_2
    274            }
    275            else
    276              nWaitPeriod = lTimeMs+ ~nWaitPeriod;
   \                     ??SdkDelayMs_0: (+1)
   \   00000018   0x43C9             MVNS     R1,R1
   \   0000001A   0x1809             ADDS     R1,R1,R0
    277            
    278            while( lSystickCounter != nWaitPeriod ) ;
   \                     ??SdkDelayMs_2: (+1)
   \   0000001C   0x....             LDR.N    R2,??DataTable6_9
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x428A             CMP      R2,R1
   \   00000022   0xD1FB             BNE.N    ??SdkDelayMs_2
    279          
    280          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0xE000E018         DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x40001000         DC32     0x40001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40001400         DC32     0x40001400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     lSystickCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     SysyTickCnt
    281          #endif
    282          /**
    283           *@}
    284           */
    285          
    286          
    287          /**
    288           *@}
    289           */
    290          
    291          
    292          /**
    293           *@}
    294           */
    295          
    296          
    297          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   NVIC_SetPriority
       0   SdkDelayMs
      20   SdkEvalTimersFindFactors
      32   SdkEvalTimersTimConfig
        32   -> NVIC_Init
        32   -> RCC_APB1PeriphClockCmd
        32   -> TIM_ClearITPendingBit
        32   -> TIM_Cmd
        32   -> TIM_ITConfig
        32   -> TIM_TimeBaseInit
        32   -> TIM_TimeBaseStructInit
       0   SdkGetCurrentSysTick
       8   SdkStartSysTick
         8   -> SysTick_Config
       8   SysTick_Config
         8   -> NVIC_SetPriority
       0   SysTick_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      38  NVIC_SetPriority
      38  SdkDelayMs
     162  SdkEvalTimersFindFactors
     242  SdkEvalTimersTimConfig
       6  SdkGetCurrentSysTick
      18  SdkStartSysTick
      48  SysTick_Config
      22  SysTick_Handler
       4  SysyTickCnt
       4  lSystickCounter

 
   8 bytes in section .bss
 618 bytes in section .text
 
 618 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
