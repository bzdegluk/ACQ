###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Gpio.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Gpio.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_Gpio.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_Gpio.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Gpio.c
      1          /**
      2           * @file     SPIRIT_Gpio.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief    This file provides all the low level API to manage SPIRIT GPIO.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21           *
     22           */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_Gpio.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          /** @addtogroup SPIRIT_Libraries
     30           * @{
     31           */
     32          
     33          
     34          /** @addtogroup SPIRIT_Gpio
     35           * @{
     36           */
     37          
     38          
     39          /** @defgroup Gpio_Private_TypesDefinitions     GPIO Private Types Definitions
     40           * @{
     41           */
     42          
     43          
     44          /**
     45           * @}
     46           */
     47          
     48          
     49          /** @defgroup Gpio_Private_Defines              GPIO Private Defines
     50           * @{
     51           */
     52          
     53          
     54          /**
     55           * @}
     56           */
     57          
     58          
     59          
     60          /** @defgroup Gpio_Private_Macros               GPIO Private Macros
     61           * @{
     62           */
     63          
     64          
     65          /**
     66           * @}
     67           */
     68          
     69          
     70          
     71          /** @defgroup Gpio_Private_Variables            GPIO Private Variables
     72           * @{
     73           */
     74          
     75          
     76          /**
     77           * @}
     78           */
     79          
     80          
     81          
     82          /** @defgroup Gpio_Private_FunctionPrototypes   GPIO Private Function Prototypes
     83           * @{
     84           */
     85          
     86          
     87          /**
     88           * @}
     89           */
     90          
     91          
     92          
     93          /** @defgroup Gpio_Private_Functions            GPIO Private Functions
     94           * @{
     95           */
     96          
     97          /**
     98           * @brief  Initializes the SPIRIT GPIOx according to the specified
     99           *         parameters in the pxGpioInitStruct.
    100           * @param  pxGpioInitStruct pointer to a SGpioInit structure that
    101           *         contains the configuration information for the specified SPIRIT GPIO.
    102           * @retval None.
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
    105          {
   \                     SpiritGpioInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    106            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    107          
    108            /* Check the parameters */
    109            s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2805             CMP      R0,#+5
   \   0000000E   0xD004             BEQ.N    ??SpiritGpioInit_0
   \   00000010   0x216D             MOVS     R1,#+109
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000016   0x.... 0x....      BL       s_assert_failed
    110            s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
   \                     ??SpiritGpioInit_0: (+1)
   \   0000001A   0x7860             LDRB     R0,[R4, #+1]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD00A             BEQ.N    ??SpiritGpioInit_1
   \   00000020   0x7860             LDRB     R0,[R4, #+1]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD007             BEQ.N    ??SpiritGpioInit_1
   \   00000026   0x7860             LDRB     R0,[R4, #+1]
   \   00000028   0x2803             CMP      R0,#+3
   \   0000002A   0xD004             BEQ.N    ??SpiritGpioInit_1
   \   0000002C   0x216E             MOVS     R1,#+110
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000032   0x.... 0x....      BL       s_assert_failed
    111            s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));
   \                     ??SpiritGpioInit_1: (+1)
   \   00000036   0x78A0             LDRB     R0,[R4, #+2]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD070             BEQ.N    ??SpiritGpioInit_2
   \   0000003C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000003E   0x2808             CMP      R0,#+8
   \   00000040   0xD06D             BEQ.N    ??SpiritGpioInit_2
   \   00000042   0x78A0             LDRB     R0,[R4, #+2]
   \   00000044   0x2810             CMP      R0,#+16
   \   00000046   0xD06A             BEQ.N    ??SpiritGpioInit_2
   \   00000048   0x78A0             LDRB     R0,[R4, #+2]
   \   0000004A   0x2818             CMP      R0,#+24
   \   0000004C   0xD067             BEQ.N    ??SpiritGpioInit_2
   \   0000004E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000050   0x2820             CMP      R0,#+32
   \   00000052   0xD064             BEQ.N    ??SpiritGpioInit_2
   \   00000054   0x78A0             LDRB     R0,[R4, #+2]
   \   00000056   0x2828             CMP      R0,#+40
   \   00000058   0xD061             BEQ.N    ??SpiritGpioInit_2
   \   0000005A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000005C   0x2830             CMP      R0,#+48
   \   0000005E   0xD05E             BEQ.N    ??SpiritGpioInit_2
   \   00000060   0x78A0             LDRB     R0,[R4, #+2]
   \   00000062   0x2838             CMP      R0,#+56
   \   00000064   0xD05B             BEQ.N    ??SpiritGpioInit_2
   \   00000066   0x78A0             LDRB     R0,[R4, #+2]
   \   00000068   0x2840             CMP      R0,#+64
   \   0000006A   0xD058             BEQ.N    ??SpiritGpioInit_2
   \   0000006C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000006E   0x2848             CMP      R0,#+72
   \   00000070   0xD055             BEQ.N    ??SpiritGpioInit_2
   \   00000072   0x78A0             LDRB     R0,[R4, #+2]
   \   00000074   0x2850             CMP      R0,#+80
   \   00000076   0xD052             BEQ.N    ??SpiritGpioInit_2
   \   00000078   0x78A0             LDRB     R0,[R4, #+2]
   \   0000007A   0x2858             CMP      R0,#+88
   \   0000007C   0xD04F             BEQ.N    ??SpiritGpioInit_2
   \   0000007E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000080   0x2860             CMP      R0,#+96
   \   00000082   0xD04C             BEQ.N    ??SpiritGpioInit_2
   \   00000084   0x78A0             LDRB     R0,[R4, #+2]
   \   00000086   0x2868             CMP      R0,#+104
   \   00000088   0xD049             BEQ.N    ??SpiritGpioInit_2
   \   0000008A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000008C   0x2870             CMP      R0,#+112
   \   0000008E   0xD046             BEQ.N    ??SpiritGpioInit_2
   \   00000090   0x78A0             LDRB     R0,[R4, #+2]
   \   00000092   0x2878             CMP      R0,#+120
   \   00000094   0xD043             BEQ.N    ??SpiritGpioInit_2
   \   00000096   0x78A0             LDRB     R0,[R4, #+2]
   \   00000098   0x2880             CMP      R0,#+128
   \   0000009A   0xD040             BEQ.N    ??SpiritGpioInit_2
   \   0000009C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000009E   0x2888             CMP      R0,#+136
   \   000000A0   0xD03D             BEQ.N    ??SpiritGpioInit_2
   \   000000A2   0x78A0             LDRB     R0,[R4, #+2]
   \   000000A4   0x2890             CMP      R0,#+144
   \   000000A6   0xD03A             BEQ.N    ??SpiritGpioInit_2
   \   000000A8   0x78A0             LDRB     R0,[R4, #+2]
   \   000000AA   0x2898             CMP      R0,#+152
   \   000000AC   0xD037             BEQ.N    ??SpiritGpioInit_2
   \   000000AE   0x78A0             LDRB     R0,[R4, #+2]
   \   000000B0   0x28A0             CMP      R0,#+160
   \   000000B2   0xD034             BEQ.N    ??SpiritGpioInit_2
   \   000000B4   0x78A0             LDRB     R0,[R4, #+2]
   \   000000B6   0x28A8             CMP      R0,#+168
   \   000000B8   0xD031             BEQ.N    ??SpiritGpioInit_2
   \   000000BA   0x78A0             LDRB     R0,[R4, #+2]
   \   000000BC   0x28B0             CMP      R0,#+176
   \   000000BE   0xD02E             BEQ.N    ??SpiritGpioInit_2
   \   000000C0   0x78A0             LDRB     R0,[R4, #+2]
   \   000000C2   0x28B8             CMP      R0,#+184
   \   000000C4   0xD02B             BEQ.N    ??SpiritGpioInit_2
   \   000000C6   0x78A0             LDRB     R0,[R4, #+2]
   \   000000C8   0x28C0             CMP      R0,#+192
   \   000000CA   0xD028             BEQ.N    ??SpiritGpioInit_2
   \   000000CC   0x78A0             LDRB     R0,[R4, #+2]
   \   000000CE   0x28C8             CMP      R0,#+200
   \   000000D0   0xD025             BEQ.N    ??SpiritGpioInit_2
   \   000000D2   0x78A0             LDRB     R0,[R4, #+2]
   \   000000D4   0x28D0             CMP      R0,#+208
   \   000000D6   0xD022             BEQ.N    ??SpiritGpioInit_2
   \   000000D8   0x78A0             LDRB     R0,[R4, #+2]
   \   000000DA   0x28D8             CMP      R0,#+216
   \   000000DC   0xD01F             BEQ.N    ??SpiritGpioInit_2
   \   000000DE   0x78A0             LDRB     R0,[R4, #+2]
   \   000000E0   0x28E0             CMP      R0,#+224
   \   000000E2   0xD01C             BEQ.N    ??SpiritGpioInit_2
   \   000000E4   0x78A0             LDRB     R0,[R4, #+2]
   \   000000E6   0x28E8             CMP      R0,#+232
   \   000000E8   0xD019             BEQ.N    ??SpiritGpioInit_2
   \   000000EA   0x78A0             LDRB     R0,[R4, #+2]
   \   000000EC   0x28F0             CMP      R0,#+240
   \   000000EE   0xD016             BEQ.N    ??SpiritGpioInit_2
   \   000000F0   0x78A0             LDRB     R0,[R4, #+2]
   \   000000F2   0x28FF             CMP      R0,#+255
   \   000000F4   0xD013             BEQ.N    ??SpiritGpioInit_2
   \   000000F6   0x78A0             LDRB     R0,[R4, #+2]
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD010             BEQ.N    ??SpiritGpioInit_2
   \   000000FC   0x78A0             LDRB     R0,[R4, #+2]
   \   000000FE   0x2808             CMP      R0,#+8
   \   00000100   0xD00D             BEQ.N    ??SpiritGpioInit_2
   \   00000102   0x78A0             LDRB     R0,[R4, #+2]
   \   00000104   0x2810             CMP      R0,#+16
   \   00000106   0xD00A             BEQ.N    ??SpiritGpioInit_2
   \   00000108   0x78A0             LDRB     R0,[R4, #+2]
   \   0000010A   0x2818             CMP      R0,#+24
   \   0000010C   0xD007             BEQ.N    ??SpiritGpioInit_2
   \   0000010E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000110   0x2820             CMP      R0,#+32
   \   00000112   0xD004             BEQ.N    ??SpiritGpioInit_2
   \   00000114   0x216F             MOVS     R1,#+111
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000011A   0x.... 0x....      BL       s_assert_failed
    112          
    113            tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
   \                     ??SpiritGpioInit_2: (+1)
   \   0000011E   0x7860             LDRB     R0,[R4, #+1]
   \   00000120   0x78A1             LDRB     R1,[R4, #+2]
   \   00000122   0x4308             ORRS     R0,R1,R0
   \   00000124   0xF88D 0x0000      STRB     R0,[SP, #+0]
    114          
    115            g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
   \   00000128   0xAA00             ADD      R2,SP,#+0
   \   0000012A   0x2101             MOVS     R1,#+1
   \   0000012C   0x7820             LDRB     R0,[R4, #+0]
   \   0000012E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000132   0x9001             STR      R0,[SP, #+4]
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000138   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000013C   0x8001             STRH     R1,[R0, #+0]
    116          
    117          }
   \   0000013E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    118          
    119          
    120          /**
    121           * @brief  Enables or Disables the output of temperature sensor on SPIRIT GPIO_0.
    122           * @param  xNewState new state for temperature sensor.
    123           *         This parameter can be: S_ENABLE or S_DISABLE.
    124           * @retval None.
    125           */

   \                                 In section .text, align 2, keep-with-next
    126          void SpiritGpioTemperatureSensor(SpiritFunctionalState xNewState)
    127          {
   \                     SpiritGpioTemperatureSensor: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    128            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    129            uint8_t gpio0tempRegValue = 0x00;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    130          
    131            /* Check the parameters */
    132            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD007             BEQ.N    ??SpiritGpioTemperatureSensor_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C01             CMP      R4,#+1
   \   0000001A   0xD004             BEQ.N    ??SpiritGpioTemperatureSensor_0
   \   0000001C   0x2184             MOVS     R1,#+132
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000022   0x.... 0x....      BL       s_assert_failed
    133          
    134            /* Reads the ANA_FUNC_CONF0 register and mask the result to enable or disable the
    135               temperature sensor */
    136            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioTemperatureSensor_0: (+1)
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000036   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000003A   0x8001             STRH     R1,[R0, #+0]
    137            if(xNewState == S_ENABLE)
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x2C01             CMP      R4,#+1
   \   00000040   0xD106             BNE.N    ??SpiritGpioTemperatureSensor_1
    138            {
    139              tempRegValue |= TEMPERATURE_SENSOR_MASK;
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000004E   0xE008             B.N      ??SpiritGpioTemperatureSensor_2
    140            }
    141            else
    142            {
    143              tempRegValue &= (~TEMPERATURE_SENSOR_MASK);
   \                     ??SpiritGpioTemperatureSensor_1: (+1)
   \   00000050   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000054   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000058   0xF88D 0x0000      STRB     R0,[SP, #+0]
    144              gpio0tempRegValue = 0x0A; /* Default value */
   \   0000005C   0x200A             MOVS     R0,#+10
   \   0000005E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    145            }
    146            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioTemperatureSensor_2: (+1)
   \   00000062   0xAA00             ADD      R2,SP,#+0
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000072   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000076   0x8001             STRH     R1,[R0, #+0]
    147          
    148            /* Sets the SPIRIT GPIO_0 according to input request */
    149            g_xStatus = SpiritSpiWriteRegisters(GPIO0_CONF_BASE, 1, &gpio0tempRegValue);
   \   00000078   0xF10D 0x0201      ADD      R2,SP,#+1
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x2005             MOVS     R0,#+5
   \   00000080   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000084   0x9001             STR      R0,[SP, #+4]
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000008A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000008E   0x8001             STRH     R1,[R0, #+0]
    150          
    151          }
   \   00000090   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    152          
    153          
    154          /**
    155           * @brief  Forces SPIRIT GPIO_x configured as digital output, to VDD or GND.
    156           * @param  xGpioX Specifies the GPIO to be configured.
    157           *   This parameter can be one of following parameters:
    158           *     @arg SPIRIT_GPIO_0: SPIRIT GPIO_0
    159           *     @arg SPIRIT_GPIO_1: SPIRIT GPIO_1
    160           *     @arg SPIRIT_GPIO_2: SPIRIT GPIO_2
    161           *     @arg SPIRIT_GPIO_3: SPIRIT GPIO_3
    162           * @param  xLevel Specifies the level.
    163           *   This parameter can be: HIGH or LOW.
    164           * @retval None.
    165           */

   \                                 In section .text, align 2, keep-with-next
    166          void SpiritGpioSetLevel(SpiritGpioPin xGpioX, OutputLevel xLevel)
    167          {
   \                     SpiritGpioSetLevel: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    168            uint8_t tempRegValue = 0x00;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    169          
    170            /* Check the parameters */
    171            s_assert_param(IS_SPIRIT_GPIO(xGpioX));
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C05             CMP      R4,#+5
   \   00000012   0xD004             BEQ.N    ??SpiritGpioSetLevel_0
   \   00000014   0x21AB             MOVS     R1,#+171
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000001A   0x.... 0x....      BL       s_assert_failed
    172            s_assert_param(IS_SPIRIT_GPIO_LEVEL(xLevel));
   \                     ??SpiritGpioSetLevel_0: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD007             BEQ.N    ??SpiritGpioSetLevel_1
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D01             CMP      R5,#+1
   \   00000028   0xD004             BEQ.N    ??SpiritGpioSetLevel_1
   \   0000002A   0x21AC             MOVS     R1,#+172
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000030   0x.... 0x....      BL       s_assert_failed
    173          
    174            /* Reads the SPIRIT_GPIOx register and mask the GPIO_SELECT field */
    175            g_xStatus = SpiritSpiReadRegisters(xGpioX, 1, &tempRegValue);
   \                     ??SpiritGpioSetLevel_1: (+1)
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000040   0x9001             STR      R0,[SP, #+4]
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00000046   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000004A   0x8001             STRH     R1,[R0, #+0]
    176            tempRegValue &= 0x04;
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000054   0xF88D 0x0000      STRB     R0,[SP, #+0]
    177          
    178            /* Sets the value of the SPIRIT GPIO register according to the specified level */
    179            if(xLevel == HIGH)
   \   00000058   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005A   0x2D01             CMP      R5,#+1
   \   0000005C   0xD106             BNE.N    ??SpiritGpioSetLevel_2
    180            {
    181              tempRegValue |= (uint8_t)SPIRIT_GPIO_DIG_OUT_VDD | (uint8_t)SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP;
   \   0000005E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000062   0xF050 0x009B      ORRS     R0,R0,#0x9B
   \   00000066   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000006A   0xE005             B.N      ??SpiritGpioSetLevel_3
    182            }
    183            else
    184            {
    185              tempRegValue |= (uint8_t)SPIRIT_GPIO_DIG_OUT_GND | (uint8_t)SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP;
   \                     ??SpiritGpioSetLevel_2: (+1)
   \   0000006C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000070   0xF050 0x00A3      ORRS     R0,R0,#0xA3
   \   00000074   0xF88D 0x0000      STRB     R0,[SP, #+0]
    186            }
    187          
    188            /* Writes the SPIRIT GPIO register */
    189            g_xStatus = SpiritSpiWriteRegisters(xGpioX, 1, &tempRegValue);
   \                     ??SpiritGpioSetLevel_3: (+1)
   \   00000078   0xAA00             ADD      R2,SP,#+0
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x0020             MOVS     R0,R4
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000084   0x9001             STR      R0,[SP, #+4]
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000008A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000008E   0x8001             STRH     R1,[R0, #+0]
    190          
    191          }
   \   00000090   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    192          
    193          
    194          /**
    195           * @brief  Returns output value (VDD or GND) of SPIRIT GPIO_x, when it is configured as digital output.
    196           * @param  xGpioX Specifies the GPIO to be read.
    197           *         This parameter can be one of following parameters:
    198           *         @arg SPIRIT_GPIO_0: SPIRIT GPIO_0
    199           *         @arg SPIRIT_GPIO_1: SPIRIT GPIO_1
    200           *         @arg SPIRIT_GPIO_2: SPIRIT GPIO_2
    201           *         @arg SPIRIT_GPIO_3: SPIRIT GPIO_3
    202           * @retval OutputLevel Logical level of selected GPIO configured as digital output.
    203           *         This parameter can be: HIGH or LOW.
    204           */

   \                                 In section .text, align 2, keep-with-next
    205          OutputLevel SpiritGpioGetLevel(SpiritGpioPin xGpioX)
    206          {
   \                     SpiritGpioGetLevel: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    207            uint8_t tempRegValue = 0x00;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    208            OutputLevel level;
    209          
    210            /* Check the parameters */
    211            s_assert_param(IS_SPIRIT_GPIO(xGpioX));
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C05             CMP      R4,#+5
   \   00000010   0xD004             BEQ.N    ??SpiritGpioGetLevel_0
   \   00000012   0x21D3             MOVS     R1,#+211
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000018   0x.... 0x....      BL       s_assert_failed
    212          
    213            /* Reads the SPIRIT_GPIOx register */
    214            g_xStatus = SpiritSpiReadRegisters(xGpioX, 1, &tempRegValue);
   \                     ??SpiritGpioGetLevel_0: (+1)
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000002E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000032   0x8001             STRH     R1,[R0, #+0]
    215          
    216            /* Mask the GPIO_SELECT field and returns the value according */
    217            tempRegValue &= 0xF8;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    218            if(tempRegValue == SPIRIT_GPIO_DIG_OUT_VDD)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0x2898             CMP      R0,#+152
   \   00000046   0xD102             BNE.N    ??SpiritGpioGetLevel_1
    219            {
    220              level = HIGH;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x0005             MOVS     R5,R0
   \   0000004C   0xE001             B.N      ??SpiritGpioGetLevel_2
    221            }
    222            else
    223            {
    224              level = LOW;
   \                     ??SpiritGpioGetLevel_1: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x0005             MOVS     R5,R0
    225            }
    226          
    227            return level;
   \                     ??SpiritGpioGetLevel_2: (+1)
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xBD3E             POP      {R1-R5,PC}       ;; return
    228          
    229          }
    230          
    231          
    232          /**
    233           * @brief  Enables or Disables the MCU clock output.
    234           * @param  xNewState new state for the MCU clock output.
    235           *         This parameter can be: S_ENABLE or S_DISABLE.
    236           * @retval None.
    237           */

   \                                 In section .text, align 2, keep-with-next
    238          void SpiritGpioClockOutput(SpiritFunctionalState xNewState)
    239          {
   \                     SpiritGpioClockOutput: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    240            uint8_t tempRegValue;
    241          
    242            /* Check the parameters */
    243            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD006             BEQ.N    ??SpiritGpioClockOutput_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD003             BEQ.N    ??SpiritGpioClockOutput_0
   \   00000010   0x21F3             MOVS     R1,#+243
   \   00000012   0x....             LDR.N    R0,??DataTable11
   \   00000014   0x.... 0x....      BL       s_assert_failed
    244          
    245            /* Reads the MCU_CK_CONF register and mask the result to enable or disable the clock output */
    246            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioClockOutput_0: (+1)
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2006             MOVS     R0,#+6
   \   0000001E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable11_1
   \   00000026   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002A   0x8001             STRH     R1,[R0, #+0]
    247          
    248            if(xNewState)
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C00             CMP      R4,#+0
   \   00000030   0xD006             BEQ.N    ??SpiritGpioClockOutput_1
    249            {
    250              tempRegValue |= MCU_CK_ENABLE;
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000003E   0xE005             B.N      ??SpiritGpioClockOutput_2
    251            }
    252            else
    253            {
    254              tempRegValue &= (~MCU_CK_ENABLE);
   \                     ??SpiritGpioClockOutput_1: (+1)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    255            }
    256          
    257            /* Writes the MCU_CK_CONF register */
    258            g_xStatus = SpiritSpiWriteRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioClockOutput_2: (+1)
   \   0000004C   0xAA00             ADD      R2,SP,#+0
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x2006             MOVS     R0,#+6
   \   00000052   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x....             LDR.N    R0,??DataTable11_1
   \   0000005A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000005E   0x8001             STRH     R1,[R0, #+0]
    259          
    260          }
   \   00000060   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    261          
    262          
    263          /**
    264           * @brief  Initializes the SPIRIT Clock Output according to the specified
    265           *         parameters in the xClockOutputInitStruct.
    266           * @param  pxClockOutputInitStruct pointer to a ClockOutputInit structure that
    267           *         contains the configuration information for the SPIRIT Clock Output.
    268           * @retval None.
    269           * @note   The function SpiritGpioClockOutput() must be called in order to enable
    270           *         or disable the MCU clock dividers.
    271           */

   \                                 In section .text, align 2, keep-with-next
    272          void SpiritGpioClockOutputInit(ClockOutputInit* pxClockOutputInitStruct)
    273          {
   \                     SpiritGpioClockOutputInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    274            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    275          
    276            /* Check the parameters */
    277            s_assert_param(IS_SPIRIT_CLOCK_OUTPUT_XO(pxClockOutputInitStruct->xClockOutputXOPrescaler));
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD031             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD02E             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x2804             CMP      R0,#+4
   \   0000001A   0xD02B             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2806             CMP      R0,#+6
   \   00000020   0xD028             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2808             CMP      R0,#+8
   \   00000026   0xD025             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x280A             CMP      R0,#+10
   \   0000002C   0xD022             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x280C             CMP      R0,#+12
   \   00000032   0xD01F             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000034   0x7820             LDRB     R0,[R4, #+0]
   \   00000036   0x280E             CMP      R0,#+14
   \   00000038   0xD01C             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x2810             CMP      R0,#+16
   \   0000003E   0xD019             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000040   0x7820             LDRB     R0,[R4, #+0]
   \   00000042   0x2812             CMP      R0,#+18
   \   00000044   0xD016             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000046   0x7820             LDRB     R0,[R4, #+0]
   \   00000048   0x2814             CMP      R0,#+20
   \   0000004A   0xD013             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   0000004C   0x7820             LDRB     R0,[R4, #+0]
   \   0000004E   0x2816             CMP      R0,#+22
   \   00000050   0xD010             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000052   0x7820             LDRB     R0,[R4, #+0]
   \   00000054   0x2818             CMP      R0,#+24
   \   00000056   0xD00D             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000058   0x7820             LDRB     R0,[R4, #+0]
   \   0000005A   0x281A             CMP      R0,#+26
   \   0000005C   0xD00A             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x281C             CMP      R0,#+28
   \   00000062   0xD007             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   00000064   0x7820             LDRB     R0,[R4, #+0]
   \   00000066   0x281E             CMP      R0,#+30
   \   00000068   0xD004             BEQ.N    ??SpiritGpioClockOutputInit_0
   \   0000006A   0xF240 0x1115      MOVW     R1,#+277
   \   0000006E   0x....             LDR.N    R0,??DataTable11
   \   00000070   0x.... 0x....      BL       s_assert_failed
    278            s_assert_param(IS_SPIRIT_CLOCK_OUTPUT_RCO(pxClockOutputInitStruct->xClockOutputRCOPrescaler));
   \                     ??SpiritGpioClockOutputInit_0: (+1)
   \   00000074   0x7860             LDRB     R0,[R4, #+1]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD007             BEQ.N    ??SpiritGpioClockOutputInit_1
   \   0000007A   0x7860             LDRB     R0,[R4, #+1]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD004             BEQ.N    ??SpiritGpioClockOutputInit_1
   \   00000080   0xF44F 0x718B      MOV      R1,#+278
   \   00000084   0x....             LDR.N    R0,??DataTable11
   \   00000086   0x.... 0x....      BL       s_assert_failed
    279            s_assert_param(IS_SPIRIT_CLOCK_OUTPUT_EXTRA_CYCLES(pxClockOutputInitStruct->xExtraClockCycles));
   \                     ??SpiritGpioClockOutputInit_1: (+1)
   \   0000008A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD00D             BEQ.N    ??SpiritGpioClockOutputInit_2
   \   00000090   0x78A0             LDRB     R0,[R4, #+2]
   \   00000092   0x2820             CMP      R0,#+32
   \   00000094   0xD00A             BEQ.N    ??SpiritGpioClockOutputInit_2
   \   00000096   0x78A0             LDRB     R0,[R4, #+2]
   \   00000098   0x2840             CMP      R0,#+64
   \   0000009A   0xD007             BEQ.N    ??SpiritGpioClockOutputInit_2
   \   0000009C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000009E   0x2860             CMP      R0,#+96
   \   000000A0   0xD004             BEQ.N    ??SpiritGpioClockOutputInit_2
   \   000000A2   0xF240 0x1117      MOVW     R1,#+279
   \   000000A6   0x....             LDR.N    R0,??DataTable11
   \   000000A8   0x.... 0x....      BL       s_assert_failed
    280          
    281            /* Calculates the register value to write according to the specified configuration */
    282            tempRegValue = ((uint8_t)(pxClockOutputInitStruct->xClockOutputXOPrescaler) | (uint8_t)(pxClockOutputInitStruct->xClockOutputRCOPrescaler) | \
    283                     (uint8_t)(pxClockOutputInitStruct->xExtraClockCycles));
   \                     ??SpiritGpioClockOutputInit_2: (+1)
   \   000000AC   0x7820             LDRB     R0,[R4, #+0]
   \   000000AE   0x7861             LDRB     R1,[R4, #+1]
   \   000000B0   0x4308             ORRS     R0,R1,R0
   \   000000B2   0x78A1             LDRB     R1,[R4, #+2]
   \   000000B4   0x4308             ORRS     R0,R1,R0
   \   000000B6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    284          
    285            /* Writes the MCU_CLOCK register */
    286            g_xStatus = SpiritSpiWriteRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   000000BA   0xAA00             ADD      R2,SP,#+0
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x2006             MOVS     R0,#+6
   \   000000C0   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000C4   0x9001             STR      R0,[SP, #+4]
   \   000000C6   0x....             LDR.N    R0,??DataTable11_1
   \   000000C8   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000CC   0x8001             STRH     R1,[R0, #+0]
    287          
    288          }
   \   000000CE   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    289          
    290          
    291          /**
    292           * @brief  Sets the XO ratio as clock output.
    293           * @param  xXOPrescaler the XO prescaler to be used as clock output.
    294           *         This parameter can be any value of @ref ClockOutputXOPrescaler .
    295           * @retval None
    296           */

   \                                 In section .text, align 2, keep-with-next
    297          void SpiritGpioSetXOPrescaler(ClockOutputXOPrescaler xXOPrescaler)
    298          {
   \                     SpiritGpioSetXOPrescaler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    299            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    300          
    301            /* Check the parameters */
    302            s_assert_param(IS_SPIRIT_CLOCK_OUTPUT_XO(xXOPrescaler));
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD031             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xD02E             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C04             CMP      R4,#+4
   \   0000001A   0xD02B             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C06             CMP      R4,#+6
   \   00000020   0xD028             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C08             CMP      R4,#+8
   \   00000026   0xD025             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C0A             CMP      R4,#+10
   \   0000002C   0xD022             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C0C             CMP      R4,#+12
   \   00000032   0xD01F             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C0E             CMP      R4,#+14
   \   00000038   0xD01C             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C10             CMP      R4,#+16
   \   0000003E   0xD019             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C12             CMP      R4,#+18
   \   00000044   0xD016             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C14             CMP      R4,#+20
   \   0000004A   0xD013             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2C16             CMP      R4,#+22
   \   00000050   0xD010             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2C18             CMP      R4,#+24
   \   00000056   0xD00D             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C1A             CMP      R4,#+26
   \   0000005C   0xD00A             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C1C             CMP      R4,#+28
   \   00000062   0xD007             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x2C1E             CMP      R4,#+30
   \   00000068   0xD004             BEQ.N    ??SpiritGpioSetXOPrescaler_0
   \   0000006A   0xF44F 0x7197      MOV      R1,#+302
   \   0000006E   0x....             LDR.N    R0,??DataTable11
   \   00000070   0x.... 0x....      BL       s_assert_failed
    303          
    304            /* Reads the MCU_CLK_CONFIG register */
    305            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioSetXOPrescaler_0: (+1)
   \   00000074   0xAA00             ADD      R2,SP,#+0
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x2006             MOVS     R0,#+6
   \   0000007A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x....             LDR.N    R0,??DataTable11_1
   \   00000082   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000086   0x8001             STRH     R1,[R0, #+0]
    306          
    307            /* Mask the XO_RATIO field and writes the new value */
    308            tempRegValue &= 0x61;
   \   00000088   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008C   0xF010 0x0061      ANDS     R0,R0,#0x61
   \   00000090   0xF88D 0x0000      STRB     R0,[SP, #+0]
    309            tempRegValue |= ((uint8_t)xXOPrescaler);
   \   00000094   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000098   0x4320             ORRS     R0,R4,R0
   \   0000009A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    310          
    311            /* Writes the new XO prescaler in the MCU_CLOCK register */
    312            g_xStatus = SpiritSpiWriteRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   0000009E   0xAA00             ADD      R2,SP,#+0
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x2006             MOVS     R0,#+6
   \   000000A4   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   \   000000AA   0x....             LDR.N    R0,??DataTable11_1
   \   000000AC   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000B0   0x8001             STRH     R1,[R0, #+0]
    313          
    314          }
   \   000000B2   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    315          
    316          
    317          /**
    318           * @brief  Returns the settled XO prescaler as clock output.
    319           * @param  None.
    320           * @retval ClockOutputXOPrescaler Settled XO prescaler used for clock
    321           *         output. This parameter can be a value of @ref ClockOutputXOPrescaler .
    322           */

   \                                 In section .text, align 2, keep-with-next
    323          ClockOutputXOPrescaler SpiritGpioGetXOPrescaler(void)
    324          {
   \                     SpiritGpioGetXOPrescaler: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    325            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    326          
    327            /* Reads the MCU_CLK_CONFIG register */
    328            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   0000000A   0xAA00             ADD      R2,SP,#+0
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2006             MOVS     R0,#+6
   \   00000010   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x....             LDR.N    R0,??DataTable11_1
   \   00000018   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    329          
    330            /* Mask the XO_RATIO field and return the value */
    331            return ((ClockOutputXOPrescaler)(tempRegValue & 0x1E));
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0xF010 0x001E      ANDS     R0,R0,#0x1E
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    332          
    333          }
    334          
    335          
    336          /**
    337           * @brief  Sets the RCO ratio as clock output
    338           * @param  xRCOPrescaler the RCO prescaler to be used as clock output.
    339           *         This parameter can be any value of @ref ClockOutputRCOPrescaler .
    340           * @retval None.
    341           */

   \                                 In section .text, align 2, keep-with-next
    342          void SpiritGpioSetRCOPrescaler(ClockOutputRCOPrescaler xRCOPrescaler)
    343          {
   \                     SpiritGpioSetRCOPrescaler: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    344            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    345          
    346            /* Check the parameters */
    347            s_assert_param(IS_SPIRIT_CLOCK_OUTPUT_RCO(xRCOPrescaler));
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD007             BEQ.N    ??SpiritGpioSetRCOPrescaler_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C01             CMP      R4,#+1
   \   00000014   0xD004             BEQ.N    ??SpiritGpioSetRCOPrescaler_0
   \   00000016   0xF240 0x115B      MOVW     R1,#+347
   \   0000001A   0x....             LDR.N    R0,??DataTable11
   \   0000001C   0x.... 0x....      BL       s_assert_failed
    348          
    349            /* Reads the MCU_CLK_CONFIG register */
    350            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioSetRCOPrescaler_0: (+1)
   \   00000020   0xAA00             ADD      R2,SP,#+0
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2006             MOVS     R0,#+6
   \   00000026   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x....             LDR.N    R0,??DataTable11_1
   \   0000002E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000032   0x8001             STRH     R1,[R0, #+0]
    351          
    352            /* Mask the RCO_RATIO field and writes the new value */
    353            tempRegValue &= 0xFE;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    354            tempRegValue |= ((uint8_t)xRCOPrescaler);
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0x4320             ORRS     R0,R4,R0
   \   00000046   0xF88D 0x0000      STRB     R0,[SP, #+0]
    355          
    356            /* Writes the new RCO prescaler in the MCU_CLOCK register */
    357            g_xStatus = SpiritSpiWriteRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   0000004A   0xAA00             ADD      R2,SP,#+0
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x2006             MOVS     R0,#+6
   \   00000050   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x....             LDR.N    R0,??DataTable11_1
   \   00000058   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000005C   0x8001             STRH     R1,[R0, #+0]
    358          
    359          }
   \   0000005E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    360          
    361          
    362          /**
    363           * @brief  Returns the settled RCO prescaler as clock output.
    364           * @param  None.
    365           * @retval ClockOutputRCOPrescaler Settled RCO prescaler used for clock
    366           *         output. This parameter can be a value of @ref ClockOutputRCOPrescaler.
    367           */

   \                                 In section .text, align 2, keep-with-next
    368          ClockOutputRCOPrescaler SpiritGpioGetRCOPrescaler(void)
    369          {
   \                     SpiritGpioGetRCOPrescaler: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    370            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    371          
    372            /* Reads the MCU_CLK_CONFIG register */
    373            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   0000000A   0xAA00             ADD      R2,SP,#+0
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2006             MOVS     R0,#+6
   \   00000010   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x....             LDR.N    R0,??DataTable11_1
   \   00000018   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    374          
    375            /* Mask the RCO_RATIO field and returns the value */
    376            return ((ClockOutputRCOPrescaler)(tempRegValue & 0x01));
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    377          
    378          }
    379          
    380          
    381          /**
    382           * @brief  Sets the RCO ratio as clock output.
    383           * @param  xExtraCycles the number of extra clock cycles provided before switching
    384           *         to STANDBY state. This parameter can be any value of @ref ExtraClockCycles .
    385           * @retval None.
    386           */

   \                                 In section .text, align 2, keep-with-next
    387          void SpiritGpioSetExtraClockCycles(ExtraClockCycles xExtraCycles)
    388          {
   \                     SpiritGpioSetExtraClockCycles: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    389            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    390          
    391            /* Check the parameters */
    392            s_assert_param(IS_SPIRIT_CLOCK_OUTPUT_EXTRA_CYCLES(xExtraCycles));
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD00D             BEQ.N    ??SpiritGpioSetExtraClockCycles_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C20             CMP      R4,#+32
   \   00000014   0xD00A             BEQ.N    ??SpiritGpioSetExtraClockCycles_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C40             CMP      R4,#+64
   \   0000001A   0xD007             BEQ.N    ??SpiritGpioSetExtraClockCycles_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C60             CMP      R4,#+96
   \   00000020   0xD004             BEQ.N    ??SpiritGpioSetExtraClockCycles_0
   \   00000022   0xF44F 0x71C4      MOV      R1,#+392
   \   00000026   0x....             LDR.N    R0,??DataTable11
   \   00000028   0x.... 0x....      BL       s_assert_failed
    393          
    394            /* Reads the MCU_CLK_CONFIG register */
    395            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \                     ??SpiritGpioSetExtraClockCycles_0: (+1)
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x2006             MOVS     R0,#+6
   \   00000032   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0x....             LDR.N    R0,??DataTable11_1
   \   0000003A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000003E   0x8001             STRH     R1,[R0, #+0]
    396          
    397            /* Mask the CLOCK_TAIL field and writes the new value */
    398            tempRegValue &= 0x9F;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xF010 0x009F      ANDS     R0,R0,#0x9F
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    399            tempRegValue |= ((uint8_t)xExtraCycles);
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0x4320             ORRS     R0,R4,R0
   \   00000052   0xF88D 0x0000      STRB     R0,[SP, #+0]
    400          
    401            /* Writes the new number of extra clock cycles in the MCU_CLOCK register */
    402            g_xStatus = SpiritSpiWriteRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   00000056   0xAA00             ADD      R2,SP,#+0
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0x2006             MOVS     R0,#+6
   \   0000005C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000060   0x9001             STR      R0,[SP, #+4]
   \   00000062   0x....             LDR.N    R0,??DataTable11_1
   \   00000064   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000068   0x8001             STRH     R1,[R0, #+0]
    403          
    404          }
   \   0000006A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    405          
    406          
    407          /**
    408           * @brief  Returns the settled RCO prescaler as clock output.
    409           * @param  None.
    410           * @retval ExtraClockCycles Settled number of extra clock cycles
    411           *         provided before switching to STANDBY state. This parameter can be
    412           *         any value of @ref ExtraClockCycles .
    413           */

   \                                 In section .text, align 2, keep-with-next
    414          ExtraClockCycles SpiritGpioGetExtraClockCycles(void)
    415          {
   \                     SpiritGpioGetExtraClockCycles: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    416            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    417          
    418            /* Reads the MCU_CLK_CONFIG register */
    419            g_xStatus = SpiritSpiReadRegisters(MCU_CK_CONF_BASE, 1, &tempRegValue);
   \   0000000A   0xAA00             ADD      R2,SP,#+0
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x2006             MOVS     R0,#+6
   \   00000010   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x....             LDR.N    R0,??DataTable11_1
   \   00000018   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    420          
    421            /* Mask the CLOCK_TAIL field and returns the value */
    422            return ((ExtraClockCycles)(tempRegValue & 0x60));
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0xF010 0x0060      ANDS     R0,R0,#0x60
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    423          
    424          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 42H, 61H, 73H, 65H
   \              0x35 0x5C    
   \              0x42 0x61    
   \              0x73 0x65    
   \   00000020   0x5F 0x30          DC8 5FH, 30H, 32H, 5CH, 32H, 30H, 31H, 33H
   \              0x32 0x5C    
   \              0x32 0x30    
   \              0x31 0x33    
   \   00000028   0x5F 0x31          DC8 5FH, 31H, 31H, 5FH, 32H, 35H, 5FH, 53H
   \              0x31 0x5F    
   \              0x32 0x35    
   \              0x5F 0x53    
   \   00000030   0x70 0x69          DC8 70H, 69H, 72H, 69H, 74H, 31H, 5FH, 45H
   \              0x72 0x69    
   \              0x74 0x31    
   \              0x5F 0x45    
   \   00000038   0x6C 0x65          DC8 6CH, 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H
   \              0x6B 0x74    
   \              0x72 0x6F    
   \              0x6C 0x75    
   \   00000040   0x78 0x5C          DC8 78H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000048   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000050   0x79 0x5F          DC8 79H, 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H
   \              0x50 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000058   0x74 0x5C          DC8 74H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000060   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000068   0x79 0x5C          DC8 79H, 5CH, 53H, 6FH, 75H, 72H, 63H, 65H
   \              0x53 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000070   0x5C 0x73          DC8 5CH, 73H, 72H, 63H, 5CH, 53H, 50H, 49H
   \              0x72 0x63    
   \              0x5C 0x53    
   \              0x50 0x49    
   \   00000078   0x52 0x49          DC8 52H, 49H, 54H, 5FH, 47H, 70H, 69H, 6FH
   \              0x54 0x5F    
   \              0x47 0x70    
   \              0x69 0x6F    
   \   00000080   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000083   0x00               DC8 0
    425          
    426          
    427          /**
    428           * @}
    429           */
    430          
    431          
    432          /**
    433           * @}
    434           */
    435          
    436          
    437          /**
    438           * @}
    439           */
    440          
    441          
    442          
    443          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SpiritGpioClockOutput
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGpioClockOutputInit
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGpioGetExtraClockCycles
        16   -> SdkEvalSpiReadRegisters
      24   SpiritGpioGetLevel
        24   -> SdkEvalSpiReadRegisters
        24   -> s_assert_failed
      16   SpiritGpioGetRCOPrescaler
        16   -> SdkEvalSpiReadRegisters
      16   SpiritGpioGetXOPrescaler
        16   -> SdkEvalSpiReadRegisters
      16   SpiritGpioInit
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGpioSetExtraClockCycles
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      24   SpiritGpioSetLevel
        24   -> SdkEvalSpiReadRegisters
        24   -> SdkEvalSpiWriteRegisters
        24   -> s_assert_failed
      16   SpiritGpioSetRCOPrescaler
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGpioSetXOPrescaler
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGpioTemperatureSensor
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
     132  ?_0
      98  SpiritGpioClockOutput
     208  SpiritGpioClockOutputInit
      40  SpiritGpioGetExtraClockCycles
      88  SpiritGpioGetLevel
      40  SpiritGpioGetRCOPrescaler
      40  SpiritGpioGetXOPrescaler
     320  SpiritGpioInit
     108  SpiritGpioSetExtraClockCycles
     146  SpiritGpioSetLevel
      96  SpiritGpioSetRCOPrescaler
     180  SpiritGpioSetXOPrescaler
     146  SpiritGpioTemperatureSensor

 
   132 bytes in section .rodata
 1 518 bytes in section .text
 
 1 518 bytes of CODE  memory
   132 bytes of CONST memory

Errors: none
Warnings: none
