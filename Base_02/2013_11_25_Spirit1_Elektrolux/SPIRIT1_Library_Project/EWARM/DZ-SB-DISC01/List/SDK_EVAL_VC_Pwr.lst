###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.1.5641/W32 for ARM      22/Feb/2014  21:59:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\S #
#                    ource\src\SDK_EVAL_VC_Pwr.c                              #
#    Command line =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\S #
#                    ource\src\SDK_EVAL_VC_Pwr.c -D USE_STDPERIPH_DRIVER -D   #
#                    VECT_TAB_FLASH -D STM32L1XX_MD -D IAR_ARM_CM3 -D         #
#                    USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D             #
#                    USE_SYSTICK_DELAY -D SDK -lC                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\List\ -o                              #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_ #
#                    po_poprawie\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Librar #
#                    y_Project\EWARM\.\ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_ #
#                    SYS\Projekt_po_poprawie\2013_11_25_Spirit1_Elektrolux\SP #
#                    IRIT1_Library_Project\EWARM\..\Application\ -I           #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\Application\examples\ -I                        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\Application\runtime\ -I                         #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\ -I        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\SPIRIT1_Library\Source\inc\ -I                  #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\SDK_Eval_Util\Source\inc\ -I                    #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\ #
#                    CM3\DeviceSupport\ST\STM32L1xx\ -I                       #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L #
#                    1xx_StdPeriph_Driver\inc\ -I                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\ -I        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\   #
#                    -On --use_c++_inline -I "C:\Program Files (x86)\IAR      #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\List\SDK_EVAL_VC_Pwr.lst              #
#    Object file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\Obj\SDK_EVAL_VC_Pwr.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawie\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\Source\src\SDK_EVAL_VC_Pwr.c
      1          /**
      2           * @file     SDK_EVAL_VC_Pwr.c
      3           * @author   MSH RF/ART Team IMS-Systems Lab
      4           * @version  V1.0.0
      5           * @date     August 4, 2011
      6           * @brief    Connection/disconnection & power management.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21           *
     22           */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32l1xx.h"
     26          #include "usb_lib.h"
     27          #include "usb_conf.h"
     28          #include "SDK_EVAL_VC_Pwr.h"
     29          #include "SDK_EVAL_VC_General.h"
     30          
     31          
     32          
     33          /** @addtogroup SDK_EVAL_Virtual_Com
     34           * @{
     35           */
     36          
     37          
     38          /** @addtogroup SDK_EVAL_VC_Power
     39           * @{
     40           */
     41          
     42          
     43          /** @defgroup SDK_EVAL_VC_Power_Private_TypesDefinitions    SDK EVAL VC Power Private TypesDefinitions
     44           * @{
     45           */
     46          
     47          /**
     48           * @}
     49           */
     50          
     51          
     52          /** @defgroup SDK_EVAL_VC_Power_Private_Defines   SDK EVAL VC Power Private Defines
     53           * @{
     54           */
     55          
     56          /**
     57           * @}
     58           */
     59          
     60          
     61          /** @defgroup SDK_EVAL_VC_Power_Private_Macros    SDK EVAL VC Power Private Macros
     62           * @{
     63           */
     64          
     65          /**
     66           * @}
     67           */
     68          
     69          
     70          /** @defgroup SDK_EVAL_VC_Power_Private_Variables   SDK EVAL VC Power Private Variables
     71           * @{
     72           */
     73          

   \                                 In section .bss, align 4
     74          __IO uint32_t bDeviceState = UNCONNECTED; /*!< USB device status */
   \                     bDeviceState:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
     75          __IO bool fSuspendEnabled = TRUE;  /*!< true when suspend is possible */
   \                     fSuspendEnabled:
   \   00000000   0x01               DC8 1
     76          
     77          struct
     78          {
     79            __IO RESUME_STATE eState;
     80            __IO uint8_t bESOFcnt;

   \                                 In section .bss, align 4
     81          }ResumeS;
   \                     ResumeS:
   \   00000000                      DS8 4
     82          
     83          /**
     84           * @}
     85           */
     86          
     87          
     88          /** @defgroup SDK_EVAL_VC_Power_Private_FunctionPrototypes    SDK EVAL VC Power Private FunctionPrototypes
     89           * @{
     90           */
     91          
     92          /**
     93           * @}
     94           */
     95          
     96          
     97          /** @defgroup SDK_EVAL_VC_Power_Private_Functions   SDK EVAL VC Power Private Functions
     98           * @{
     99           */
    100          
    101          /**
    102           * @brief  Handles switch-on conditions.
    103           * @param  None.
    104           * @retval RESULT: USB_SUCCESS.
    105           */

   \                                 In section .text, align 2, keep-with-next
    106          RESULT SdkEvalVCPowerOn(void)
    107          {
   \                     SdkEvalVCPowerOn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    108            uint16_t wRegVal;
    109          
    110            /*** cable plugged-in ? ***/
    111            SdkEvalVCCableConfig(ENABLE);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       SdkEvalVCCableConfig
    112          
    113            /*** CNTR_PWDN = 0 ***/
    114            wRegVal = CNTR_FRES;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x0004             MOVS     R4,R0
    115            _SetCNTR(wRegVal);
   \   0000000C   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x6004             STR      R4,[R0, #+0]
    116          
    117            /*** CNTR_FRES = 0 ***/
    118            wInterrupt_Mask = 0;
   \   00000012   0x....             LDR.N    R0,??DataTable4_1
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    119            _SetCNTR(wInterrupt_Mask);
   \   00000018   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000001A   0x....             LDR.N    R1,??DataTable4_1
   \   0000001C   0x8809             LDRH     R1,[R1, #+0]
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    120            /*** Clear pending interrupts ***/
    121            _SetISTR(0);
   \   00000020   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40005c44
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x6001             STR      R1,[R0, #+0]
    122            /*** Set interrupt mask ***/
    123            wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
   \   00000026   0x....             LDR.N    R0,??DataTable4_1
   \   00000028   0xF44F 0x51E0      MOV      R1,#+7168
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    124            _SetCNTR(wInterrupt_Mask);
   \   0000002E   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000030   0x....             LDR.N    R1,??DataTable4_1
   \   00000032   0x8809             LDRH     R1,[R1, #+0]
   \   00000034   0x6001             STR      R1,[R0, #+0]
    125          
    126            return USB_SUCCESS;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    127          
    128          }
    129          
    130          
    131          /**
    132           * @brief  Handles switch-off conditions.
    133           * @param  None.
    134           * @retval RESULT: USB_SUCCESS.
    135           */

   \                                 In section .text, align 2, keep-with-next
    136          RESULT SdkEvalVCPowerOff(void)
    137          {
   \                     SdkEvalVCPowerOff: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138            /* disable all interrupts and force USB reset */
    139            _SetCNTR(CNTR_FRES);
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x6001             STR      R1,[R0, #+0]
    140            /* clear interrupt status register */
    141            _SetISTR(0);
   \   00000008   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40005c44
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    142            /* Disable the Pull-Up*/
    143            SdkEvalVCCableConfig(DISABLE);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       SdkEvalVCCableConfig
    144            /* switch-off device */
    145            _SetCNTR(CNTR_FRES + CNTR_PDWN);
   \   00000014   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x6001             STR      R1,[R0, #+0]
    146          
    147            /* sw variables reset */
    148            /* ... */
    149          
    150            return USB_SUCCESS;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
    151          
    152          }
    153          
    154          
    155          /**
    156           * @brief  Sets suspend mode operating conditions.
    157           * @param  None.
    158           * @retval None.
    159           */

   \                                 In section .text, align 2, keep-with-next
    160          void SdkEvalVCSuspend(void)
    161          {
   \                     SdkEvalVCSuspend: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    162            uint16_t wCNTR;
    163            /* suspend preparation */
    164            /* ... */
    165          
    166            /* macrocell enters suspend mode */
    167            wCNTR = _GetCNTR();
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    168            wCNTR |= CNTR_FSUSP;
   \   00000008   0xF054 0x0408      ORRS     R4,R4,#0x8
    169            _SetCNTR(wCNTR);
   \   0000000C   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x6004             STR      R4,[R0, #+0]
    170          
    171            /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
    172            /* power reduction */
    173            /* ... on connected devices */
    174          
    175            /* force low-power mode in the macrocell */
    176            wCNTR = _GetCNTR();
   \   00000012   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x0004             MOVS     R4,R0
    177            wCNTR |= CNTR_LPMODE;
   \   00000018   0xF054 0x0404      ORRS     R4,R4,#0x4
    178            _SetCNTR(wCNTR);
   \   0000001C   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000001E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   0x6004             STR      R4,[R0, #+0]
    179          
    180            /* switch-off the clocks */
    181            /* ... */
    182            SdkEvalVCEnterLowPowerMode();
   \   00000022   0x.... 0x....      BL       SdkEvalVCEnterLowPowerMode
    183          
    184          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    185          
    186          
    187          /**
    188           * @brief  Handles wake-up restoring normal operations.
    189           * @param  None.
    190           * @retval None.
    191           */

   \                                 In section .text, align 2, keep-with-next
    192          void SdkEvalVCResumeInit(void)
    193          {
   \                     SdkEvalVCResumeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    194            uint16_t wCNTR;
    195          
    196            /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
    197            /* restart the clocks */
    198            /* ...  */
    199          
    200            /* CNTR_LPMODE = 0 */
    201            wCNTR = _GetCNTR();
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0004             MOVS     R4,R0
    202            wCNTR &= (~CNTR_LPMODE);
   \   00000008   0xF64F 0x70FB      MOVW     R0,#+65531
   \   0000000C   0x4004             ANDS     R4,R0,R4
    203            _SetCNTR(wCNTR);
   \   0000000E   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x6004             STR      R4,[R0, #+0]
    204          
    205            /* restore full power */
    206            /* ... on connected devices */
    207            SdkEvalVCLeaveLowPowerMode();
   \   00000014   0x.... 0x....      BL       SdkEvalVCLeaveLowPowerMode
    208          
    209            /* reset FSUSP bit */
    210            _SetCNTR(IMR_MSK);
   \   00000018   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000001A   0xF44F 0x4106      MOV      R1,#+34304
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    211          
    212            /* reverse suspend preparation */
    213            /* ... */
    214          
    215          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    216          
    217          
    218          /**
    219           * @brief  This is the state machine handling resume operations and
    220           *         timing sequence. The control is based on the SdkEvalVCResume structure
    221           *         variables and on the ESOF interrupt calling this subroutine
    222           *         without changing machine state.
    223           * @param  xResumeSetVal: a state machine value (RESUME_STATE)
    224           *         RESUME_ESOF doesn't change ResumeS.eState allowing
    225           *         decrementing of the ESOF counter in different states.
    226           * @retval None.
    227           */

   \                                 In section .text, align 2, keep-with-next
    228          void SdkEvalVCResume(RESUME_STATE xResumeSetVal)
    229          {
   \                     SdkEvalVCResume: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    230            uint16_t wCNTR;
    231          
    232            if (xResumeSetVal != RESUME_ESOF)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C07             CMP      R4,#+7
   \   00000008   0xD001             BEQ.N    ??SdkEvalVCResume_0
    233              ResumeS.eState = xResumeSetVal;
   \   0000000A   0x....             LDR.N    R0,??DataTable4_3
   \   0000000C   0x7004             STRB     R4,[R0, #+0]
    234          
    235            switch (ResumeS.eState)
   \                     ??SdkEvalVCResume_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable4_3
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD008             BEQ.N    ??SdkEvalVCResume_1
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xD012             BEQ.N    ??SdkEvalVCResume_2
   \   0000001A   0xD30B             BCC.N    ??SdkEvalVCResume_3
   \   0000001C   0x2804             CMP      R0,#+4
   \   0000001E   0xD023             BEQ.N    ??SdkEvalVCResume_4
   \   00000020   0xD315             BCC.N    ??SdkEvalVCResume_5
   \   00000022   0x2805             CMP      R0,#+5
   \   00000024   0xD02F             BEQ.N    ??SdkEvalVCResume_6
   \   00000026   0xE044             B.N      ??SdkEvalVCResume_7
    236            {
    237            case RESUME_EXTERNAL:
    238              SdkEvalVCResumeInit();
   \                     ??SdkEvalVCResume_1: (+1)
   \   00000028   0x.... 0x....      BL       SdkEvalVCResumeInit
    239              ResumeS.eState = RESUME_OFF;
   \   0000002C   0x....             LDR.N    R0,??DataTable4_3
   \   0000002E   0x2106             MOVS     R1,#+6
   \   00000030   0x7001             STRB     R1,[R0, #+0]
    240              break;
   \   00000032   0xE041             B.N      ??SdkEvalVCResume_8
    241            case RESUME_INTERNAL:
    242              SdkEvalVCResumeInit();
   \                     ??SdkEvalVCResume_3: (+1)
   \   00000034   0x.... 0x....      BL       SdkEvalVCResumeInit
    243              ResumeS.eState = RESUME_START;
   \   00000038   0x....             LDR.N    R0,??DataTable4_3
   \   0000003A   0x2104             MOVS     R1,#+4
   \   0000003C   0x7001             STRB     R1,[R0, #+0]
    244              break;
   \   0000003E   0xE03B             B.N      ??SdkEvalVCResume_8
    245            case RESUME_LATER:
    246              ResumeS.bESOFcnt = 2;
   \                     ??SdkEvalVCResume_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable4_3
   \   00000042   0x2102             MOVS     R1,#+2
   \   00000044   0x7041             STRB     R1,[R0, #+1]
    247              ResumeS.eState = RESUME_WAIT;
   \   00000046   0x....             LDR.N    R0,??DataTable4_3
   \   00000048   0x2103             MOVS     R1,#+3
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
    248              break;
   \   0000004C   0xE034             B.N      ??SdkEvalVCResume_8
    249            case RESUME_WAIT:
    250              ResumeS.bESOFcnt--;
   \                     ??SdkEvalVCResume_5: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable4_3
   \   00000050   0x7840             LDRB     R0,[R0, #+1]
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0x....             LDR.N    R1,??DataTable4_3
   \   00000056   0x7048             STRB     R0,[R1, #+1]
    251              if (ResumeS.bESOFcnt == 0)
   \   00000058   0x....             LDR.N    R0,??DataTable4_3
   \   0000005A   0x7840             LDRB     R0,[R0, #+1]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD102             BNE.N    ??SdkEvalVCResume_9
    252                ResumeS.eState = RESUME_START;
   \   00000060   0x....             LDR.N    R0,??DataTable4_3
   \   00000062   0x2104             MOVS     R1,#+4
   \   00000064   0x7001             STRB     R1,[R0, #+0]
    253              break;
   \                     ??SdkEvalVCResume_9: (+1)
   \   00000066   0xE027             B.N      ??SdkEvalVCResume_8
    254            case RESUME_START:
    255              wCNTR = _GetCNTR();
   \                     ??SdkEvalVCResume_4: (+1)
   \   00000068   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x0005             MOVS     R5,R0
    256              wCNTR |= CNTR_RESUME;
   \   0000006E   0xF055 0x0510      ORRS     R5,R5,#0x10
    257              _SetCNTR(wCNTR);
   \   00000072   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0x6005             STR      R5,[R0, #+0]
    258              ResumeS.eState = RESUME_ON;
   \   00000078   0x....             LDR.N    R0,??DataTable4_3
   \   0000007A   0x2105             MOVS     R1,#+5
   \   0000007C   0x7001             STRB     R1,[R0, #+0]
    259              ResumeS.bESOFcnt = 10;
   \   0000007E   0x....             LDR.N    R0,??DataTable4_3
   \   00000080   0x210A             MOVS     R1,#+10
   \   00000082   0x7041             STRB     R1,[R0, #+1]
    260              break;
   \   00000084   0xE018             B.N      ??SdkEvalVCResume_8
    261            case RESUME_ON:
    262              ResumeS.bESOFcnt--;
   \                     ??SdkEvalVCResume_6: (+1)
   \   00000086   0x....             LDR.N    R0,??DataTable4_3
   \   00000088   0x7840             LDRB     R0,[R0, #+1]
   \   0000008A   0x1E40             SUBS     R0,R0,#+1
   \   0000008C   0x....             LDR.N    R1,??DataTable4_3
   \   0000008E   0x7048             STRB     R0,[R1, #+1]
    263              if (ResumeS.bESOFcnt == 0)
   \   00000090   0x....             LDR.N    R0,??DataTable4_3
   \   00000092   0x7840             LDRB     R0,[R0, #+1]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD10B             BNE.N    ??SdkEvalVCResume_10
    264              {
    265                wCNTR = _GetCNTR();
   \   00000098   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x0005             MOVS     R5,R0
    266                wCNTR &= (~CNTR_RESUME);
   \   0000009E   0xF64F 0x70EF      MOVW     R0,#+65519
   \   000000A2   0x4005             ANDS     R5,R0,R5
    267                _SetCNTR(wCNTR);
   \   000000A4   0x....             LDR.N    R0,??DataTable4  ;; 0x40005c40
   \   000000A6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A8   0x6005             STR      R5,[R0, #+0]
    268                ResumeS.eState = RESUME_OFF;
   \   000000AA   0x....             LDR.N    R0,??DataTable4_3
   \   000000AC   0x2106             MOVS     R1,#+6
   \   000000AE   0x7001             STRB     R1,[R0, #+0]
    269              }
    270              break;
   \                     ??SdkEvalVCResume_10: (+1)
   \   000000B0   0xE002             B.N      ??SdkEvalVCResume_8
    271            case RESUME_OFF:
    272            case RESUME_ESOF:
    273            default:
    274              ResumeS.eState = RESUME_OFF;
   \                     ??SdkEvalVCResume_7: (+1)
   \   000000B2   0x....             LDR.N    R0,??DataTable4_3
   \   000000B4   0x2106             MOVS     R1,#+6
   \   000000B6   0x7001             STRB     R1,[R0, #+0]
    275              break;
    276            }
    277          
    278          }
   \                     ??SdkEvalVCResume_8: (+1)
   \   000000B8   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40005C40         DC32     0x40005c40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     wInterrupt_Mask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40005C44         DC32     0x40005c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ResumeS
    279          
    280          /**
    281           * @}
    282           */
    283          
    284          
    285          /**
    286           * @}
    287           */
    288          
    289          
    290          /**
    291           * @}
    292           */
    293          
    294          
    295          
    296          
    297          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SdkEvalVCPowerOff
         8   -> SdkEvalVCCableConfig
       8   SdkEvalVCPowerOn
         8   -> SdkEvalVCCableConfig
      16   SdkEvalVCResume
        16   -> SdkEvalVCResumeInit
       8   SdkEvalVCResumeInit
         8   -> SdkEvalVCLeaveLowPowerMode
       8   SdkEvalVCSuspend
         8   -> SdkEvalVCEnterLowPowerMode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ResumeS
      30  SdkEvalVCPowerOff
      58  SdkEvalVCPowerOn
     186  SdkEvalVCResume
      34  SdkEvalVCResumeInit
      40  SdkEvalVCSuspend
       4  bDeviceState
       1  fSuspendEnabled

 
   8 bytes in section .bss
   1 byte  in section .data
 364 bytes in section .text
 
 364 bytes of CODE memory
   9 bytes of DATA memory

Errors: none
Warnings: none
