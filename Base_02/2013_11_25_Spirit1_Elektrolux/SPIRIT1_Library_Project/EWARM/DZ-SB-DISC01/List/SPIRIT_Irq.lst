###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Irq.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Irq.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_Irq.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_Irq.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Irq.c
      1          /**
      2           * @file    SPIRIT_Irq.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT IRQs.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_Irq.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          
     30          /**
     31           * @addtogroup SPIRIT_Libraries
     32           * @{
     33           */
     34          
     35          
     36          /**
     37           * @addtogroup SPIRIT_Irq
     38           * @{
     39           */
     40          
     41          
     42          /**
     43           * @defgroup Irq_Private_TypesDefinitions       IRQ Private Types Definitions
     44           * @{
     45           */
     46          
     47          /**
     48           *@}
     49           */
     50          
     51          
     52          /**
     53           * @defgroup Irq_Private_Defines                IRQ Private Defines
     54           * @{
     55           */
     56          
     57          /**
     58           *@}
     59           */
     60          
     61          
     62          /**
     63           * @defgroup Irq_Private_Macros                 IRQ Private Macros
     64           * @{
     65           */
     66          
     67          /**
     68           *@}
     69           */
     70          
     71          
     72          /**
     73           * @defgroup Irq_Private_Variables              IRQ Private Variables
     74           * @{
     75           */
     76          
     77          
     78          /**
     79           *@}
     80           */
     81          
     82          
     83          /**
     84           * @defgroup Irq_Private_FunctionPrototypes     IRQ Private Function Prototypes
     85           * @{
     86           */
     87          
     88          /**
     89           *@}
     90           */
     91          
     92          
     93          /**
     94           * @defgroup Irq_Private_Functions              IRQ Private Functions
     95           * @{
     96           */
     97          
     98          
     99          /**
    100           * @brief  De initializate the SpiritIrqs structure setting all the bitfield to 0.
    101           *         Moreover, it sets the IRQ mask registers to 0x00000000, disabling all IRQs.
    102           * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
    103           *         bitfields will be settled to zero.
    104           * @retval None.
    105           */

   \                                 In section .text, align 2, keep-with-next
    106          void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
    107          {
   \                     SpiritIrqDeInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    108            uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6001             STR      R1,[R0, #+0]
    109          
    110            if(pxIrqInit!=NULL)
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD001             BEQ.N    ??SpiritIrqDeInit_0
    111            {
    112              uint32_t tempValue = 0x00000000;
   \   0000000E   0x2000             MOVS     R0,#+0
    113              
    114              /* Sets the bitfields of passed structure to one */
    115              *pxIrqInit = (*(SpiritIrqs*)&tempValue);
   \   00000010   0x6020             STR      R0,[R4, #+0]
    116            }
    117          
    118            /* Writes the IRQ_MASK registers */
    119            g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
   \                     ??SpiritIrqDeInit_0: (+1)
   \   00000012   0xAA00             ADD      R2,SP,#+0
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x2090             MOVS     R0,#+144
   \   00000018   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x....             LDR.N    R0,??DataTable6
   \   00000020   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000024   0x8001             STRH     R1,[R0, #+0]
    120          }
   \   00000026   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    121          
    122          
    123          /**
    124           * @brief  Enables all the IRQs according to the user defined pxIrqInit structure.
    125           * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, through which the
    126           *         user enable specific IRQs. This parameter is a pointer to a SpiritIrqs.
    127           *         For example suppose to enable only the two IRQ Low Battery Level and Tx Data Sent:
    128           * @code
    129           * SpiritIrqs myIrqInit = {0};
    130           * myIrqInit.IRQ_LOW_BATT_LVL = 1;
    131           * myIrqInit.IRQ_TX_DATA_SENT = 1;
    132           * SpiritIrqInit(&myIrqInit);
    133           * @endcode
    134           * @retval None.
    135           */

   \                                 In section .text, align 2, keep-with-next
    136          void SpiritIrqInit(SpiritIrqs* pxIrqInit)
    137          {
   \                     SpiritIrqInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    138            uint8_t tempRegValue[4];
    139            uint8_t* tmpPoint;
    140          
    141            /* Cast the bitfields structure in an array of char using */
    142            tmpPoint = (uint8_t*)(pxIrqInit);
   \   00000006   0x0025             MOVS     R5,R4
    143            for(char i=0; i<4; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \                     ??SpiritIrqInit_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2804             CMP      R0,#+4
   \   0000000E   0xDA07             BGE.N    ??SpiritIrqInit_1
    144            {
    145              tempRegValue[3-i]= tmpPoint[i];
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x5D41             LDRB     R1,[R0, R5]
   \   00000014   0xAA00             ADD      R2,SP,#+0
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x1A12             SUBS     R2,R2,R0
   \   0000001A   0x70D1             STRB     R1,[R2, #+3]
    146            }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F4             B.N      ??SpiritIrqInit_0
    147          
    148            /* Writes the IRQ_MASK registers */
    149            g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
   \                     ??SpiritIrqInit_1: (+1)
   \   00000020   0xAA00             ADD      R2,SP,#+0
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x2090             MOVS     R0,#+144
   \   00000026   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x....             LDR.N    R0,??DataTable6
   \   0000002E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000032   0x8001             STRH     R1,[R0, #+0]
    150          
    151          }
   \   00000034   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    152          
    153          
    154          /**
    155           * @brief  Enables or disables a specific IRQ.
    156           * @param  xIrq IRQ to enable or disable.
    157           *         This parameter can be any value of @ref IrqList.
    158           * @param  xNewState new state for the IRQ.
    159           *         This parameter can be: S_ENABLE or S_DISABLE.
    160           * @retval None.
    161           */

   \                                 In section .text, align 2, keep-with-next
    162          void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
    163          {
   \                     SpiritIrq: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    164            uint8_t tempRegValue[4];
    165            uint32_t tempValue = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    166          
    167            /* Check the parameters */
    168            s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD05A             BEQ.N    ??SpiritIrq_0
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD058             BEQ.N    ??SpiritIrq_0
   \   00000010   0x2C04             CMP      R4,#+4
   \   00000012   0xD056             BEQ.N    ??SpiritIrq_0
   \   00000014   0x2C08             CMP      R4,#+8
   \   00000016   0xD054             BEQ.N    ??SpiritIrq_0
   \   00000018   0x2C10             CMP      R4,#+16
   \   0000001A   0xD052             BEQ.N    ??SpiritIrq_0
   \   0000001C   0x2C20             CMP      R4,#+32
   \   0000001E   0xD050             BEQ.N    ??SpiritIrq_0
   \   00000020   0x2C40             CMP      R4,#+64
   \   00000022   0xD04E             BEQ.N    ??SpiritIrq_0
   \   00000024   0x2C80             CMP      R4,#+128
   \   00000026   0xD04C             BEQ.N    ??SpiritIrq_0
   \   00000028   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000002C   0xD049             BEQ.N    ??SpiritIrq_0
   \   0000002E   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000032   0xD046             BEQ.N    ??SpiritIrq_0
   \   00000034   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000038   0xD043             BEQ.N    ??SpiritIrq_0
   \   0000003A   0xF5B4 0x6F00      CMP      R4,#+2048
   \   0000003E   0xD040             BEQ.N    ??SpiritIrq_0
   \   00000040   0xF5B4 0x5F80      CMP      R4,#+4096
   \   00000044   0xD03D             BEQ.N    ??SpiritIrq_0
   \   00000046   0xF5B4 0x5F00      CMP      R4,#+8192
   \   0000004A   0xD03A             BEQ.N    ??SpiritIrq_0
   \   0000004C   0xF5B4 0x4F80      CMP      R4,#+16384
   \   00000050   0xD037             BEQ.N    ??SpiritIrq_0
   \   00000052   0xF5B4 0x4F00      CMP      R4,#+32768
   \   00000056   0xD034             BEQ.N    ??SpiritIrq_0
   \   00000058   0xF5B4 0x3F80      CMP      R4,#+65536
   \   0000005C   0xD031             BEQ.N    ??SpiritIrq_0
   \   0000005E   0xF5B4 0x3F00      CMP      R4,#+131072
   \   00000062   0xD02E             BEQ.N    ??SpiritIrq_0
   \   00000064   0xF5B4 0x2F80      CMP      R4,#+262144
   \   00000068   0xD02B             BEQ.N    ??SpiritIrq_0
   \   0000006A   0xF5B4 0x2F00      CMP      R4,#+524288
   \   0000006E   0xD028             BEQ.N    ??SpiritIrq_0
   \   00000070   0xF5B4 0x1F80      CMP      R4,#+1048576
   \   00000074   0xD025             BEQ.N    ??SpiritIrq_0
   \   00000076   0xF5B4 0x1F00      CMP      R4,#+2097152
   \   0000007A   0xD022             BEQ.N    ??SpiritIrq_0
   \   0000007C   0xF5B4 0x0F80      CMP      R4,#+4194304
   \   00000080   0xD01F             BEQ.N    ??SpiritIrq_0
   \   00000082   0xF5B4 0x0F00      CMP      R4,#+8388608
   \   00000086   0xD01C             BEQ.N    ??SpiritIrq_0
   \   00000088   0xF1B4 0x7F80      CMP      R4,#+16777216
   \   0000008C   0xD019             BEQ.N    ??SpiritIrq_0
   \   0000008E   0xF1B4 0x7F00      CMP      R4,#+33554432
   \   00000092   0xD016             BEQ.N    ??SpiritIrq_0
   \   00000094   0xF1B4 0x6F80      CMP      R4,#+67108864
   \   00000098   0xD013             BEQ.N    ??SpiritIrq_0
   \   0000009A   0xF1B4 0x6F00      CMP      R4,#+134217728
   \   0000009E   0xD010             BEQ.N    ??SpiritIrq_0
   \   000000A0   0xF1B4 0x5F80      CMP      R4,#+268435456
   \   000000A4   0xD00D             BEQ.N    ??SpiritIrq_0
   \   000000A6   0xF1B4 0x5F00      CMP      R4,#+536870912
   \   000000AA   0xD00A             BEQ.N    ??SpiritIrq_0
   \   000000AC   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   000000B0   0xD007             BEQ.N    ??SpiritIrq_0
   \   000000B2   0xF07F 0x4000      MVNS     R0,#-2147483648
   \   000000B6   0x4284             CMP      R4,R0
   \   000000B8   0xD003             BEQ.N    ??SpiritIrq_0
   \   000000BA   0x21A8             MOVS     R1,#+168
   \   000000BC   0x....             LDR.N    R0,??DataTable6_1
   \   000000BE   0x.... 0x....      BL       s_assert_failed
    169            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \                     ??SpiritIrq_0: (+1)
   \   000000C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C4   0x2D00             CMP      R5,#+0
   \   000000C6   0xD006             BEQ.N    ??SpiritIrq_1
   \   000000C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CA   0x2D01             CMP      R5,#+1
   \   000000CC   0xD003             BEQ.N    ??SpiritIrq_1
   \   000000CE   0x21A9             MOVS     R1,#+169
   \   000000D0   0x....             LDR.N    R0,??DataTable6_1
   \   000000D2   0x.... 0x....      BL       s_assert_failed
    170          
    171            /* Reads the IRQ_MASK registers */
    172            g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
   \                     ??SpiritIrq_1: (+1)
   \   000000D6   0xAA00             ADD      R2,SP,#+0
   \   000000D8   0x2104             MOVS     R1,#+4
   \   000000DA   0x2090             MOVS     R0,#+144
   \   000000DC   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000000E0   0x9001             STR      R0,[SP, #+4]
   \   000000E2   0x....             LDR.N    R0,??DataTable6
   \   000000E4   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000E8   0x8001             STRH     R1,[R0, #+0]
    173          
    174            /* Build the IRQ mask word */
    175            for(char i=0; i<4; i++)
   \   000000EA   0x2000             MOVS     R0,#+0
   \                     ??SpiritIrq_2: (+1)
   \   000000EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EE   0x2804             CMP      R0,#+4
   \   000000F0   0xDA0A             BGE.N    ??SpiritIrq_3
    176            {
    177              tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
   \   000000F2   0xA900             ADD      R1,SP,#+0
   \   000000F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F6   0x5C41             LDRB     R1,[R0, R1]
   \   000000F8   0xF1D0 0x0203      RSBS     R2,R0,#+3
   \   000000FC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000FE   0x00D2             LSLS     R2,R2,#+3
   \   00000100   0x4091             LSLS     R1,R1,R2
   \   00000102   0x198E             ADDS     R6,R1,R6
    178            }
   \   00000104   0x1C40             ADDS     R0,R0,#+1
   \   00000106   0xE7F1             B.N      ??SpiritIrq_2
    179            
    180            /* Rebuild the new mask according to user request */
    181            if(xNewState == S_DISABLE)
   \                     ??SpiritIrq_3: (+1)
   \   00000108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000010A   0x2D00             CMP      R5,#+0
   \   0000010C   0xD101             BNE.N    ??SpiritIrq_4
    182            {
    183              tempValue &= (~xIrq);
   \   0000010E   0x43A6             BICS     R6,R6,R4
   \   00000110   0xE000             B.N      ??SpiritIrq_5
    184            }
    185            else
    186            {
    187              tempValue |= (xIrq);
   \                     ??SpiritIrq_4: (+1)
   \   00000112   0x4326             ORRS     R6,R4,R6
    188            }
    189          
    190            /* Build the array of bytes to write in the IRQ_MASK registers */
    191            for(char j=0; j<4; j++)
   \                     ??SpiritIrq_5: (+1)
   \   00000114   0x2000             MOVS     R0,#+0
   \                     ??SpiritIrq_6: (+1)
   \   00000116   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000118   0x2804             CMP      R0,#+4
   \   0000011A   0xDA0A             BGE.N    ??SpiritIrq_7
    192            {
    193              tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
   \   0000011C   0xF1D0 0x0103      RSBS     R1,R0,#+3
   \   00000120   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000122   0x00C9             LSLS     R1,R1,#+3
   \   00000124   0x0032             MOVS     R2,R6
   \   00000126   0x40CA             LSRS     R2,R2,R1
   \   00000128   0xA900             ADD      R1,SP,#+0
   \   0000012A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012C   0x5442             STRB     R2,[R0, R1]
    194            }
   \   0000012E   0x1C40             ADDS     R0,R0,#+1
   \   00000130   0xE7F1             B.N      ??SpiritIrq_6
    195            
    196            /* Writes the new IRQ mask in the corresponding registers */
    197            g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
   \                     ??SpiritIrq_7: (+1)
   \   00000132   0xAA00             ADD      R2,SP,#+0
   \   00000134   0x2104             MOVS     R1,#+4
   \   00000136   0x2090             MOVS     R0,#+144
   \   00000138   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000013C   0x9001             STR      R0,[SP, #+4]
   \   0000013E   0x....             LDR.N    R0,??DataTable6
   \   00000140   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000144   0x8001             STRH     R1,[R0, #+0]
    198          
    199          }
   \   00000146   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    200          
    201          
    202          /**
    203           * @brief  Fills a pointer to a structure of SpiritIrqs type reading the IRQ_MASK registers.
    204           * @param  pxIrqMask pointer to a variable of type @ref SpiritIrqs, through which the
    205           *         user can read which IRQs are enabled. All the bitfields equals to zero correspond
    206           *         to enabled IRQs, while all the bitfields equals to one correspond to disabled IRQs.
    207           *         This parameter is a pointer to a SpiritIrqs.
    208           *         For example suppose that the Power On Reset and RX Data ready are the only enabled IRQs.
    209           * @code
    210           * SpiritIrqs myIrqMask;
    211           * SpiritIrqGetStatus(&myIrqMask);
    212           * @endcode
    213           * Then
    214           * myIrqMask.IRQ_POR and myIrqMask.IRQ_RX_DATA_READY are equal to 0
    215           * while all the other bitfields are equal to one.
    216           * @retval None.
    217           */

   \                                 In section .text, align 2, keep-with-next
    218          void SpiritIrqGetMask(SpiritIrqs* pxIrqMask)
    219          {
   \                     SpiritIrqGetMask: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    220            uint8_t tempRegValue[4];
    221            uint8_t* pIrqPointer = (uint8_t*)pxIrqMask;
   \   00000006   0x0025             MOVS     R5,R4
    222          
    223            /* Reads IRQ_MASK registers */
    224            g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
   \   00000008   0xAA00             ADD      R2,SP,#+0
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x2090             MOVS     R0,#+144
   \   0000000E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x....             LDR.N    R0,??DataTable6
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
    225          
    226            /* Build the IRQ mask word */
    227            for(char i=0; i<4; i++)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??SpiritIrqGetMask_0: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xDA07             BGE.N    ??SpiritIrqGetMask_1
    228            {
    229              *pIrqPointer = tempRegValue[3-i];
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x1A09             SUBS     R1,R1,R0
   \   0000002A   0x78C9             LDRB     R1,[R1, #+3]
   \   0000002C   0x7029             STRB     R1,[R5, #+0]
    230              pIrqPointer++;
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
    231            }
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xE7F4             B.N      ??SpiritIrqGetMask_0
    232          
    233          }
   \                     ??SpiritIrqGetMask_1: (+1)
   \   00000034   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    234          
    235          
    236          /**
    237           * @brief  Filla a pointer to a structure of SpiritIrqs type reading the IRQ_STATUS registers.
    238           * @param  pxIrqStatus pointer to a variable of type @ref SpiritIrqs, through which the
    239           *         user can read the status of all the IRQs. All the bitfields equals to one correspond
    240           *         to the raised interrupts. This parameter is a pointer to a SpiritIrqs.
    241           *         For example suppose that the XO settling timeout is raised as well as the Sync word
    242           *         detection.
    243           * @code
    244           * SpiritIrqs myIrqStatus;
    245           * SpiritIrqGetStatus(&myIrqStatus);
    246           * @endcode
    247           * Then
    248           * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
    249           * while all the other bitfields are equals to zero.
    250           * @retval None.
    251           */

   \                                 In section .text, align 2, keep-with-next
    252          void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
    253          {
   \                     SpiritIrqGetStatus: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    254            uint8_t tempRegValue[4];
    255            uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
   \   00000006   0x0025             MOVS     R5,R4
    256            
    257            /* Reads IRQ_STATUS registers */
    258            g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
   \   00000008   0xAA00             ADD      R2,SP,#+0
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x20FA             MOVS     R0,#+250
   \   0000000E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x....             LDR.N    R0,??DataTable6
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
    259          
    260            /* Build the IRQ Status word */
    261            for(uint8_t i=0; i<4; i++)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??SpiritIrqGetStatus_0: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xDA07             BGE.N    ??SpiritIrqGetStatus_1
    262            {
    263              *pIrqPointer = tempRegValue[3-i];
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x1A09             SUBS     R1,R1,R0
   \   0000002A   0x78C9             LDRB     R1,[R1, #+3]
   \   0000002C   0x7029             STRB     R1,[R5, #+0]
    264              pIrqPointer++;
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
    265            }
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xE7F4             B.N      ??SpiritIrqGetStatus_0
    266          }
   \                     ??SpiritIrqGetStatus_1: (+1)
   \   00000034   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    267          
    268          
    269          /**
    270           * @brief  Clear the IRQ status registers.
    271           * @param  None.
    272           * @retval None.
    273           */

   \                                 In section .text, align 2, keep-with-next
    274          void SpiritIrqClearStatus(void)
    275          {
   \                     SpiritIrqClearStatus: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    276            uint8_t tempRegValue[4];
    277          
    278            /* Reads the IRQ_STATUS registers clearing all the flags */
    279            g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
   \   00000004   0xAA01             ADD      R2,SP,#+4
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x20FA             MOVS     R0,#+250
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable6
   \   00000012   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    280          
    281          }
   \   00000018   0xBD07             POP      {R0-R2,PC}       ;; return
    282          
    283          
    284          /**
    285           * @brief  Verifies if a specific IRQ has been generated.
    286           *         The call resets all the IRQ status, so it can't be used in case of multiple raising interrupts.
    287           * @param  xFlag IRQ flag to be checked.
    288           *         This parameter can be any value of @ref IrqList.
    289           * @retval SpiritBool S_TRUE or S_FALSE.
    290           */

   \                                 In section .text, align 2, keep-with-next
    291          SpiritBool SpiritIrqCheckFlag(IrqList xFlag)
    292          {
   \                     SpiritIrqCheckFlag: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    293            uint8_t tempRegValue[4];
    294            uint32_t tempValue = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    295            SpiritBool flag;
    296          
    297            /* Check the parameters */
    298            s_assert_param(IS_SPIRIT_IRQ_LIST(xFlag));
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD05B             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD059             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD057             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD055             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000016   0x2C10             CMP      R4,#+16
   \   00000018   0xD053             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000001A   0x2C20             CMP      R4,#+32
   \   0000001C   0xD051             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000001E   0x2C40             CMP      R4,#+64
   \   00000020   0xD04F             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000022   0x2C80             CMP      R4,#+128
   \   00000024   0xD04D             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000026   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000002A   0xD04A             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000002C   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000030   0xD047             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000032   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000036   0xD044             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000038   0xF5B4 0x6F00      CMP      R4,#+2048
   \   0000003C   0xD041             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000003E   0xF5B4 0x5F80      CMP      R4,#+4096
   \   00000042   0xD03E             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000044   0xF5B4 0x5F00      CMP      R4,#+8192
   \   00000048   0xD03B             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000004A   0xF5B4 0x4F80      CMP      R4,#+16384
   \   0000004E   0xD038             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000050   0xF5B4 0x4F00      CMP      R4,#+32768
   \   00000054   0xD035             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000056   0xF5B4 0x3F80      CMP      R4,#+65536
   \   0000005A   0xD032             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000005C   0xF5B4 0x3F00      CMP      R4,#+131072
   \   00000060   0xD02F             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000062   0xF5B4 0x2F80      CMP      R4,#+262144
   \   00000066   0xD02C             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000068   0xF5B4 0x2F00      CMP      R4,#+524288
   \   0000006C   0xD029             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000006E   0xF5B4 0x1F80      CMP      R4,#+1048576
   \   00000072   0xD026             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000074   0xF5B4 0x1F00      CMP      R4,#+2097152
   \   00000078   0xD023             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000007A   0xF5B4 0x0F80      CMP      R4,#+4194304
   \   0000007E   0xD020             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000080   0xF5B4 0x0F00      CMP      R4,#+8388608
   \   00000084   0xD01D             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000086   0xF1B4 0x7F80      CMP      R4,#+16777216
   \   0000008A   0xD01A             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000008C   0xF1B4 0x7F00      CMP      R4,#+33554432
   \   00000090   0xD017             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000092   0xF1B4 0x6F80      CMP      R4,#+67108864
   \   00000096   0xD014             BEQ.N    ??SpiritIrqCheckFlag_0
   \   00000098   0xF1B4 0x6F00      CMP      R4,#+134217728
   \   0000009C   0xD011             BEQ.N    ??SpiritIrqCheckFlag_0
   \   0000009E   0xF1B4 0x5F80      CMP      R4,#+268435456
   \   000000A2   0xD00E             BEQ.N    ??SpiritIrqCheckFlag_0
   \   000000A4   0xF1B4 0x5F00      CMP      R4,#+536870912
   \   000000A8   0xD00B             BEQ.N    ??SpiritIrqCheckFlag_0
   \   000000AA   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   000000AE   0xD008             BEQ.N    ??SpiritIrqCheckFlag_0
   \   000000B0   0xF07F 0x4000      MVNS     R0,#-2147483648
   \   000000B4   0x4284             CMP      R4,R0
   \   000000B6   0xD004             BEQ.N    ??SpiritIrqCheckFlag_0
   \   000000B8   0xF44F 0x7195      MOV      R1,#+298
   \   000000BC   0x....             LDR.N    R0,??DataTable6_1
   \   000000BE   0x.... 0x....      BL       s_assert_failed
    299          
    300            /* Reads registers and build the status word */
    301            g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
   \                     ??SpiritIrqCheckFlag_0: (+1)
   \   000000C2   0xAA00             ADD      R2,SP,#+0
   \   000000C4   0x2104             MOVS     R1,#+4
   \   000000C6   0x20FA             MOVS     R0,#+250
   \   000000C8   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000000CC   0x9001             STR      R0,[SP, #+4]
   \   000000CE   0x....             LDR.N    R0,??DataTable6
   \   000000D0   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000D4   0x8001             STRH     R1,[R0, #+0]
    302            for(uint8_t i=0; i<4; i++)
   \   000000D6   0x2000             MOVS     R0,#+0
   \                     ??SpiritIrqCheckFlag_1: (+1)
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x2804             CMP      R0,#+4
   \   000000DC   0xDA0A             BGE.N    ??SpiritIrqCheckFlag_2
    303            {
    304              tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
   \   000000DE   0xA900             ADD      R1,SP,#+0
   \   000000E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E2   0x5C41             LDRB     R1,[R0, R1]
   \   000000E4   0xF1D0 0x0203      RSBS     R2,R0,#+3
   \   000000E8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000EA   0x00D2             LSLS     R2,R2,#+3
   \   000000EC   0x4091             LSLS     R1,R1,R2
   \   000000EE   0x198E             ADDS     R6,R1,R6
    305            }
   \   000000F0   0x1C40             ADDS     R0,R0,#+1
   \   000000F2   0xE7F1             B.N      ??SpiritIrqCheckFlag_1
    306            
    307            if(tempValue & xFlag)
   \                     ??SpiritIrqCheckFlag_2: (+1)
   \   000000F4   0x4226             TST      R6,R4
   \   000000F6   0xD002             BEQ.N    ??SpiritIrqCheckFlag_3
    308            {
    309              flag = S_TRUE;
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0x0005             MOVS     R5,R0
   \   000000FC   0xE001             B.N      ??SpiritIrqCheckFlag_4
    310            }
    311            else
    312            {
    313              flag = S_FALSE;
   \                     ??SpiritIrqCheckFlag_3: (+1)
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x0005             MOVS     R5,R0
    314            }
    315          
    316            return flag;
   \                     ??SpiritIrqCheckFlag_4: (+1)
   \   00000102   0x0028             MOVS     R0,R5
   \   00000104   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000106   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    317          
    318          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 42H, 61H, 73H, 65H
   \              0x35 0x5C    
   \              0x42 0x61    
   \              0x73 0x65    
   \   00000020   0x5F 0x30          DC8 5FH, 30H, 32H, 5CH, 32H, 30H, 31H, 33H
   \              0x32 0x5C    
   \              0x32 0x30    
   \              0x31 0x33    
   \   00000028   0x5F 0x31          DC8 5FH, 31H, 31H, 5FH, 32H, 35H, 5FH, 53H
   \              0x31 0x5F    
   \              0x32 0x35    
   \              0x5F 0x53    
   \   00000030   0x70 0x69          DC8 70H, 69H, 72H, 69H, 74H, 31H, 5FH, 45H
   \              0x72 0x69    
   \              0x74 0x31    
   \              0x5F 0x45    
   \   00000038   0x6C 0x65          DC8 6CH, 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H
   \              0x6B 0x74    
   \              0x72 0x6F    
   \              0x6C 0x75    
   \   00000040   0x78 0x5C          DC8 78H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000048   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000050   0x79 0x5F          DC8 79H, 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H
   \              0x50 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000058   0x74 0x5C          DC8 74H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000060   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000068   0x79 0x5C          DC8 79H, 5CH, 53H, 6FH, 75H, 72H, 63H, 65H
   \              0x53 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000070   0x5C 0x73          DC8 5CH, 73H, 72H, 63H, 5CH, 53H, 50H, 49H
   \              0x72 0x63    
   \              0x5C 0x53    
   \              0x50 0x49    
   \   00000078   0x52 0x49          DC8 52H, 49H, 54H, 5FH, 49H, 72H, 71H, 2EH
   \              0x54 0x5F    
   \              0x49 0x72    
   \              0x71 0x2E    
   \   00000080   0x63 0x00          DC8 63H, 0
   \   00000082   0x00 0x00          DC8 0, 0
    319          
    320          
    321          /**
    322           *@}
    323           */
    324          
    325          
    326          /**
    327           *@}
    328           */
    329          
    330          
    331          /**
    332           *@}
    333           */
    334          
    335          
    336          
    337          
    338          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   SpiritIrq
        24   -> SdkEvalSpiReadRegisters
        24   -> SdkEvalSpiWriteRegisters
        24   -> s_assert_failed
      24   SpiritIrqCheckFlag
        24   -> SdkEvalSpiReadRegisters
        24   -> s_assert_failed
      16   SpiritIrqClearStatus
        16   -> SdkEvalSpiReadRegisters
      16   SpiritIrqDeInit
        16   -> SdkEvalSpiWriteRegisters
      24   SpiritIrqGetMask
        24   -> SdkEvalSpiReadRegisters
      24   SpiritIrqGetStatus
        24   -> SdkEvalSpiReadRegisters
      24   SpiritIrqInit
        24   -> SdkEvalSpiWriteRegisters


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ?_0
     132  ?_1
     328  SpiritIrq
     264  SpiritIrqCheckFlag
      26  SpiritIrqClearStatus
      40  SpiritIrqDeInit
      54  SpiritIrqGetMask
      54  SpiritIrqGetStatus
      54  SpiritIrqInit

 
 136 bytes in section .rodata
 828 bytes in section .text
 
 828 bytes of CODE  memory
 136 bytes of CONST memory

Errors: none
Warnings: none
