###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\examples\BasicGeneric\Base_Station.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\examples\BasicGeneric\Base_Station.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\Base_Station.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\Base_Station.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\examples\BasicGeneric\Base_Station.c
      1          /**
      2          * @file    Base_Station.c
      3          * @author  
      4          * @version V0.0.2
      5          * @date    25 November 2013
      6          * @brief   Example of reception (transmission if User Push button pressed)
      7          *          of SPIRIT1 Basic packets.
      8          * 
      9          */
     10          
     11          /* Includes ------------------------------------------------------------------*/
     12          #include "SDK_EVAL_Config.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0943             LSRS     R3,R0,#+5
   \   00000010   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     13          #include "SPIRIT_Config.h"
     14          #include "SDK_Configuration_Common.h"
     15          #include "SPIRIT_SDK_Application.h"
     16          #include "SPIRIT_Commands.h"
     17          //#include "Serwer.h"
     18          
     19          #define LED_GREEN     LED2 
     20          #define LED_YELLOW    LED1
     21          
     22          #define FALSE 0
     23          #define TRUE !FALSE
     24          
     25          #define EnableInterrupts()   __set_PRIMASK(0);
     26          #define DisableInterrupts()  __set_PRIMASK(1);
     27          
     28          __ATTRIBUTES void          __set_PRIMASK( unsigned long );
     29          
     30          #undef MY_ADDRESS
     31          #define MY_ADDRESS                  0x44
     32          #undef DESTINATION_ADDRESS
     33          #define DESTINATION_ADDRESS         0x34
     34          
     35          void USART1_Init(void);

   \                                 In section .bss, align 1
     36          uint8_t jednostki, dziesiatki;
   \                     jednostki:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     dziesiatki:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     37          uint8_t crc;
   \                     crc:
   \   00000000                      DS8 1
     38          
     39          extern int SysyTickCnt;

   \                                 In section .data, align 4
     40          uint8_t start_buffer[96] = {0xAF, 0x00, 0x00, 0x0A, 0x0A, 0x0A, 0x0A};
   \                     start_buffer:
   \   00000000   0xAF 0x00          DC8 175, 0, 0, 10, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x0A    
   \              0x0A 0x0A    
   \              0x0A 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000043   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
     41          

   \                                 In section .data, align 4
     42            SRadioInit xRadioInit = {
   \                     xRadioInit:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0
   \   00000004   0x33C0EA18         DC32 868280856, 20000
   \              0x00004E20   
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000010   0x00009621         DC32 38433, 19836, 102115
   \              0x00004D7C   
   \              0x00018EE3   
     43              XTAL_OFFSET_PPM,
     44              BASE_FREQUENCY,
     45              CHANNEL_SPACE,
     46              CHANNEL_NUMBER,
     47              MODULATION_SELECT,
     48              DATARATE,
     49              FREQ_DEVIATION,
     50              BANDWIDTH
     51            };
     52            

   \                                 In section .data, align 4
     53          PktBasicInit xBasicInit={
   \                     xBasicInit:
   \   00000000   0x18 0x06          DC8 24, 6, 0, 0
   \              0x00 0x00    
   \   00000004   0x1A2635A8         DC32 438711720
   \   00000008   0x00 0x07          DC8 0, 7, 32, 0, 0, 0, 1, 0
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x01 0x00    
     54            PREAMBLE_LENGTH,
     55            SYNC_LENGTH,
     56            SYNC_WORD,
     57            LENGTH_TYPE,
     58            LENGTH_WIDTH,
     59            CRC_MODE,
     60            CONTROL_LENGTH,
     61            EN_ADDRESS,
     62            EN_FEC,
     63            EN_WHITENING
     64          };
     65          
     66          

   \                                 In section .data, align 4
     67          PktBasicAddressesInit xAddressInit={
   \                     xAddressInit:
   \   00000000   0x00 0x44          DC8 0, 68, 0, 238, 0, 255, 0, 0
   \              0x00 0xEE    
   \              0x00 0xFF    
   \              0x00 0x00    
     68            EN_FILT_MY_ADDRESS,
     69            MY_ADDRESS,
     70            EN_FILT_MULTICAST_ADDRESS,
     71            MULTICAST_ADDRESS,
     72            EN_FILT_BROADCAST_ADDRESS,
     73            BROADCAST_ADDRESS
     74          };
     75          
     76          

   \                                 In section .data, align 4
     77          SGpioInit xGpioIRQ={
   \                     xGpioIRQ:
   \   00000000   0x05 0x02          DC8 5, 2, 0, 0
   \              0x00 0x00    
     78            SPIRIT_GPIO_0,
     79            SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP,
     80            SPIRIT_GPIO_DIG_OUT_IRQ
     81          };
     82          
     83          

   \                                 In section .bss, align 1
     84          FlagStatus xTxDoneFlag = RESET;
   \                     xTxDoneFlag:
   \   00000000                      DS8 1
     85          

   \                                 In section .bss, align 4
     86          uint8_t vectcRxBuff[212], cRxData;
   \                     vectcRxBuff:
   \   00000000                      DS8 212

   \                                 In section .bss, align 1
   \                     cRxData:
   \   00000000                      DS8 1
     87          

   \                                 In section .bss, align 4
     88          SpiritIrqs xIrqStatus;
   \                     xIrqStatus:
   \   00000000                      DS8 4
     89          

   \                                 In section .data, align 4
     90          uint8_t vectcTxBuff[20]={1,1,1,1,2,6,7,8,9,10,11,12,0,14,15,16,0,18,19,1};
   \                     vectcTxBuff:
   \   00000000   0x01 0x01          DC8 1, 1, 1, 1, 2, 6, 7, 8, 9, 10, 11, 12, 0, 14, 15, 16, 0, 18, 19, 1
   \              0x01 0x01    
   \              0x02 0x06    
   \              0x07 0x08    
   \              0x09 0x0A    
   \              0x0B 0x0C    
   \              0x00 0x0E    
   \              0x0F 0x10    
   \              0x00 0x12    
   \              0x13 0x01    
     91          

   \                                 In section .bss, align 4
     92          uint16_t UARTBuff[6]={0};
   \                     UARTBuff:
   \   00000000                      DS8 12
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void M2S_GPIO_0_EXTI_IRQ_HANDLER(void)
     95          {  
   \                     EXTI9_5_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     96              if(EXTI_GetITStatus(M2S_GPIO_0_EXTI_LINE)) // Check the flag status of EXTI line
   \   00000002   0x2020             MOVS     R0,#+32
   \   00000004   0x.... 0x....      BL       EXTI_GetITStatus
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xF000 0x80C7      BEQ.W    ??EXTI9_5_IRQHandler_0
     97            {     
     98              SpiritIrqGetStatus(&xIrqStatus); // Get the IRQ status
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000012   0x.... 0x....      BL       SpiritIrqGetStatus
     99                if(xIrqStatus.IRQ_RX_DATA_DISC)  // Check the SPIRIT1 RX_DATA_DISC IRQ flag 
    100                  {
    101          //          SdkEvalLedToggle(LED_YELLOW);  // IRQ: Spirit1 RX data discarded (upon filtering)
    102                  }
    103                if(xIrqStatus.IRQ_RX_DATA_READY) // Check the SPIRIT1 RX_DATA_READY IRQ Flag 
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xF000 0x809D      BEQ.W    ??EXTI9_5_IRQHandler_1
    104                  {
    105                    cRxData=SpiritLinearFifoReadNumElementsRxFifo();  // Get the RX FIFO size     
   \   00000026   0x.... 0x....      BL       SpiritLinearFifoReadNumElementsRxFifo
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    106                    SpiritSpiReadLinearFifo(cRxData, vectcRxBuff); // Read the RX FIFO      
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       SdkEvalSpiReadFifo
    107                    SpiritCmdStrobeFlushRxFifo();  // Flush the RX FIFO 
   \   0000003E   0x2071             MOVS     R0,#+113
   \   00000040   0x.... 0x....      BL       SpiritCmdStrobeCommand
    108                    SdkEvalLedToggle(LED_YELLOW);      
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       SdkEvalLedToggle
    109                    SpiritCmdStrobeRx(); // RX command - to ensure that Rx device will be ready for the next reception 
   \   0000004A   0x.... 0x....      BL       SpiritManagementWaCmdStrobeRx
   \   0000004E   0x2061             MOVS     R0,#+97
   \   00000050   0x.... 0x....      BL       SpiritCmdStrobeCommand
   \   00000054   0x.... 0x....      BL       SpiritManagementWaRxStartup
    110                    crc = vectcRxBuff[0];
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable8_4
   \   00000062   0x7008             STRB     R0,[R1, #+0]
    111                    for(int i = 1; i < (cRxData - 1); i++)
   \   00000064   0x2001             MOVS     R0,#+1
   \                     ??EXTI9_5_IRQHandler_2: (+1)
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   0000006A   0x7809             LDRB     R1,[R1, #+0]
   \   0000006C   0x1E49             SUBS     R1,R1,#+1
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xDA0B             BGE.N    ??EXTI9_5_IRQHandler_3
    112                    {
    113                      crc = crc ^ vectcRxBuff[i];
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable8_4
   \   00000076   0x7809             LDRB     R1,[R1, #+0]
   \   00000078   0x.... 0x....      LDR.W    R2,??DataTable8_3
   \   0000007C   0x5C82             LDRB     R2,[R0, R2]
   \   0000007E   0x4051             EORS     R1,R2,R1
   \   00000080   0x.... 0x....      LDR.W    R2,??DataTable8_4
   \   00000084   0x7011             STRB     R1,[R2, #+0]
    114                    }
   \   00000086   0x1C40             ADDS     R0,R0,#+1
   \   00000088   0xE7ED             B.N      ??EXTI9_5_IRQHandler_2
    115                      if( crc == vectcRxBuff[cRxData - 1])
   \                     ??EXTI9_5_IRQHandler_3: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable8_2
   \   00000098   0x7812             LDRB     R2,[R2, #+0]
   \   0000009A   0x1851             ADDS     R1,R2,R1
   \   0000009C   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD15D             BNE.N    ??EXTI9_5_IRQHandler_1
    116                      {
    117                        RSSI_TO_UART();  // Send RSSI Value of received packet to Discovery Board
   \   000000A4   0x.... 0x....      BL       RSSI_TO_UART
    118                        ///////////////////////////////////
    119                        USART_SendData(USART1, 'Q');
   \   000000A8   0x2151             MOVS     R1,#+81
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   000000AE   0x.... 0x....      BL       USART_SendData
    120                        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);      
   \                     ??EXTI9_5_IRQHandler_4: (+1)
   \   000000B2   0x2180             MOVS     R1,#+128
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   000000B8   0x.... 0x....      BL       USART_GetFlagStatus
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD0F8             BEQ.N    ??EXTI9_5_IRQHandler_4
    121                        jednostki = (cRxData%10)+0x30;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0x210A             MOVS     R1,#+10
   \   000000C8   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000CC   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000D0   0x3030             ADDS     R0,R0,#+48
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   000000D6   0x7008             STRB     R0,[R1, #+0]
    122                        dziesiatki = (cRxData/10)+0x30;  
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x210A             MOVS     R1,#+10
   \   000000E0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000E4   0x3030             ADDS     R0,R0,#+48
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
    123                        USART_SendData(USART1, dziesiatki);
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable8_7
   \   000000F0   0x7801             LDRB     R1,[R0, #+0]
   \   000000F2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   000000F8   0x.... 0x....      BL       USART_SendData
    124                        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   \                     ??EXTI9_5_IRQHandler_5: (+1)
   \   000000FC   0x2180             MOVS     R1,#+128
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   00000102   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD0F8             BEQ.N    ??EXTI9_5_IRQHandler_5
    125                        USART_SendData(USART1, jednostki);
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000010E   0x7801             LDRB     R1,[R0, #+0]
   \   00000110   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   00000116   0x.... 0x....      BL       USART_SendData
    126                        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);  
   \                     ??EXTI9_5_IRQHandler_6: (+1)
   \   0000011A   0x2180             MOVS     R1,#+128
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   00000120   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD0F8             BEQ.N    ??EXTI9_5_IRQHandler_6
    127                          for(uint8_t i=0 ;i<cRxData ;i++)
   \   00000128   0x2400             MOVS     R4,#+0
   \                     ??EXTI9_5_IRQHandler_7: (+1)
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   0000012E   0x7800             LDRB     R0,[R0, #+0]
   \   00000130   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000132   0x4284             CMP      R4,R0
   \   00000134   0xD214             BCS.N    ??EXTI9_5_IRQHandler_1
    128                            {
    129                              USART_SendData(USART1, vectcRxBuff[i]);
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   0000013A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013C   0x5C21             LDRB     R1,[R4, R0]
   \   0000013E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   00000144   0x.... 0x....      BL       USART_SendData
    130                              while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   \                     ??EXTI9_5_IRQHandler_8: (+1)
   \   00000148   0x2180             MOVS     R1,#+128
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x40013800
   \   0000014E   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000152   0x2800             CMP      R0,#+0
   \   00000154   0xD0F8             BEQ.N    ??EXTI9_5_IRQHandler_8
    131                              SdkEvalLedToggle(LED_GREEN);
   \   00000156   0x2001             MOVS     R0,#+1
   \   00000158   0x.... 0x....      BL       SdkEvalLedToggle
    132                            }
   \   0000015C   0x1C64             ADDS     R4,R4,#+1
   \   0000015E   0xE7E4             B.N      ??EXTI9_5_IRQHandler_7
    133                      }
    134                      //////////////////////////////
    135                    }
    136              
    137                      if(xIrqStatus.IRQ_TX_DATA_SENT) // Check the SPIRIT TX_DATA_SENT IRQ flag
   \                     ??EXTI9_5_IRQHandler_1: (+1)
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000164   0x7800             LDRB     R0,[R0, #+0]
   \   00000166   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000016A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD006             BEQ.N    ??EXTI9_5_IRQHandler_9
    138                         {
    139                            xTxDoneFlag = SET;   // Set the Tx_done_flag to manage the event in the main()
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   00000176   0x7008             STRB     R0,[R1, #+0]
    140                            SdkEvalLedToggle(LED_GREEN);
   \   00000178   0x2001             MOVS     R0,#+1
   \   0000017A   0x.... 0x....      BL       SdkEvalLedToggle
    141                          }
    142                
    143                      if(xIrqStatus.IRQ_TX_FIFO_ERROR) // just to try if this help !!!
   \                     ??EXTI9_5_IRQHandler_9: (+1)
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000182   0x7800             LDRB     R0,[R0, #+0]
   \   00000184   0xF3C0 0x1040      UBFX     R0,R0,#+5,#+1
   \   00000188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018A   0x2800             CMP      R0,#+0
   \   0000018C   0xD003             BEQ.N    ??EXTI9_5_IRQHandler_10
    144                      {
    145                        xTxDoneFlag = SET;
   \   0000018E   0x2001             MOVS     R0,#+1
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   00000194   0x7008             STRB     R0,[R1, #+0]
    146                      }
    147                      EXTI_ClearITPendingBit(M2S_GPIO_0_EXTI_LINE);  // Clear the EXTI line flag  
   \                     ??EXTI9_5_IRQHandler_10: (+1)
   \   00000196   0x2020             MOVS     R0,#+32
   \   00000198   0x.... 0x....      BL       EXTI_ClearITPendingBit
    148            }   
    149          } // end of M2S_GPIO_0_EXTI_IRQ_HANDLER()
   \                     ??EXTI9_5_IRQHandler_0: (+1)
   \   0000019C   0xBD10             POP      {R4,PC}          ;; return
    150          
    151          

   \                                 In section .bss, align 4
    152          uint8_t command_buffer[60];
   \                     command_buffer:
   \   00000000                      DS8 60

   \                                 In section .data, align 4
    153          int command_size = 96;
   \                     command_size:
   \   00000000   0x00000060         DC32 96

   \                                 In section .bss, align 4
    154          int command_index = 0;
   \                     command_index:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    155          int transfer = 0;
   \                     transfer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    156          uint8_t bajty;
   \                     bajty:
   \   00000000                      DS8 1
    157          
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void command_transfer(void)
    160            {  
   \                     command_transfer: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    161                  StatusBytes status;
                                     ^
Warning[Pe550]: variable "status" was set but never used
    162                  uint8_t pcBuffer;
    163            //      SpiritCmdStrobeSabort();
    164                  SdkDelayMs(6000);
   \   00000004   0xF241 0x7070      MOVW     R0,#+6000
   \   00000008   0x.... 0x....      BL       SdkDelayMs
    165                  SpiritCmdStrobeFlushTxFifo();
   \   0000000C   0x2072             MOVS     R0,#+114
   \   0000000E   0x.... 0x....      BL       SpiritCmdStrobeCommand
    166            //      SpiritPktBasicSetPayloadLength(command_size);
    167                  SpiritSpiWriteLinearFifo(96, command_buffer);
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   00000016   0x2060             MOVS     R0,#+96
   \   00000018   0x.... 0x....      BL       SdkEvalSpiWriteFifo
    168                  status = SdkEvalSpiReadRegisters(0xE6, 0x01, &pcBuffer);   //ilosc znakow w TX FIFO
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x20E6             MOVS     R0,#+230
   \   00000022   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000026   0x0004             MOVS     R4,R0
    169          //        SpiritSpiWriteLinearFifo(command_index, command_buffer);
    170                  SpiritCmdStrobeTx();
   \   00000028   0x.... 0x....      BL       SpiritManagementWaCmdStrobeTx
   \   0000002C   0x2060             MOVS     R0,#+96
   \   0000002E   0x.... 0x....      BL       SpiritCmdStrobeCommand
    171                  bajty=SpiritLinearFifoReadNumElementsTxFifo();
   \   00000032   0x.... 0x....      BL       SpiritLinearFifoReadNumElementsTxFifo
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable8_10
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    172                  status = SdkEvalSpiReadRegisters(0xE6, 0x01, &pcBuffer);   //ilosc znakow w TX FIFO
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x20E6             MOVS     R0,#+230
   \   00000042   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000046   0x0004             MOVS     R4,R0
    173                  SdkDelayMs(28);
   \   00000048   0x201C             MOVS     R0,#+28
   \   0000004A   0x.... 0x....      BL       SdkDelayMs
    174                  status = SdkEvalSpiReadRegisters(0xE6, 0x01, &pcBuffer);   //ilosc znakow w TX FIFO
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x20E6             MOVS     R0,#+230
   \   00000054   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000058   0x0004             MOVS     R4,R0
    175                  SpiritIrqGetStatus(&xIrqStatus);
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000005E   0x.... 0x....      BL       SpiritIrqGetStatus
    176                  while(!xTxDoneFlag);  // Wait till Transmission is done
   \                     ??command_transfer_0: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD0FA             BEQ.N    ??command_transfer_0
    177                  command_size = 60;
   \   0000006C   0x203C             MOVS     R0,#+60
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable8_11
   \   00000072   0x6008             STR      R0,[R1, #+0]
    178                  command_index = 0;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable8_12
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    179                  command_buffer[0] = 0;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   00000082   0x7008             STRB     R0,[R1, #+0]
    180                  xTxDoneFlag = RESET;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   0000008A   0x7008             STRB     R0,[R1, #+0]
    181                  transfer = 0;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable8_13
   \   00000092   0x6008             STR      R0,[R1, #+0]
    182            //      SpiritPktBasicSetPayloadLength(PAYLOAD_LENGTH);
    183            }
   \   00000094   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    184          

   \                                 In section .text, align 2, keep-with-next
    185          void start_sequence(void)
    186          {
   \                     start_sequence: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    187            StatusBytes status;
                               ^
Warning[Pe177]: variable "status" was declared but never referenced
    188            SdkDelayMs(20);
   \   00000002   0x2014             MOVS     R0,#+20
   \   00000004   0x.... 0x....      BL       SdkDelayMs
    189            SpiritCmdStrobeFlushTxFifo();
   \   00000008   0x2072             MOVS     R0,#+114
   \   0000000A   0x.... 0x....      BL       SpiritCmdStrobeCommand
    190            SpiritSpiWriteLinearFifo(7, start_buffer);
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable8_14
   \   00000012   0x2007             MOVS     R0,#+7
   \   00000014   0x.... 0x....      BL       SdkEvalSpiWriteFifo
    191            SpiritCmdStrobeTx(); 
   \   00000018   0x.... 0x....      BL       SpiritManagementWaCmdStrobeTx
   \   0000001C   0x2060             MOVS     R0,#+96
   \   0000001E   0x.... 0x....      BL       SpiritCmdStrobeCommand
    192            SdkDelayMs(20);
   \   00000022   0x2014             MOVS     R0,#+20
   \   00000024   0x.... 0x....      BL       SdkDelayMs
    193          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    194          

   \                                 In section .text, align 2, keep-with-next
    195          void main (void)
    196          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    197            
    198            NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0000);  // Use STM32L1xx_flash.icf
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000008   0x.... 0x....      BL       NVIC_SetVectorTable
    199            RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    200            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    201            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB | \
    202                                  RCC_AHBPeriph_GPIOC | RCC_AHBPeriph_GPIOD | RCC_AHBPeriph_GPIOE, ENABLE );
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x201F             MOVS     R0,#+31
   \   00000022   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
    203          
    204            SdkEvalIdentification();
   \   00000026   0x.... 0x....      BL       SdkEvalIdentification
    205            SdkStartSysTick();
   \   0000002A   0x.... 0x....      BL       SdkStartSysTick
    206            SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       SysTick_CLKSourceConfig
    207            SdkEvalLedInit(LED1);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       SdkEvalLedInit
    208            SdkEvalLedInit(LED2);
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       SdkEvalLedInit
    209            SdkEvalM2SGpioInit(M2S_GPIO_SDN,M2S_MODE_GPIO_OUT);
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       SdkEvalM2SGpioInit
    210            SpiritSpiInit();
   \   00000048   0x.... 0x....      BL       SdkEvalSpiInit
    211            USART1_Init();
   \   0000004C   0x.... 0x....      BL       USART1_Init
    212            
    213            SpiritEnterShutdown();
   \   00000050   0x.... 0x....      BL       SdkEvalEnterShutdown
    214            SpiritExitShutdown();
   \   00000054   0x.... 0x....      BL       SdkEvalExitShutdown
    215          
    216            SpiritManagementIdentificationRFBoard();
   \   00000058   0x.... 0x....      BL       SpiritManagementIdentificationRFBoard
    217            SdkEvalM2SGpioInit(M2S_GPIO_0,M2S_MODE_EXTI_IN);
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       SdkEvalM2SGpioInit
    218            
    219            // Spirit IRQ config
    220            SdkEvalM2SGpioInterruptCmd(M2S_GPIO_0,0x0F,0x0F,ENABLE);
   \   00000064   0x2301             MOVS     R3,#+1
   \   00000066   0x220F             MOVS     R2,#+15
   \   00000068   0x210F             MOVS     R1,#+15
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       SdkEvalM2SGpioInterruptCmd
    221            SpiritGpioInit(&xGpioIRQ);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable8_15
   \   00000074   0x.... 0x....      BL       SpiritGpioInit
    222            SpiritRadioInit(&xRadioInit);
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable8_16
   \   0000007C   0x.... 0x....      BL       SpiritRadioInit
    223            SpiritPktBasicInit(&xBasicInit);
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable8_17
   \   00000084   0x.... 0x....      BL       SpiritPktBasicInit
    224            SpiritPktBasicAddressesInit(&xAddressInit);
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable8_18
   \   0000008C   0x.... 0x....      BL       SpiritPktBasicAddressesInit
    225          
    226            // Spirit IRQs enable
    227            SpiritIrqDeInit(&xIrqStatus);
   \   00000090   0x....             LDR.N    R0,??DataTable8_1
   \   00000092   0x.... 0x....      BL       SpiritIrqDeInit
    228            SpiritIrq(RX_DATA_DISC, S_ENABLE);
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x2002             MOVS     R0,#+2
   \   0000009A   0x.... 0x....      BL       SpiritIrq
    229            SpiritIrq(RX_DATA_READY, S_ENABLE);
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x.... 0x....      BL       SpiritIrq
    230            SpiritIrq(TX_DATA_SENT, S_ENABLE);
   \   000000A6   0x2101             MOVS     R1,#+1
   \   000000A8   0x2004             MOVS     R0,#+4
   \   000000AA   0x.... 0x....      BL       SpiritIrq
    231          
    232            // Declare Lenght of Payload 
    233            SpiritPktBasicSetPayloadLength(PAYLOAD_LENGTH);
   \   000000AE   0x2060             MOVS     R0,#+96
   \   000000B0   0x.... 0x....      BL       SpiritPktBasicSetPayloadLength
    234          
    235            // Enable SQI check
    236            SpiritQiSetSqiThreshold(SQI_TH_0);
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x.... 0x....      BL       SpiritQiSetSqiThreshold
    237            SpiritQiSqiCheck(S_ENABLE);
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x.... 0x....      BL       SpiritQiSqiCheck
    238            SpiritIrqClearStatus();
   \   000000C0   0x.... 0x....      BL       SpiritIrqClearStatus
    239            
    240            // RX Timeout Configuration
    241            SpiritTimerSetRxTimeoutMs(RX_TIMEOUT);
   \   000000C4   0x....             LDR.N    R0,??DataTable8_19  ;; 0x453b8000
   \   000000C6   0x.... 0x....      BL       SpiritTimerSetRxTimeoutMs
    242            SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
   \   000000CA   0x2002             MOVS     R0,#+2
   \   000000CC   0x.... 0x....      BL       SpiritTimerSetRxTimeoutStopCondition
    243          
    244            // IRQ registers blanking
    245            SpiritIrqClearStatus();
   \   000000D0   0x.... 0x....      BL       SpiritIrqClearStatus
    246            
    247            SpiritCmdStrobeRx();
   \   000000D4   0x.... 0x....      BL       SpiritManagementWaCmdStrobeRx
   \   000000D8   0x2061             MOVS     R0,#+97
   \   000000DA   0x.... 0x....      BL       SpiritCmdStrobeCommand
   \   000000DE   0x.... 0x....      BL       SpiritManagementWaRxStartup
    248          ////////////////////////////////////////////////////////////////////////////////
    249          // 	ErrorStatus HSE_Status;
    250          //	RCC_HSEConfig(RCC_HSE_ON);
    251          //	HSE_Status = RCC_WaitForHSEStartUp();
    252          //	FLASH_SetLatency(FLASH_Latency_1);
    253          //	FLASH_PrefetchBufferCmd(ENABLE);
    254          //	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    255          //	RCC_HCLKConfig(RCC_SYSCLK_Div1);
    256          //	RCC_PLLConfig(RCC_PLLSource_HSE, RCC_PLLMul_12, RCC_PLLDiv_3);
    257          //	RCC_PCLK1Config(RCC_HCLK_Div1);
    258          //	RCC_PCLK2Config(RCC_HCLK_Div1);
    259           ///////////////////////////////////////////////////////////////////////////////// 
    260            
    261            // Start Application
    262            while (1)
    263            {  
    264              if (SysyTickCnt > 5000)
   \                     ??main_0: (+1)
   \   000000E2   0x....             LDR.N    R0,??DataTable8_20
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0xF241 0x3189      MOVW     R1,#+5001
   \   000000EA   0x4288             CMP      R0,R1
   \   000000EC   0xDB0A             BLT.N    ??main_1
    265              {
    266                SysyTickCnt = 0;
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x....             LDR.N    R1,??DataTable8_20
   \   000000F2   0x6008             STR      R0,[R1, #+0]
    267                start_sequence();  
   \   000000F4   0x.... 0x....      BL       start_sequence
    268                if(transfer == 1)
   \   000000F8   0x....             LDR.N    R0,??DataTable8_13
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x2801             CMP      R0,#+1
   \   000000FE   0xD101             BNE.N    ??main_1
    269                  {
    270                    command_transfer();
   \   00000100   0x.... 0x....      BL       command_transfer
    271                  }
    272              }
    273              if (SysyTickCnt > 100)
   \                     ??main_1: (+1)
   \   00000104   0x....             LDR.N    R0,??DataTable8_20
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x2865             CMP      R0,#+101
   \   0000010A   0xDBEA             BLT.N    ??main_0
    274              {
    275                SpiritCmdStrobeRx();  // Receive Message  !!!!!!!!
   \   0000010C   0x.... 0x....      BL       SpiritManagementWaCmdStrobeRx
   \   00000110   0x2061             MOVS     R0,#+97
   \   00000112   0x.... 0x....      BL       SpiritCmdStrobeCommand
   \   00000116   0x.... 0x....      BL       SpiritManagementWaRxStartup
   \   0000011A   0xE7E2             B.N      ??main_0
    276              }
    277              
    278              
    279              
    280              
    281              
    282           /*   if(transfer == 1)
    283              {
    284                command_transfer();
    285              }
    286          
    287              SpiritCmdStrobeRx();  // Receive Message  !!!!!!!! */
    288          
    289            } // End of while(1) endless loop
    290          } // End of main()
    291          

   \                                 In section .text, align 2, keep-with-next
    292          void USART1_Init(void)
    293          {
   \                     USART1_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    294            GPIO_InitTypeDef GPIO_InitStructure;
    295            USART_InitTypeDef USART1_InitStruct;
    296              
    297            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10 ;
   \   00000004   0xF44F 0x60C0      MOV      R0,#+1536
   \   00000008   0x9000             STR      R0,[SP, #+0]
    298            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    299            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0xF88D 0x0005      STRB     R0,[SP, #+5]
    300            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0007      STRB     R0,[SP, #+7]
    301            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; 
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    302            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x....             LDR.N    R0,??DataTable8_21  ;; 0x40020000
   \   00000026   0x.... 0x....      BL       GPIO_Init
    303               
    304            GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,GPIO_AF_USART1);
   \   0000002A   0x2207             MOVS     R2,#+7
   \   0000002C   0x2109             MOVS     R1,#+9
   \   0000002E   0x....             LDR.N    R0,??DataTable8_21  ;; 0x40020000
   \   00000030   0x.... 0x....      BL       GPIO_PinAFConfig
    305            GPIO_PinAFConfig(GPIOA, GPIO_PinSource10,GPIO_AF_USART1);  
   \   00000034   0x2207             MOVS     R2,#+7
   \   00000036   0x210A             MOVS     R1,#+10
   \   00000038   0x....             LDR.N    R0,??DataTable8_21  ;; 0x40020000
   \   0000003A   0x.... 0x....      BL       GPIO_PinAFConfig
    306              
    307            /* Baud rate 115200, 8-bit data, One stop bit
    308             * No parity, Do both Rx and Tx, No HW flow control
    309             */
    310            USART1_InitStruct.USART_BaudRate = 115200;   
   \   0000003E   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000042   0x9002             STR      R0,[SP, #+8]
    311            USART1_InitStruct.USART_WordLength = USART_WordLength_8b;  
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    312            USART1_InitStruct.USART_StopBits = USART_StopBits_1;   
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    313            USART1_InitStruct.USART_Parity = USART_Parity_No ;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    314            USART1_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   00000056   0x200C             MOVS     R0,#+12
   \   00000058   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    315            USART1_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    316              
    317            // Enable USART1
    318            USART_Cmd(USART1, ENABLE);  
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000066   0x.... 0x....      BL       USART_Cmd
    319              
    320            // Configure USART1
    321            USART_Init(USART1, &USART1_InitStruct);
   \   0000006A   0xA902             ADD      R1,SP,#+8
   \   0000006C   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   0000006E   0x.... 0x....      BL       USART_Init
    322              
    323            // Enable RXNE Interrupt
    324            USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \   00000072   0x2201             MOVS     R2,#+1
   \   00000074   0xF240 0x5125      MOVW     R1,#+1317
   \   00000078   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   0000007A   0x.... 0x....      BL       USART_ITConfig
    325              
    326            // Enable USART1 Global Interrupt
    327            NVIC_EnableIRQ(USART1_IRQn);   
   \   0000007E   0x2025             MOVS     R0,#+37
   \   00000080   0x.... 0x....      BL       NVIC_EnableIRQ
    328          } // End of USART1_Init()
   \   00000084   0xB007             ADD      SP,SP,#+28
   \   00000086   0xBD00             POP      {PC}             ;; return
    329          
    330          // Not used in this version

   \                                 In section .text, align 2, keep-with-next
    331          void WUKPIN1_Init(void)
    332          {
   \                     WUKPIN1_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    333            GPIO_InitTypeDef GPIO_InitStructure;
    334            EXTI_InitTypeDef EXTI_InitStructure;
    335            NVIC_InitTypeDef NVIC_InitStructure;
    336            
    337            // To configure PA.00 WakeUp output
    338            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  ;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x9001             STR      R0,[SP, #+4]
    339            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x000A      STRB     R0,[SP, #+10]
    340            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xF88D 0x000B      STRB     R0,[SP, #+11]
    341            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;  
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0xF88D 0x0009      STRB     R0,[SP, #+9]
    342            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF88D 0x0008      STRB     R0,[SP, #+8]
    343            GPIO_Init( GPIOA, &GPIO_InitStructure);   
   \   00000020   0xA901             ADD      R1,SP,#+4
   \   00000022   0x....             LDR.N    R0,??DataTable8_21  ;; 0x40020000
   \   00000024   0x.... 0x....      BL       GPIO_Init
    344            
    345            // Configure EXT1 Line 0 in interrupt mode trigged on Rising edge 
    346            EXTI_InitStructure.EXTI_Line = EXTI_Line0 ;  // PA0 for User button AND IDD_WakeUP
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    347            EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF88D 0x0010      STRB     R0,[SP, #+16]
    348            EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0xF88D 0x0011      STRB     R0,[SP, #+17]
    349            EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF88D 0x0012      STRB     R0,[SP, #+18]
    350            EXTI_Init(&EXTI_InitStructure);
   \   0000003E   0xA803             ADD      R0,SP,#+12
   \   00000040   0x.... 0x....      BL       EXTI_Init
    351            
    352            // Enable and set EXTI0 Interrupt to the lowest priority
    353            NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn ;
   \   00000044   0x2006             MOVS     R0,#+6
   \   00000046   0xF88D 0x0000      STRB     R0,[SP, #+0]
    354            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   \   0000004A   0x200F             MOVS     R0,#+15
   \   0000004C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    355            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   \   00000050   0x200F             MOVS     R0,#+15
   \   00000052   0xF88D 0x0002      STRB     R0,[SP, #+2]
    356            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0xF88D 0x0003      STRB     R0,[SP, #+3]
    357            NVIC_Init(&NVIC_InitStructure);
   \   0000005C   0xA800             ADD      R0,SP,#+0
   \   0000005E   0x.... 0x....      BL       NVIC_Init
    358          } // WUKPIN1_Init()
   \   00000062   0xB005             ADD      SP,SP,#+20
   \   00000064   0xBD00             POP      {PC}             ;; return
    359          
    360          

   \                                 In section .text, align 2, keep-with-next
    361          void EXTI0_IRQHandler(void)
    362          {
   \                     EXTI0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    363             DisableInterrupts();
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0xF380 0x8810      MSR      PRIMASK,R0
    364            // PressButtom = TRUE;
    365             EXTI_ClearITPendingBit(EXTI_Line0);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       EXTI_ClearITPendingBit
    366             EnableInterrupts();
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF380 0x8810      MSR      PRIMASK,R0
    367          } // end of EXTI0_IRQHandler()
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    368          
    369          

   \                                 In section .text, align 2, keep-with-next
    370          void convert_into_char(uint32_t number, uint16_t *p_tab)
    371          {
   \                     convert_into_char: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    372            uint16_t units=0, tens=0, hundreds=0, thousands=0, misc=0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2600             MOVS     R6,#+0
    373            
    374            units = (((number%10000)%1000)%100)%10;
   \   0000000C   0xF242 0x7710      MOVW     R7,#+10000
   \   00000010   0xFBB0 0xFCF7      UDIV     R12,R0,R7
   \   00000014   0xFB07 0x071C      MLS      R7,R7,R12,R0
   \   00000018   0xF44F 0x7C7A      MOV      R12,#+1000
   \   0000001C   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   00000020   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   00000024   0xF05F 0x0C64      MOVS     R12,#+100
   \   00000028   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   0000002C   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   00000030   0xF05F 0x0C0A      MOVS     R12,#+10
   \   00000034   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   00000038   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   0000003C   0x003A             MOVS     R2,R7
    375            tens = ((((number-units)/10)%1000)%100)%10;
   \   0000003E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000040   0x1A87             SUBS     R7,R0,R2
   \   00000042   0xF05F 0x0C0A      MOVS     R12,#+10
   \   00000046   0xFBB7 0xF7FC      UDIV     R7,R7,R12
   \   0000004A   0xF44F 0x7C7A      MOV      R12,#+1000
   \   0000004E   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   00000052   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   00000056   0xF05F 0x0C64      MOVS     R12,#+100
   \   0000005A   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   0000005E   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   00000062   0xF05F 0x0C0A      MOVS     R12,#+10
   \   00000066   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   0000006A   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   0000006E   0x003B             MOVS     R3,R7
    376            hundreds = (((number-tens-units)/100))%100%10;
   \   00000070   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000072   0x1AC7             SUBS     R7,R0,R3
   \   00000074   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000076   0x1ABF             SUBS     R7,R7,R2
   \   00000078   0xF05F 0x0C64      MOVS     R12,#+100
   \   0000007C   0xFBB7 0xF7FC      UDIV     R7,R7,R12
   \   00000080   0xF05F 0x0C64      MOVS     R12,#+100
   \   00000084   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   00000088   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   0000008C   0xF05F 0x0C0A      MOVS     R12,#+10
   \   00000090   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   00000094   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   00000098   0x003C             MOVS     R4,R7
    377            thousands = ((number-hundreds-tens-units)/1000)%10;
   \   0000009A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000009C   0x1B07             SUBS     R7,R0,R4
   \   0000009E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A0   0x1AFF             SUBS     R7,R7,R3
   \   000000A2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A4   0x1ABF             SUBS     R7,R7,R2
   \   000000A6   0xF44F 0x7C7A      MOV      R12,#+1000
   \   000000AA   0xFBB7 0xF7FC      UDIV     R7,R7,R12
   \   000000AE   0xF05F 0x0C0A      MOVS     R12,#+10
   \   000000B2   0xFBB7 0xFEFC      UDIV     LR,R7,R12
   \   000000B6   0xFB0C 0x771E      MLS      R7,R12,LR,R7
   \   000000BA   0x003D             MOVS     R5,R7
    378            misc = ((number-thousands-hundreds-tens-units)/10000);
   \   000000BC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BE   0x1B47             SUBS     R7,R0,R5
   \   000000C0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000C2   0x1B3F             SUBS     R7,R7,R4
   \   000000C4   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000C6   0x1AFF             SUBS     R7,R7,R3
   \   000000C8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000CA   0x1ABF             SUBS     R7,R7,R2
   \   000000CC   0xF242 0x7C10      MOVW     R12,#+10000
   \   000000D0   0xFBB7 0xF7FC      UDIV     R7,R7,R12
   \   000000D4   0x003E             MOVS     R6,R7
    379            
    380            *(p_tab+4) = units + 0x30;
   \   000000D6   0xF112 0x0730      ADDS     R7,R2,#+48
   \   000000DA   0x810F             STRH     R7,[R1, #+8]
    381            *(p_tab+3) = tens + 0x30;
   \   000000DC   0xF113 0x0730      ADDS     R7,R3,#+48
   \   000000E0   0x80CF             STRH     R7,[R1, #+6]
    382            *(p_tab+2) = hundreds + 0x30;
   \   000000E2   0xF114 0x0730      ADDS     R7,R4,#+48
   \   000000E6   0x808F             STRH     R7,[R1, #+4]
    383            *(p_tab+1) = thousands + 0x30;
   \   000000E8   0xF115 0x0730      ADDS     R7,R5,#+48
   \   000000EC   0x804F             STRH     R7,[R1, #+2]
    384            *(p_tab) = misc + 0x30;
   \   000000EE   0xF116 0x0730      ADDS     R7,R6,#+48
   \   000000F2   0x800F             STRH     R7,[R1, #+0]
    385          } // End of convert_into_char(number, *p_tab)
   \   000000F4   0xBDF0             POP      {R4-R7,PC}       ;; return
    386          

   \                                 In section .text, align 2, keep-with-next
    387          void RSSI_TO_UART(void)
    388          {
   \                     RSSI_TO_UART: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    389            float dB_Singal;
    390            
    391            dB_Singal = SpiritQiGetRssidBm();
   \   00000002   0x.... 0x....      BL       SpiritQiGetRssi
   \   00000006   0x3814             SUBS     R0,R0,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_i2f
   \   0000000C   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000010   0x.... 0x....      BL       __aeabi_fdiv
   \   00000014   0x.... 0x....      BL       __aeabi_f2d
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x....             LDR.N    R3,??DataTable8_22  ;; 0xc05e0000
   \   0000001C   0x.... 0x....      BL       __aeabi_dadd
   \   00000020   0x.... 0x....      BL       __aeabi_d2f
   \   00000024   0x0004             MOVS     R4,R0
    392            dB_Singal *= 10;
   \   00000026   0x....             LDR.N    R0,??DataTable8_23  ;; 0x41200000
   \   00000028   0x0021             MOVS     R1,R4
   \   0000002A   0x.... 0x....      BL       __aeabi_fmul
   \   0000002E   0x0004             MOVS     R4,R0
    393            if(dB_Singal < 0)dB_Singal *= (-1);
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000038   0xD204             BCS.N    ??RSSI_TO_UART_0
   \   0000003A   0x....             LDR.N    R0,??DataTable8_24  ;; 0xbf800000
   \   0000003C   0x0021             MOVS     R1,R4
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x0004             MOVS     R4,R0
    394            convert_into_char((uint32_t)dB_Singal, UARTBuff);
   \                     ??RSSI_TO_UART_0: (+1)
   \   00000044   0x....             LDR.N    R1,??DataTable8_25
   \   00000046   0x000D             MOVS     R5,R1
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       __aeabi_f2uiz
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x.... 0x....      BL       convert_into_char
    395            UARTBuff[5] = 'B';
   \   00000054   0x2042             MOVS     R0,#+66
   \   00000056   0x....             LDR.N    R1,??DataTable8_25
   \   00000058   0x8148             STRH     R0,[R1, #+10]
    396            UARTBuff[4] = 'd';
   \   0000005A   0x2064             MOVS     R0,#+100
   \   0000005C   0x....             LDR.N    R1,??DataTable8_25
   \   0000005E   0x8108             STRH     R0,[R1, #+8]
    397            UARTBuff[0] = '-';
   \   00000060   0x202D             MOVS     R0,#+45
   \   00000062   0x....             LDR.N    R1,??DataTable8_25
   \   00000064   0x8008             STRH     R0,[R1, #+0]
    398            if(UARTBuff[1] == '0')
   \   00000066   0x....             LDR.N    R0,??DataTable8_25
   \   00000068   0x8840             LDRH     R0,[R0, #+2]
   \   0000006A   0x2830             CMP      R0,#+48
   \   0000006C   0xD105             BNE.N    ??RSSI_TO_UART_1
    399            {
    400              UARTBuff[1]='-';
   \   0000006E   0x202D             MOVS     R0,#+45
   \   00000070   0x....             LDR.N    R1,??DataTable8_25
   \   00000072   0x8048             STRH     R0,[R1, #+2]
    401              UARTBuff[0]=' ';
   \   00000074   0x2020             MOVS     R0,#+32
   \   00000076   0x....             LDR.N    R1,??DataTable8_25
   \   00000078   0x8008             STRH     R0,[R1, #+0]
    402            }  
    403            // Sent RSSI string - between Start and End Event Markers
    404            USART_SendData(USART1, 'S');  // Start Event Marker
   \                     ??RSSI_TO_UART_1: (+1)
   \   0000007A   0x2153             MOVS     R1,#+83
   \   0000007C   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   0000007E   0x.... 0x....      BL       USART_SendData
    405            while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   \                     ??RSSI_TO_UART_2: (+1)
   \   00000082   0x2180             MOVS     R1,#+128
   \   00000084   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   00000086   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD0F9             BEQ.N    ??RSSI_TO_UART_2
    406            for(uint8_t i=0 ;i<6 ;i++)
   \   0000008E   0x2500             MOVS     R5,#+0
   \                     ??RSSI_TO_UART_3: (+1)
   \   00000090   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000092   0x2D06             CMP      R5,#+6
   \   00000094   0xDA0E             BGE.N    ??RSSI_TO_UART_4
    407              {
    408                USART_SendData(USART1, UARTBuff[i]);
   \   00000096   0x....             LDR.N    R0,??DataTable8_25
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0xF830 0x1015      LDRH     R1,[R0, R5, LSL #+1]
   \   0000009E   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   000000A0   0x.... 0x....      BL       USART_SendData
    409                while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   \                     ??RSSI_TO_UART_5: (+1)
   \   000000A4   0x2180             MOVS     R1,#+128
   \   000000A6   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   000000A8   0x.... 0x....      BL       USART_GetFlagStatus
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD0F9             BEQ.N    ??RSSI_TO_UART_5
    410              }
   \   000000B0   0x1C6D             ADDS     R5,R5,#+1
   \   000000B2   0xE7ED             B.N      ??RSSI_TO_UART_3
    411            USART_SendData(USART1, 'E'); // End Event Marker
   \                     ??RSSI_TO_UART_4: (+1)
   \   000000B4   0x2145             MOVS     R1,#+69
   \   000000B6   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40013800
   \   000000B8   0x.... 0x....      BL       USART_SendData
    412          } // End of RSSI_TO_UART()
   \   000000BC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    413          
    414          #ifdef USE_FULL_ASSERT
    415          /**
    416          * @brief  Reports the name of the source file and the source line number
    417          *         where the assert_param error has occurred.
    418          * @param file: pointer to the source file name
    419          * @param line: assert_param error line source number
    420          * @retval : None
    421          */

   \                                 In section .text, align 2, keep-with-next
    422            void assert_failed(uint8_t* file, uint32_t line)
    423            {
   \                     assert_failed: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    424              // User can add his own implementation to report the file name and line number
    425              printf("Wrong parameters value: file %s on line %d\r\n", file, line);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0x....             LDR.N    R0,??DataTable8_26
   \   0000000C   0x.... 0x....      BL       printf
    426            
    427              // Enter Infinite Loop
    428              while (1)
   \                     ??assert_failed_0: (+1)
   \   00000010   0xE7FE             B.N      ??assert_failed_0
    429              {
    430                // Endless loop
    431              }
    432            } // end of assert_failed(file, line)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     xIrqStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     cRxData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     vectcRxBuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     crc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     jednostki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     dziesiatki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     xTxDoneFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     command_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     bajty

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     command_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     command_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     transfer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     start_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     xGpioIRQ

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     xRadioInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     xBasicInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     xAddressInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x453B8000         DC32     0x453b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     SysyTickCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0xC05E0000         DC32     0xc05e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x........         DC32     UARTBuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x57 0x72          DC8 "Wrong parameters value: file %s on line %d\015\012"
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x6F 0x6E    
   \              0x20 0x6C    
   \              0x69 0x6E    
   \              0x65 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    433          #endif  // USE_FULL_ASSERT
    434          
    435          /**************** (C) COPYRIGHT 2013 DiZiC Ltd. ********* END OF FILE *********/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EXTI0_IRQHandler
         8   -> EXTI_ClearITPendingBit
       8   EXTI9_5_IRQHandler
         8   -> EXTI_ClearITPendingBit
         8   -> EXTI_GetITStatus
         8   -> RSSI_TO_UART
         8   -> SdkEvalLedToggle
         8   -> SdkEvalSpiReadFifo
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritIrqGetStatus
         8   -> SpiritLinearFifoReadNumElementsRxFifo
         8   -> SpiritManagementWaCmdStrobeRx
         8   -> SpiritManagementWaRxStartup
         8   -> USART_GetFlagStatus
         8   -> USART_SendData
       0   NVIC_EnableIRQ
      16   RSSI_TO_UART
        16   -> SpiritQiGetRssi
        16   -> USART_GetFlagStatus
        16   -> USART_SendData
        16   -> __aeabi_d2f
        16   -> __aeabi_dadd
        16   -> __aeabi_f2d
        16   -> __aeabi_f2uiz
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> __aeabi_i2f
        16   -> convert_into_char
        16 __aeabi_cfcmple
      32   USART1_Init
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> NVIC_EnableIRQ
        32   -> USART_Cmd
        32   -> USART_ITConfig
        32   -> USART_Init
      24   WUKPIN1_Init
        24   -> EXTI_Init
        24   -> GPIO_Init
        24   -> NVIC_Init
      16   assert_failed
        16   -> printf
      16   command_transfer
        16   -> SdkDelayMs
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteFifo
        16   -> SpiritCmdStrobeCommand
        16   -> SpiritIrqGetStatus
        16   -> SpiritLinearFifoReadNumElementsTxFifo
        16   -> SpiritManagementWaCmdStrobeTx
      20   convert_into_char
       8   main
         8   -> NVIC_SetVectorTable
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
         8   -> SdkEvalEnterShutdown
         8   -> SdkEvalExitShutdown
         8   -> SdkEvalIdentification
         8   -> SdkEvalLedInit
         8   -> SdkEvalM2SGpioInit
         8   -> SdkEvalM2SGpioInterruptCmd
         8   -> SdkEvalSpiInit
         8   -> SdkStartSysTick
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritGpioInit
         8   -> SpiritIrq
         8   -> SpiritIrqClearStatus
         8   -> SpiritIrqDeInit
         8   -> SpiritManagementIdentificationRFBoard
         8   -> SpiritManagementWaCmdStrobeRx
         8   -> SpiritManagementWaRxStartup
         8   -> SpiritPktBasicAddressesInit
         8   -> SpiritPktBasicInit
         8   -> SpiritPktBasicSetPayloadLength
         8   -> SpiritQiSetSqiThreshold
         8   -> SpiritQiSqiCheck
         8   -> SpiritRadioInit
         8   -> SpiritTimerSetRxTimeoutMs
         8   -> SpiritTimerSetRxTimeoutStopCondition
         8   -> SysTick_CLKSourceConfig
         8   -> USART1_Init
         8   -> command_transfer
         8   -> start_sequence
       8   start_sequence
         8   -> SdkDelayMs
         8   -> SdkEvalSpiWriteFifo
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritManagementWaCmdStrobeTx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      48  ?_0
      22  EXTI0_IRQHandler
     414  EXTI9_5_IRQHandler
      22  NVIC_EnableIRQ
     190  RSSI_TO_UART
      12  UARTBuff
     136  USART1_Init
     102  WUKPIN1_Init
      18  assert_failed
       1  bajty
       1  cRxData
      60  command_buffer
       4  command_index
       4  command_size
     150  command_transfer
     246  convert_into_char
       1  crc
       1  dziesiatki
       1  jednostki
     284  main
      96  start_buffer
      42  start_sequence
       4  transfer
     212  vectcRxBuff
      20  vectcTxBuff
       8  xAddressInit
      16  xBasicInit
       4  xGpioIRQ
       4  xIrqStatus
      28  xRadioInit
       1  xTxDoneFlag

 
   302 bytes in section .bss
   176 bytes in section .data
    48 bytes in section .rodata
 1 734 bytes in section .text
 
 1 734 bytes of CODE  memory
    48 bytes of CONST memory
   478 bytes of DATA  memory

Errors: none
Warnings: 2
