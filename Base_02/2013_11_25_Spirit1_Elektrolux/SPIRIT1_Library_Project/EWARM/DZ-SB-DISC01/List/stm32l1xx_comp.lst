###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_comp.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_comp.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\stm32l1xx_comp.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\stm32l1xx_comp.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_comp.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_comp.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    31-December-2010
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the comparators (COMP1 and COMP2) peripheral: 
      9            *           - Comparators configuration
     10            *           - Window mode control
     11            *           - Internal Reference Voltage (VREFINT) output
     12            *
     13            *  @verbatim
     14            *
     15            *          ===================================================================
     16            *                                 How to use this driver
     17            *          ===================================================================
     18            *                 
     19            *          The device integrates two analog comparators COMP1 and COMP2:            
     20            *             - COMP1 is a fixed threshold (VREFINT) that shares the non inverting
     21            *               input with the ADC channels.
     22            *
     23            *             - COMP2 is a rail-to-rail comparator whose the inverting input 
     24            *               can be selected among: DAC_OUT1, DAC_OUT2, 1/4 VREFINT,
     25            *               1/2 VERFINT, 3/4 VREFINT, VREFINT, PB3 and whose the output
     26            *               can be redirected to embedded timers: TIM2, TIM3, TIM4, TIM10
     27            *
     28            *             - The two comparators COMP1 and COMP2 can be combined in window
     29            *               mode.
     30            *
     31            * @note
     32            *          1- Comparator APB clock must be enabled to get write access
     33            *             to comparator register using
     34            *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_COMP, ENABLE);
     35            *
     36            *          2- COMP1 comparator and ADC can't be used at the same time since
     37            *             they share the same ADC switch matrix (analog switches).
     38            *
     39            *          3- When an I/O is used as comparator input, the corresponding GPIO 
     40            *             registers should be configured in analog mode.
     41            *
     42            *          4- Comparators outputs (CMP1OUT and CMP2OUT) are not mapped on
     43            *             GPIO pin. They are only internal.
     44            *             To get the comparator output level, use COMP_GetOutputLevel()
     45            *
     46            *          5- COMP1 and COMP2 outputs are internally connected to EXTI Line 21
     47            *             and EXTI Line 22 respectively.
     48            *             Interrupts can be used by configuring the EXTI Line using the 
     49            *             EXTI peripheral driver.
     50            *
     51            *          6- After enabling the comparator (COMP1 or COMP2), user should wait
     52            *             for start-up time (tSTART) to get right output levels.
     53            *             Please refer to product datasheet for more information on tSTART.  
     54            *
     55            *          7- Comparators cannot be used to exit the device from Sleep or Stop 
     56            *             mode when the internal reference voltage is switched off using 
     57            *             the PWR_UltraLowPowerCmd() function (ULP bit in the PWR_CR register).
     58            *
     59            *  @endverbatim
     60            *    
     61            ******************************************************************************
     62            * @attention
     63            *
     64            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     65            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     66            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     67            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     68            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     69            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     70            *
     71            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     72            ******************************************************************************  
     73            */ 
     74          
     75          /* Includes ------------------------------------------------------------------*/
     76          #include "stm32l1xx_comp.h"
     77          
     78          /** @addtogroup STM32L1xx_StdPeriph_Driver
     79            * @{
     80            */
     81          
     82          /** @defgroup COMP 
     83            * @brief COMP driver modules
     84            * @{
     85            */ 
     86          
     87          /* Private typedef -----------------------------------------------------------*/
     88          /* Private define ------------------------------------------------------------*/
     89          /* Private macro -------------------------------------------------------------*/
     90          /* Private variables ---------------------------------------------------------*/
     91          /* Private function prototypes -----------------------------------------------*/
     92          /* Private functions ---------------------------------------------------------*/
     93          
     94          /** @defgroup COMP_Private_Functions
     95            * @{
     96            */
     97          
     98          /** @defgroup COMP_Group1 Initialization and Configuration functions
     99           *  @brief   Initialization and Configuration functions 
    100           *
    101          @verbatim   
    102           ===============================================================================
    103                                  Initialization and Configuration functions
    104           ===============================================================================  
    105          
    106          @endverbatim
    107            * @{
    108            */
    109             
    110          /**
    111            * @brief  Deinitializes COMP peripheral registers to their default reset values.
    112            * @param  None
    113            * @retval None
    114            */

   \                                 In section .text, align 2, keep-with-next
    115          void COMP_DeInit(void)
    116          {
    117            COMP->CSR = ((uint32_t)0x00000000);    /*!< Set COMP->CSR to reset value */
   \                     COMP_DeInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   00000004   0x6008             STR      R0,[R1, #+0]
    118          }
   \   00000006   0x4770             BX       LR               ;; return
    119          
    120          /**
    121            * @brief  Initializes the COMP2 peripheral according to the specified parameters
    122            *         in the COMP_InitStruct:
    123            *           - COMP_InvertingInput specify the inverting input of COMP2
    124            *           - COMP_OutputSelect connect the output of COMP2 to selected timer
    125            *             input (Input capture / Output Compare Reference Clear)
    126            *           - COMP_Speed configures COMP2 speed for optimum speed/consumption ratio
    127            * @note   This function configures only COMP2.
    128            * @note   COMP2 comparator is enabled as soon as the INSEL[2:0] bits are 
    129            *         different from "000".
    130            * @param  COMP_InitStruct: pointer to an COMP_InitTypeDef structure that contains 
    131            *         the configuration information for the specified COMP peripheral.
    132            * @retval None
    133            */

   \                                 In section .text, align 2, keep-with-next
    134          void COMP_Init(COMP_InitTypeDef* COMP_InitStruct)
    135          {
   \                     COMP_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    136            uint32_t tmpreg = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    137            
    138            /* Check the parameters */
    139            assert_param(IS_COMP_INVERTING_INPUT(COMP_InitStruct->COMP_InvertingInput));
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD01F             BEQ.N    ??COMP_Init_0
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0xF5B0 0x2F80      CMP      R0,#+262144
   \   00000012   0xD01B             BEQ.N    ??COMP_Init_0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0xF5B0 0x2F00      CMP      R0,#+524288
   \   0000001A   0xD017             BEQ.N    ??COMP_Init_0
   \   0000001C   0x6860             LDR      R0,[R4, #+4]
   \   0000001E   0xF5B0 0x2F40      CMP      R0,#+786432
   \   00000022   0xD013             BEQ.N    ??COMP_Init_0
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0xF5B0 0x1F80      CMP      R0,#+1048576
   \   0000002A   0xD00F             BEQ.N    ??COMP_Init_0
   \   0000002C   0x6860             LDR      R0,[R4, #+4]
   \   0000002E   0xF5B0 0x1FA0      CMP      R0,#+1310720
   \   00000032   0xD00B             BEQ.N    ??COMP_Init_0
   \   00000034   0x6860             LDR      R0,[R4, #+4]
   \   00000036   0xF5B0 0x1FC0      CMP      R0,#+1572864
   \   0000003A   0xD007             BEQ.N    ??COMP_Init_0
   \   0000003C   0x6860             LDR      R0,[R4, #+4]
   \   0000003E   0xF5B0 0x1FE0      CMP      R0,#+1835008
   \   00000042   0xD003             BEQ.N    ??COMP_Init_0
   \   00000044   0x218B             MOVS     R1,#+139
   \   00000046   0x....             LDR.N    R0,??DataTable5_1
   \   00000048   0x.... 0x....      BL       assert_failed
    140            assert_param(IS_COMP_OUTPUT(COMP_InitStruct->COMP_OutputSelect));
   \                     ??COMP_Init_0: (+1)
   \   0000004C   0x68A0             LDR      R0,[R4, #+8]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD01F             BEQ.N    ??COMP_Init_1
   \   00000052   0x68A0             LDR      R0,[R4, #+8]
   \   00000054   0xF5B0 0x1F00      CMP      R0,#+2097152
   \   00000058   0xD01B             BEQ.N    ??COMP_Init_1
   \   0000005A   0x68A0             LDR      R0,[R4, #+8]
   \   0000005C   0xF5B0 0x0F80      CMP      R0,#+4194304
   \   00000060   0xD017             BEQ.N    ??COMP_Init_1
   \   00000062   0x68A0             LDR      R0,[R4, #+8]
   \   00000064   0xF5B0 0x0FC0      CMP      R0,#+6291456
   \   00000068   0xD013             BEQ.N    ??COMP_Init_1
   \   0000006A   0x68A0             LDR      R0,[R4, #+8]
   \   0000006C   0xF5B0 0x0F00      CMP      R0,#+8388608
   \   00000070   0xD00F             BEQ.N    ??COMP_Init_1
   \   00000072   0x68A0             LDR      R0,[R4, #+8]
   \   00000074   0xF5B0 0x0F20      CMP      R0,#+10485760
   \   00000078   0xD00B             BEQ.N    ??COMP_Init_1
   \   0000007A   0x68A0             LDR      R0,[R4, #+8]
   \   0000007C   0xF5B0 0x0F40      CMP      R0,#+12582912
   \   00000080   0xD007             BEQ.N    ??COMP_Init_1
   \   00000082   0x68A0             LDR      R0,[R4, #+8]
   \   00000084   0xF5B0 0x0F60      CMP      R0,#+14680064
   \   00000088   0xD003             BEQ.N    ??COMP_Init_1
   \   0000008A   0x218C             MOVS     R1,#+140
   \   0000008C   0x....             LDR.N    R0,??DataTable5_1
   \   0000008E   0x.... 0x....      BL       assert_failed
    141            assert_param(IS_COMP_SPEED(COMP_InitStruct->COMP_Speed));
   \                     ??COMP_Init_1: (+1)
   \   00000092   0x6820             LDR      R0,[R4, #+0]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD007             BEQ.N    ??COMP_Init_2
   \   00000098   0x6820             LDR      R0,[R4, #+0]
   \   0000009A   0xF5B0 0x5F80      CMP      R0,#+4096
   \   0000009E   0xD003             BEQ.N    ??COMP_Init_2
   \   000000A0   0x218D             MOVS     R1,#+141
   \   000000A2   0x....             LDR.N    R0,??DataTable5_1
   \   000000A4   0x.... 0x....      BL       assert_failed
    142          
    143            /*!< Get the COMP CSR value */
    144            tmpreg = COMP->CSR;
   \                     ??COMP_Init_2: (+1)
   \   000000A8   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x0005             MOVS     R5,R0
    145          
    146            /*!< Clear the  INSEL[2:0], OUTSEL[1:0] and SPEED bits */ 
    147            tmpreg &= (uint32_t) (~(uint32_t) (COMP_CSR_OUTSEL | COMP_CSR_INSEL | COMP_CSR_SPEED));
   \   000000AE   0x....             LDR.N    R0,??DataTable5_2  ;; 0xff03efff
   \   000000B0   0x4005             ANDS     R5,R0,R5
    148            
    149            /*!< Configure COMP: speed, inversion input selection and output redirection */
    150            /*!< Set SPEED bit according to COMP_InitStruct->COMP_Speed value */
    151            /*!< Set INSEL bits according to COMP_InitStruct->COMP_InvertingInput value */ 
    152            /*!< Set OUTSEL bits according to COMP_InitStruct->COMP_OutputSelect value */  
    153            tmpreg |= (uint32_t)((COMP_InitStruct->COMP_Speed | COMP_InitStruct->COMP_InvertingInput 
    154                                  | COMP_InitStruct->COMP_OutputSelect));
   \   000000B2   0x6820             LDR      R0,[R4, #+0]
   \   000000B4   0x6861             LDR      R1,[R4, #+4]
   \   000000B6   0x4308             ORRS     R0,R1,R0
   \   000000B8   0x68A1             LDR      R1,[R4, #+8]
   \   000000BA   0x4308             ORRS     R0,R1,R0
   \   000000BC   0x4305             ORRS     R5,R0,R5
    155          
    156            /*!< The COMP2 comparator is enabled as soon as the INSEL[2:0] bits value are 
    157               different from "000" */
    158            /*!< Write to COMP_CSR register */
    159            COMP->CSR = tmpreg;  
   \   000000BE   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   000000C0   0x6005             STR      R5,[R0, #+0]
    160          }
   \   000000C2   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    161          
    162          /**
    163            * @brief  Enable or disable the COMP1 peripheral.
    164            *         After enabling COMP1, the following functions should be called to 
    165            *         connect the selected GPIO input to COMP1 non inverting input:
    166            *          - Enable switch control mode using SYSCFG_RISwitchControlModeCmd()
    167            *          - Close VCOMP switch using SYSCFG_RIIOSwitchConfig()
    168            *          - Close the I/O switch number n corresponding to the I/O 
    169            *            using SYSCFG_RIIOSwitchConfig()
    170            * @param  NewState: new state of the COMP1 peripheral.
    171            *         This parameter can be: ENABLE or DISABLE.
    172            * @note   This function enables/disables only the COMP1.
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void COMP_Cmd(FunctionalState NewState)
    176          {
   \                     COMP_Cmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    177            /* Check the parameter */
    178            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD006             BEQ.N    ??COMP_Cmd_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD003             BEQ.N    ??COMP_Cmd_0
   \   00000010   0x21B2             MOVS     R1,#+178
   \   00000012   0x....             LDR.N    R0,??DataTable5_1
   \   00000014   0x.... 0x....      BL       assert_failed
    179          
    180            if (NewState != DISABLE)
   \                     ??COMP_Cmd_0: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD006             BEQ.N    ??COMP_Cmd_1
    181            {
    182              /* Enable the COMP1 */
    183              COMP->CSR |= (uint32_t) COMP_CSR_CMP1EN;
   \   0000001E   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000026   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE005             B.N      ??COMP_Cmd_2
    184            }
    185            else
    186            {
    187              /* Disable the COMP1  */
    188              COMP->CSR &= (uint32_t)(~COMP_CSR_CMP1EN);
   \                     ??COMP_Cmd_1: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000034   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   00000036   0x6008             STR      R0,[R1, #+0]
    189            }
    190          }
   \                     ??COMP_Cmd_2: (+1)
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    191          
    192          /**
    193            * @brief  Return the output level (high or low) of the selected comparator:
    194            *         - Comparator output is low when the non-inverting input is at a lower
    195            *           voltage than the inverting input
    196            *         - Comparator output is high when the non-inverting input is at a higher
    197            *           voltage than the inverting input
    198            * @note   Comparators outputs aren't available on GPIO (outputs levels are 
    199            *         only internal). The COMP1 and COMP2 outputs are connected internally 
    200            *         to the EXTI Line 21 and Line 22 respectively.  
    201            * @param  COMP_Selection: the selected comparator. 
    202            *   This parameter can be one of the following values:
    203            *     @arg COMP_Selection_COMP1: COMP1 selected
    204            *     @arg COMP_Selection_COMP2: COMP2 selected  
    205            * @retval Returns the selected comparator output level.
    206            */

   \                                 In section .text, align 2, keep-with-next
    207          uint8_t COMP_GetOutputLevel(uint32_t COMP_Selection)
    208          {
   \                     COMP_GetOutputLevel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    209            uint8_t compout = 0x0;
   \   00000004   0x2500             MOVS     R5,#+0
    210          
    211            /* Check the parameters */
    212            assert_param(IS_COMP_ALL_PERIPH(COMP_Selection));
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD005             BEQ.N    ??COMP_GetOutputLevel_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD003             BEQ.N    ??COMP_GetOutputLevel_0
   \   0000000E   0x21D4             MOVS     R1,#+212
   \   00000010   0x....             LDR.N    R0,??DataTable5_1
   \   00000012   0x.... 0x....      BL       assert_failed
    213          
    214            /* Check if Comparator 1 is selected */
    215            if(COMP_Selection == COMP_Selection_COMP1)
   \                     ??COMP_GetOutputLevel_0: (+1)
   \   00000016   0x2C01             CMP      R4,#+1
   \   00000018   0xD109             BNE.N    ??COMP_GetOutputLevel_1
    216            {
    217              /* Check if comparator 1 output level is high */
    218              if((COMP->CSR & COMP_CSR_CMP1OUT) != (uint8_t) RESET)
   \   0000001A   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x0600             LSLS     R0,R0,#+24
   \   00000020   0xD502             BPL.N    ??COMP_GetOutputLevel_2
    219              {
    220                /* Get Comparator 1 output level */
    221                compout = (uint8_t) COMP_OutputLevel_High;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x0005             MOVS     R5,R0
   \   00000026   0xE00B             B.N      ??COMP_GetOutputLevel_3
    222              }
    223              /* comparator 1 output level is low */
    224              else
    225              {
    226                /* Get Comparator 1 output level */
    227                compout = (uint8_t) COMP_OutputLevel_Low;
   \                     ??COMP_GetOutputLevel_2: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0005             MOVS     R5,R0
   \   0000002C   0xE008             B.N      ??COMP_GetOutputLevel_3
    228              }
    229            }
    230            /* Comparator 2 is selected */
    231            else
    232            {
    233              /* Check if comparator 2 output level is high */
    234              if((COMP->CSR & COMP_CSR_CMP2OUT) != (uint8_t) RESET)
   \                     ??COMP_GetOutputLevel_1: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x0480             LSLS     R0,R0,#+18
   \   00000034   0xD502             BPL.N    ??COMP_GetOutputLevel_4
    235              {
    236                /* Get Comparator output level */
    237                compout = (uint8_t) COMP_OutputLevel_High;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x0005             MOVS     R5,R0
   \   0000003A   0xE001             B.N      ??COMP_GetOutputLevel_3
    238              }
    239              /* comparator 2 output level is low */
    240              else
    241              {
    242                /* Get Comparator 2 output level */
    243                compout = (uint8_t) COMP_OutputLevel_Low;
   \                     ??COMP_GetOutputLevel_4: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x0005             MOVS     R5,R0
    244              }
    245            }
    246            /* Return the comparator output level */
    247            return (uint8_t)(compout);
   \                     ??COMP_GetOutputLevel_3: (+1)
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    248          }
    249          
    250          /**
    251            * @}
    252            */
    253          
    254          /** @defgroup COMP_Group2 Window mode control function
    255           *  @brief   Window mode control function 
    256           *
    257          @verbatim   
    258           ===============================================================================
    259                                        Window mode control function
    260           ===============================================================================  
    261          
    262          @endverbatim
    263            * @{
    264            */
    265          
    266          /**
    267            * @brief  Enables or disables the window mode.
    268            *         In window mode:
    269            *          - COMP1 inverting input is fixed to VREFINT defining the first
    270            *            threshold
    271            *          - COMP2 inverting input is configurable (DAC_OUT1, DAC_OUT2, VREFINT
    272            *            sub-multiples, PB3) defining the second threshold
    273            *          - COMP1 and COMP2 non inverting inputs are connected together.
    274            * @note   In window mode, only the Group 6 (PB4 or PB5) can be used as
    275            *         non-inverting inputs.
    276            * param   NewState: new state of the window mode. 
    277            *   This parameter can be ENABLE or DISABLE.
    278            * @retval None
    279            */

   \                                 In section .text, align 2, keep-with-next
    280          void COMP_WindowCmd(FunctionalState NewState)
    281          {
   \                     COMP_WindowCmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    282            /* Check the parameters */
    283            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??COMP_WindowCmd_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??COMP_WindowCmd_0
   \   00000010   0xF240 0x111B      MOVW     R1,#+283
   \   00000014   0x....             LDR.N    R0,??DataTable5_1
   \   00000016   0x.... 0x....      BL       assert_failed
    284            
    285            if (NewState != DISABLE)
   \                     ??COMP_WindowCmd_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD006             BEQ.N    ??COMP_WindowCmd_1
    286            {
    287              /* Enable the window mode */
    288              COMP->CSR |= (uint32_t) COMP_CSR_WNDWE;
   \   00000020   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000028   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0xE005             B.N      ??COMP_WindowCmd_2
    289            }
    290            else
    291            {
    292              /* Disable the window mode */
    293              COMP->CSR &= (uint32_t)(~COMP_CSR_WNDWE);
   \                     ??COMP_WindowCmd_1: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF430 0x3000      BICS     R0,R0,#0x20000
   \   00000036   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   00000038   0x6008             STR      R0,[R1, #+0]
    294            }
    295          }
   \                     ??COMP_WindowCmd_2: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    296          
    297          /**
    298            * @}
    299            */
    300          
    301          /** @defgroup COMP_Group3 Internal Reference Voltage output function
    302           *  @brief   Internal Reference Voltage (VREFINT) output function 
    303           *
    304          @verbatim   
    305           ===============================================================================
    306                       Internal Reference Voltage (VREFINT) output function
    307           ===============================================================================  
    308          
    309          @endverbatim
    310            * @{
    311            */
    312          
    313          /**
    314            * @brief  Enables or disables the output of internal reference voltage (VREFINT).
    315            *         The VREFINT output can be routed to any I/O in group 3: CH8 (PB0) or
    316            *         CH9 (PB1).
    317            *         To correctly use this function, the SYSCFG_RIIOSwitchConfig() function
    318            *         should be called after.
    319            * @param  NewState: new state of the Vrefint output.
    320            *         This parameter can be: ENABLE or DISABLE.
    321            * @retval None
    322            */

   \                                 In section .text, align 2, keep-with-next
    323          void COMP_VrefintOutputCmd(FunctionalState NewState)
    324          {
   \                     COMP_VrefintOutputCmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    325            /* Check the parameters */
    326            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??COMP_VrefintOutputCmd_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??COMP_VrefintOutputCmd_0
   \   00000010   0xF44F 0x71A3      MOV      R1,#+326
   \   00000014   0x....             LDR.N    R0,??DataTable5_1
   \   00000016   0x.... 0x....      BL       assert_failed
    327          
    328            if (NewState != DISABLE)
   \                     ??COMP_VrefintOutputCmd_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD006             BEQ.N    ??COMP_VrefintOutputCmd_1
    329            {
    330              /* Enable the output of internal reference voltage */
    331              COMP->CSR |= (uint32_t) COMP_CSR_VREFOUTEN;
   \   00000020   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000028   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0xE005             B.N      ??COMP_VrefintOutputCmd_2
    332            }
    333            else
    334            {
    335              /* Disable the output of internal reference voltage */
    336              COMP->CSR &= (uint32_t) (~COMP_CSR_VREFOUTEN);
   \                     ??COMP_VrefintOutputCmd_1: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable5  ;; 0x40007c00
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   00000036   0x....             LDR.N    R1,??DataTable5  ;; 0x40007c00
   \   00000038   0x6008             STR      R0,[R1, #+0]
    337            }
    338          }
   \                     ??COMP_VrefintOutputCmd_2: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40007C00         DC32     0x40007c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xFF03EFFF         DC32     0xff03efff

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 42H, 61H, 73H, 65H
   \              0x35 0x5C    
   \              0x42 0x61    
   \              0x73 0x65    
   \   00000020   0x5F 0x30          DC8 5FH, 30H, 32H, 5CH, 32H, 30H, 31H, 33H
   \              0x32 0x5C    
   \              0x32 0x30    
   \              0x31 0x33    
   \   00000028   0x5F 0x31          DC8 5FH, 31H, 31H, 5FH, 32H, 35H, 5FH, 53H
   \              0x31 0x5F    
   \              0x32 0x35    
   \              0x5F 0x53    
   \   00000030   0x70 0x69          DC8 70H, 69H, 72H, 69H, 74H, 31H, 5FH, 45H
   \              0x72 0x69    
   \              0x74 0x31    
   \              0x5F 0x45    
   \   00000038   0x6C 0x65          DC8 6CH, 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H
   \              0x6B 0x74    
   \              0x72 0x6F    
   \              0x6C 0x75    
   \   00000040   0x78 0x5C          DC8 78H, 5CH, 53H, 54H, 4DH, 33H, 32H, 4CH
   \              0x53 0x54    
   \              0x4D 0x33    
   \              0x32 0x4C    
   \   00000048   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 4CH, 31H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x4C 0x31    
   \   00000050   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000058   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 4CH, 69H, 62H
   \              0x70 0x68    
   \              0x5F 0x4C    
   \              0x69 0x62    
   \   00000060   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000068   0x53 0x54          DC8 53H, 54H, 4DH, 33H, 32H, 4CH, 31H, 78H
   \              0x4D 0x33    
   \              0x32 0x4C    
   \              0x31 0x78    
   \   00000070   0x78 0x5F          DC8 78H, 5FH, 53H, 74H, 64H, 50H, 65H, 72H
   \              0x53 0x74    
   \              0x64 0x50    
   \              0x65 0x72    
   \   00000078   0x69 0x70          DC8 69H, 70H, 68H, 5FH, 44H, 72H, 69H, 76H
   \              0x68 0x5F    
   \              0x44 0x72    
   \              0x69 0x76    
   \   00000080   0x65 0x72          DC8 65H, 72H, 5CH, 73H, 72H, 63H, 5CH, 73H
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x73    
   \   00000088   0x74 0x6D          DC8 74H, 6DH, 33H, 32H, 6CH, 31H, 78H, 78H
   \              0x33 0x32    
   \              0x6C 0x31    
   \              0x78 0x78    
   \   00000090   0x5F 0x63          DC8 5FH, 63H, 6FH, 6DH, 70H, 2EH, 63H, 0
   \              0x6F 0x6D    
   \              0x70 0x2E    
   \              0x63 0x00    
    339          
    340          /**
    341            * @}
    342            */
    343          
    344          /**
    345            * @}
    346            */
    347          
    348          /**
    349            * @}
    350            */
    351          
    352          /**
    353            * @}
    354            */
    355          
    356          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   COMP_Cmd
         8   -> assert_failed
       0   COMP_DeInit
      16   COMP_GetOutputLevel
        16   -> assert_failed
      16   COMP_Init
        16   -> assert_failed
       8   COMP_VrefintOutputCmd
         8   -> assert_failed
       8   COMP_WindowCmd
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
     152  ?_0
      58  COMP_Cmd
       8  COMP_DeInit
      70  COMP_GetOutputLevel
     196  COMP_Init
      60  COMP_VrefintOutputCmd
      60  COMP_WindowCmd

 
 152 bytes in section .rodata
 464 bytes in section .text
 
 464 bytes of CODE  memory
 152 bytes of CONST memory

Errors: none
Warnings: none
