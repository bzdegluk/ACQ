###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:27
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Aes.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Aes.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_Aes.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_Aes.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Aes.c
      1          /**
      2           * @file    SPIRIT_Aes.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT AES Engine.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_Aes.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          /**
     30           * @addtogroup SPIRIT_Libraries
     31           * @{
     32           */
     33          
     34          
     35          /**
     36           * @addtogroup SPIRIT_Aes
     37           * @{
     38           */
     39          
     40          
     41          /**
     42           * @defgroup Aes_Private_TypesDefinitions       AES Private Types Definitions
     43           * @{
     44           */
     45          
     46          /**
     47           * @}
     48           */
     49          
     50          
     51          /**
     52           * @defgroup Aes_Private_Defines                AES Private Defines
     53           * @{
     54           */
     55          
     56          /**
     57           * @}
     58           */
     59          
     60          
     61          /**
     62           * @defgroup Aes_Private_Macros                 AES Private Macros
     63           * @{
     64           */
     65          
     66          /**
     67           * @}
     68           */
     69          
     70          
     71          /**
     72           * @defgroup Aes_Private_Variables              AES Private Variables
     73           * @{
     74           */
     75          
     76          /**
     77           * @}
     78           */
     79          
     80          
     81          /**
     82           * @defgroup Aes_Private_FunctionPrototypes     AES Private Function Prototypes
     83           * @{
     84           */
     85          
     86          /**
     87           * @}
     88           */
     89          
     90          
     91          /**
     92           * @defgroup Aes_Private_Functions              AES Private Functions
     93           * @{
     94           */
     95          
     96          
     97          /**
     98           * @brief  Enables or Disables the AES engine.
     99           * @param  xNewState new state for AES engine.
    100           *         This parameter can be: S_ENABLE or S_DISABLE.
    101           * @retval None
    102           */

   \                                 In section .text, align 2, keep-with-next
    103          void SpiritAesMode(SpiritFunctionalState xNewState)
    104          {
   \                     SpiritAesMode: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    105            uint8_t tempRegValue = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    106          
    107            /* Check the parameters */
    108            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD006             BEQ.N    ??SpiritAesMode_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C01             CMP      R4,#+1
   \   00000014   0xD003             BEQ.N    ??SpiritAesMode_0
   \   00000016   0x216C             MOVS     R1,#+108
   \   00000018   0x....             LDR.N    R0,??DataTable8
   \   0000001A   0x.... 0x....      BL       s_assert_failed
    109          
    110            /* Modifies the register value */
    111            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritAesMode_0: (+1)
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x....             LDR.N    R0,??DataTable8_1
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    112            if(xNewState == S_ENABLE)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C01             CMP      R4,#+1
   \   00000036   0xD106             BNE.N    ??SpiritAesMode_1
    113            {
    114              tempRegValue |= AES_MASK;
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000044   0xE005             B.N      ??SpiritAesMode_2
    115            }
    116            else
    117            {
    118              tempRegValue &= ~AES_MASK;
   \                     ??SpiritAesMode_1: (+1)
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    119            }
    120          
    121            /* Writes the ANA_FUNC_CONF0 register to enable or disable the AES engine */
    122            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritAesMode_2: (+1)
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x....             LDR.N    R0,??DataTable8_1
   \   00000060   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    123          
    124          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    125          
    126          
    127          /**
    128           * @brief  Writes the data to encrypt or decrypt, or the encryption key for the 
    129           *         derive decryption key operation into the AES_DATA_IN registers.
    130           * @param  pcBufferDataIn pointer to the user data buffer. The first byte of the array
    131           * 	   shall be the MSB byte and it will be put in the AES_DATA_IN[0] register, while
    132           * 	   the last one shall be the LSB and it will be put in the AES_DATA_IN[cDataLength-1]
    133           * 	   register. If data to write are less than 16 bytes the remaining AES_DATA_IN registers
    134           * 	   will be filled with bytes equal to 0. This parameter is an uint8_t*.
    135           * @param  cDataLength length of data in bytes.
    136           *         This parameter is an uint8_t.
    137           * @retval None
    138           */

   \                                 In section .text, align 2, keep-with-next
    139          void SpiritAesWriteDataIn(uint8_t* pcBufferDataIn, uint8_t cDataLength)
    140          {
   \                     SpiritAesWriteDataIn: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
    141            uint8_t i, dataInArray[16];
    142          
    143            /* Verifies that there are no more than 16 bytes */
    144            (cDataLength>16) ? (cDataLength=16) : cDataLength;
   \   00000008   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000A   0x2E11             CMP      R6,#+17
   \   0000000C   0xDB02             BLT.N    ??SpiritAesWriteDataIn_0
   \   0000000E   0x2610             MOVS     R6,#+16
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0xE000             B.N      ??SpiritAesWriteDataIn_1
   \                     ??SpiritAesWriteDataIn_0: (+1)
   \   00000014   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
    145          
    146            /* Fill the dataInArray with the data buffer, using padding */
    147            for(i=0;i<16;i++)
   \                     ??SpiritAesWriteDataIn_1: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0005             MOVS     R5,R0
   \                     ??SpiritAesWriteDataIn_2: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D10             CMP      R5,#+16
   \   0000001E   0xDA18             BGE.N    ??SpiritAesWriteDataIn_3
    148            {
    149              (i<(16 - cDataLength)) ? (dataInArray[i]=0):(dataInArray[i]=pcBufferDataIn[15-i]);
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0xF1D6 0x0010      RSBS     R0,R6,#+16
   \   00000028   0x4285             CMP      R5,R0
   \   0000002A   0xDA07             BGE.N    ??SpiritAesWriteDataIn_4
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x5468             STRB     R0,[R5, R1]
   \   00000034   0xA801             ADD      R0,SP,#+4
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x5C28             LDRB     R0,[R5, R0]
   \   0000003A   0xE008             B.N      ??SpiritAesWriteDataIn_5
   \                     ??SpiritAesWriteDataIn_4: (+1)
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0x1B60             SUBS     R0,R4,R5
   \   00000040   0x7BC0             LDRB     R0,[R0, #+15]
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x5468             STRB     R0,[R5, R1]
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x5C28             LDRB     R0,[R5, R0]
    150          
    151            }
   \                     ??SpiritAesWriteDataIn_5: (+1)
   \   0000004E   0x1C6D             ADDS     R5,R5,#+1
   \   00000050   0xE7E3             B.N      ??SpiritAesWriteDataIn_2
    152          
    153            /* Writes the AES_DATA_IN registers */
    154            g_xStatus = SpiritSpiWriteRegisters(AES_DATA_IN_15_BASE, 16, dataInArray);
   \                     ??SpiritAesWriteDataIn_3: (+1)
   \   00000052   0xAA01             ADD      R2,SP,#+4
   \   00000054   0x2110             MOVS     R1,#+16
   \   00000056   0x2080             MOVS     R0,#+128
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0x....             LDR.N    R0,??DataTable8_1
   \   00000060   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    155          
    156          }
   \   00000066   0xB006             ADD      SP,SP,#+24
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
    157          
    158          
    159          /**
    160           * @brief  Returns the encrypted or decrypted data or the decription key from the AES_DATA_OUT register.
    161           * @param  pcBufferDataOut pointer to the user data buffer. The AES_DATA_OUT[0]
    162           *         register value will be put as first element of the buffer (MSB), while the
    163           *         AES_DAT_OUT[cDataLength-1] register value will be put as last element of the buffer (LSB).
    164           * 	   This parameter is a uint8_t*.
    165           * @param  cDataLength length of data to read in bytes.
    166           *         This parameter is a uint8_t.
    167           * @retval None
    168           */

   \                                 In section .text, align 2, keep-with-next
    169          void SpiritAesReadDataOut(uint8_t* pcBufferDataOut, uint8_t cDataLength)
    170          {
   \                     SpiritAesReadDataOut: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
    171            uint8_t address, dataOutArray[16];
    172          
    173            /* Verifies that there are no more than 16 bytes */
    174            (cDataLength>16) ? (cDataLength=16) : cDataLength;
   \   00000008   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000A   0x2E11             CMP      R6,#+17
   \   0000000C   0xDB02             BLT.N    ??SpiritAesReadDataOut_0
   \   0000000E   0x2610             MOVS     R6,#+16
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0xE000             B.N      ??SpiritAesReadDataOut_1
   \                     ??SpiritAesReadDataOut_0: (+1)
   \   00000014   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
    175          
    176            /* Evaluates the address of AES_DATA_OUT from which start to read */
    177            address = AES_DATA_OUT_15_BASE+16-cDataLength;
   \                     ??SpiritAesReadDataOut_1: (+1)
   \   00000016   0xF1D6 0x00E4      RSBS     R0,R6,#+228
   \   0000001A   0x0005             MOVS     R5,R0
    178          
    179            /* Reads the exact number of AES_DATA_OUT registers */
    180            g_xStatus = (SpiritSpiReadRegisters(address, cDataLength, dataOutArray));
   \   0000001C   0xAA01             ADD      R2,SP,#+4
   \   0000001E   0x0031             MOVS     R1,R6
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x....             LDR.N    R0,??DataTable8_1
   \   0000002E   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000032   0x8001             STRH     R1,[R0, #+0]
    181          
    182            /* Copy in the user buffer the read values changing the order */
    183            for(int i = (cDataLength-1); i>=0; i--)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x1E70             SUBS     R0,R6,#+1
   \                     ??SpiritAesReadDataOut_2: (+1)
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD405             BMI.N    ??SpiritAesReadDataOut_3
    184            {
    185              *pcBufferDataOut = dataOutArray[i];
   \   0000003C   0xA901             ADD      R1,SP,#+4
   \   0000003E   0x5C41             LDRB     R1,[R0, R1]
   \   00000040   0x7021             STRB     R1,[R4, #+0]
    186              pcBufferDataOut++;
   \   00000042   0x1C64             ADDS     R4,R4,#+1
    187            }
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0xE7F7             B.N      ??SpiritAesReadDataOut_2
    188          
    189          }
   \                     ??SpiritAesReadDataOut_3: (+1)
   \   00000048   0xB006             ADD      SP,SP,#+24
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    190          
    191          
    192          /**
    193           * @brief  Writes the encryption key into the AES_KEY_IN register.
    194           * @param  pcKey pointer to the buffer of 4 words containing the AES key.
    195           *         The first byte of the buffer shall be the most significant byte AES_KEY_0 of the AES key.
    196           *         The last byte of the buffer shall be the less significant byte AES_KEY_15 of the AES key.
    197           * 	   This parameter is an uint8_t*.
    198           * @retval None
    199           */

   \                                 In section .text, align 2, keep-with-next
    200          void SpiritAesWriteKey(uint8_t* pcKey)
    201          {
   \                     SpiritAesWriteKey: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    202            uint8_t pcTempKey[16]; 
    203            for (uint8_t i = 0; i < 16; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \                     ??SpiritAesWriteKey_0: (+1)
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2810             CMP      R0,#+16
   \   0000000C   0xDA07             BGE.N    ??SpiritAesWriteKey_1
    204            {
    205              pcTempKey[15-i] = pcKey[i];
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x5D01             LDRB     R1,[R0, R4]
   \   00000012   0xAA01             ADD      R2,SP,#+4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x1A12             SUBS     R2,R2,R0
   \   00000018   0x73D1             STRB     R1,[R2, #+15]
    206            }
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0xE7F4             B.N      ??SpiritAesWriteKey_0
    207            
    208            /* Writes the AES_DATA_IN registers */
    209            g_xStatus = SpiritSpiWriteRegisters(AES_KEY_IN_15_BASE, 16, pcTempKey);
   \                     ??SpiritAesWriteKey_1: (+1)
   \   0000001E   0xAA01             ADD      R2,SP,#+4
   \   00000020   0x2110             MOVS     R1,#+16
   \   00000022   0x2070             MOVS     R0,#+112
   \   00000024   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x....             LDR.N    R0,??DataTable8_1
   \   0000002C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    210          
    211          }
   \   00000032   0xB006             ADD      SP,SP,#+24
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    212          
    213          /**
    214           * @brief  Returns the encryption/decryption key from the AES_KEY_IN register.
    215           * @param  pcKey  pointer to the buffer of 4 words (16 bytes) containing the AES key.
    216           *         The first byte of the buffer shall be the most significant byte AES_KEY_0 of the AES key.
    217           *         The last byte of the buffer shall be the less significant byte AES_KEY_15 of the AES key.
    218           *         This parameter is an uint8_t*.
    219           * @retval None
    220           */

   \                                 In section .text, align 2, keep-with-next
    221          void SpiritAesReadKey(uint8_t* pcKey)
    222          {
   \                     SpiritAesReadKey: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    223            uint8_t pcTempKey[16];
    224          
    225            /* Reads the AES_DATA_IN registers */
    226            g_xStatus = SpiritSpiReadRegisters(AES_KEY_IN_15_BASE, 16, pcTempKey);
   \   00000006   0xAA01             ADD      R2,SP,#+4
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x2070             MOVS     R0,#+112
   \   0000000C   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable8_1
   \   00000014   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    227          
    228          
    229            for (uint8_t i = 0; i < 16; i++)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??SpiritAesReadKey_0: (+1)
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xDA07             BGE.N    ??SpiritAesReadKey_1
    230              pcKey[i] = pcTempKey[15-i];
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x1A09             SUBS     R1,R1,R0
   \   00000028   0x7BC9             LDRB     R1,[R1, #+15]
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x5501             STRB     R1,[R0, R4]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0xE7F4             B.N      ??SpiritAesReadKey_0
    231          
    232          }
   \                     ??SpiritAesReadKey_1: (+1)
   \   00000032   0xB006             ADD      SP,SP,#+24
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    233          
    234          
    235          
    236          /**
    237           * @brief  Derives the decryption key from a given encryption key.
    238           * @param  None.
    239           * @retval None.
    240           */

   \                                 In section .text, align 2, keep-with-next
    241          void SpiritAesDeriveDecKeyFromEnc(void)
    242          {
   \                     SpiritAesDeriveDecKeyFromEnc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    243            /* Sends the COMMAND_AES_KEY command */
    244            g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_KEY);
   \   00000002   0x206B             MOVS     R0,#+107
   \   00000004   0x.... 0x....      BL       SdkEvalSpiCommandStrobes
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1
   \   0000000C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000010   0x8001             STRH     R1,[R0, #+0]
    245          
    246          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    247          
    248          
    249          /**
    250           * @brief  Executes the encryption operation.
    251           * @param  None.
    252           * @retval None.
    253           */

   \                                 In section .text, align 2, keep-with-next
    254          void SpiritAesExecuteEncryption(void)
    255          {
   \                     SpiritAesExecuteEncryption: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    256            /* Sends the COMMAND_AES_ENC command */
    257            g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_ENC);
   \   00000002   0x206A             MOVS     R0,#+106
   \   00000004   0x.... 0x....      BL       SdkEvalSpiCommandStrobes
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1
   \   0000000C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000010   0x8001             STRH     R1,[R0, #+0]
    258          
    259          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    260          
    261          
    262          /**
    263           * @brief  Executes the decryption operation.
    264           * @param  None.
    265           * @retval None.
    266           */

   \                                 In section .text, align 2, keep-with-next
    267          void SpiritAesExecuteDecryption(void)
    268          {
   \                     SpiritAesExecuteDecryption: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    269            /* Sends the COMMAND_AES_DEC command */
    270            g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_DEC);
   \   00000002   0x206C             MOVS     R0,#+108
   \   00000004   0x.... 0x....      BL       SdkEvalSpiCommandStrobes
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1
   \   0000000C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000010   0x8001             STRH     R1,[R0, #+0]
    271          
    272          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    273          
    274          
    275          /**
    276           * @brief  Executes the key derivation and the decryption operation.
    277           * @param  None.
    278           * @retval None.
    279           */

   \                                 In section .text, align 2, keep-with-next
    280          void SpiritAesDeriveDecKeyExecuteDec(void)
    281          {
   \                     SpiritAesDeriveDecKeyExecuteDec: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    282            /* Sends the COMMAND_AES_KEY_DEC command */
    283            g_xStatus = SpiritSpiCommandStrobes(COMMAND_AES_KEY_DEC);
   \   00000002   0x206D             MOVS     R0,#+109
   \   00000004   0x.... 0x....      BL       SdkEvalSpiCommandStrobes
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1
   \   0000000C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000010   0x8001             STRH     R1,[R0, #+0]
    284          
    285          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 42H, 61H, 73H, 65H
   \              0x35 0x5C    
   \              0x42 0x61    
   \              0x73 0x65    
   \   00000020   0x5F 0x30          DC8 5FH, 30H, 32H, 5CH, 32H, 30H, 31H, 33H
   \              0x32 0x5C    
   \              0x32 0x30    
   \              0x31 0x33    
   \   00000028   0x5F 0x31          DC8 5FH, 31H, 31H, 5FH, 32H, 35H, 5FH, 53H
   \              0x31 0x5F    
   \              0x32 0x35    
   \              0x5F 0x53    
   \   00000030   0x70 0x69          DC8 70H, 69H, 72H, 69H, 74H, 31H, 5FH, 45H
   \              0x72 0x69    
   \              0x74 0x31    
   \              0x5F 0x45    
   \   00000038   0x6C 0x65          DC8 6CH, 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H
   \              0x6B 0x74    
   \              0x72 0x6F    
   \              0x6C 0x75    
   \   00000040   0x78 0x5C          DC8 78H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000048   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000050   0x79 0x5F          DC8 79H, 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H
   \              0x50 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000058   0x74 0x5C          DC8 74H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000060   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000068   0x79 0x5C          DC8 79H, 5CH, 53H, 6FH, 75H, 72H, 63H, 65H
   \              0x53 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000070   0x5C 0x73          DC8 5CH, 73H, 72H, 63H, 5CH, 53H, 50H, 49H
   \              0x72 0x63    
   \              0x5C 0x53    
   \              0x50 0x49    
   \   00000078   0x52 0x49          DC8 52H, 49H, 54H, 5FH, 41H, 65H, 73H, 2EH
   \              0x54 0x5F    
   \              0x41 0x65    
   \              0x73 0x2E    
   \   00000080   0x63 0x00          DC8 63H, 0
   \   00000082   0x00 0x00          DC8 0, 0
    286          
    287          
    288          /**
    289           * @}
    290           */
    291          
    292          
    293          /**
    294           * @}
    295           */
    296          
    297          
    298          /**
    299           * @}
    300           */
    301          
    302          
    303          
    304          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SpiritAesDeriveDecKeyExecuteDec
         8   -> SdkEvalSpiCommandStrobes
       8   SpiritAesDeriveDecKeyFromEnc
         8   -> SdkEvalSpiCommandStrobes
       8   SpiritAesExecuteDecryption
         8   -> SdkEvalSpiCommandStrobes
       8   SpiritAesExecuteEncryption
         8   -> SdkEvalSpiCommandStrobes
      16   SpiritAesMode
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      40   SpiritAesReadDataOut
        40   -> SdkEvalSpiReadRegisters
      32   SpiritAesReadKey
        32   -> SdkEvalSpiReadRegisters
      40   SpiritAesWriteDataIn
        40   -> SdkEvalSpiWriteRegisters
      32   SpiritAesWriteKey
        32   -> SdkEvalSpiWriteRegisters


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
     132  ?_0
      20  SpiritAesDeriveDecKeyExecuteDec
      20  SpiritAesDeriveDecKeyFromEnc
      20  SpiritAesExecuteDecryption
      20  SpiritAesExecuteEncryption
     104  SpiritAesMode
      76  SpiritAesReadDataOut
      54  SpiritAesReadKey
     106  SpiritAesWriteDataIn
      54  SpiritAesWriteKey

 
 132 bytes in section .rodata
 482 bytes in section .text
 
 482 bytes of CODE  memory
 132 bytes of CONST memory

Errors: none
Warnings: none
