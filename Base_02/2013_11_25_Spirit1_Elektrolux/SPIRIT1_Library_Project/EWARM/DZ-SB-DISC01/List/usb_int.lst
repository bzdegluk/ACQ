###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_int.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_int.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\usb_int.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\usb_int.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_int.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_int.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : Endpoint CTR (Low and High) interrupt's service routines
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #ifndef STM32F10X_CL
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "usb_lib.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 2
     24          __IO uint16_t SaveRState;
   \                     SaveRState:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     25          __IO uint16_t SaveTState;
   \                     SaveTState:
   \   00000000                      DS8 2
     26          
     27          /* Extern variables ----------------------------------------------------------*/
     28          extern void (*pEpInt_IN[7])(void);    /*  Handles IN  interrupts   */
     29          extern void (*pEpInt_OUT[7])(void);   /*  Handles OUT interrupts   */
     30          
     31          /* Private function prototypes -----------------------------------------------*/
     32          /* Private functions ---------------------------------------------------------*/
     33          
     34          /*******************************************************************************
     35          * Function Name  : CTR_LP.
     36          * Description    : Low priority Endpoint Correct Transfer interrupt's service
     37          *                  routine.
     38          * Input          : None.
     39          * Output         : None.
     40          * Return         : None.
     41          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     42          void CTR_LP(void)
     43          {
   \                     CTR_LP: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     44            __IO uint16_t wEPVal = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     45            /* stay in loop while pending interrupts */
     46            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   \                     ??CTR_LP_0: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable1  ;; 0x40005c44
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable1_1
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
   \   00000010   0x0400             LSLS     R0,R0,#+16
   \   00000012   0xF140 0x810B      BPL.W    ??CTR_LP_1
     47            {
     48              /* extract highest priority endpoint number */
     49              EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
   \   00000016   0x....             LDR.N    R0,??DataTable1_1
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000001E   0x....             LDR.N    R1,??DataTable1_2
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     50              if (EPindex == 0)
   \   00000022   0x....             LDR.N    R0,??DataTable1_2
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xF040 0x80C4      BNE.W    ??CTR_LP_2
     51              {
     52                /* Decode and service control endpoint interrupt */
     53                /* calling related service routine */
     54                /* (Setup0_Process, In0_Process, Out0_Process) */
     55          
     56                /* save RX & TX status */
     57                /* and set both to NAK */
     58          
     59          
     60          	    SaveRState = _GetENDPOINT(ENDP0);
   \   0000002C   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable1_4
   \   00000032   0x8008             STRH     R0,[R1, #+0]
     61          	    SaveTState = SaveRState & EPTX_STAT;
   \   00000034   0x....             LDR.N    R0,??DataTable1_4
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0xF010 0x0030      ANDS     R0,R0,#0x30
   \   0000003C   0x....             LDR.N    R1,??DataTable1_5
   \   0000003E   0x8008             STRH     R0,[R1, #+0]
     62          	    SaveRState &=  EPRX_STAT;	
   \   00000040   0x....             LDR.N    R0,??DataTable1_4
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0xF410 0x5040      ANDS     R0,R0,#0x3000
   \   00000048   0x....             LDR.N    R1,??DataTable1_4
   \   0000004A   0x8008             STRH     R0,[R1, #+0]
     63          
     64          	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
   \   0000004C   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0xF64B 0x72BF      MOVW     R2,#+49087
   \   00000056   0x4011             ANDS     R1,R2,R1
   \   00000058   0x0008             MOVS     R0,R1
   \   0000005A   0xF490 0x5000      EORS     R0,R0,#0x2000
   \   0000005E   0xF090 0x0020      EORS     R0,R0,#0x20
   \   00000062   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000064   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000068   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000006C   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   0000006E   0x6008             STR      R0,[R1, #+0]
     65          
     66                /* DIR bit = origin of the interrupt */
     67          
     68                if ((wIstr & ISTR_DIR) == 0)
   \   00000070   0x....             LDR.N    R0,??DataTable1_1
   \   00000072   0x8800             LDRH     R0,[R0, #+0]
   \   00000074   0x06C0             LSLS     R0,R0,#+27
   \   00000076   0xD430             BMI.N    ??CTR_LP_3
     69                {
     70                  /* DIR = 0 */
     71          
     72                  /* DIR = 0      => IN  int */
     73                  /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
     74          
     75          
     76                  _ClearEP_CTR_TX(ENDP0);
   \   00000078   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007E   0xF648 0x710F      MOVW     R1,#+36623
   \   00000082   0x4008             ANDS     R0,R1,R0
   \   00000084   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   00000086   0x6008             STR      R0,[R1, #+0]
     77                  In0_Process();
   \   00000088   0x.... 0x....      BL       In0_Process
     78          
     79                     /* before terminate set Tx & Rx status */
     80          
     81                      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
   \   0000008C   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   0000008E   0x6809             LDR      R1,[R1, #+0]
   \   00000090   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000092   0xF64B 0x72BF      MOVW     R2,#+49087
   \   00000096   0x4011             ANDS     R1,R2,R1
   \   00000098   0x0008             MOVS     R0,R1
   \   0000009A   0x....             LDR.N    R1,??DataTable1_4
   \   0000009C   0x8809             LDRH     R1,[R1, #+0]
   \   0000009E   0x04C9             LSLS     R1,R1,#+19
   \   000000A0   0xD501             BPL.N    ??CTR_LP_4
   \   000000A2   0xF490 0x5080      EORS     R0,R0,#0x1000
   \                     ??CTR_LP_4: (+1)
   \   000000A6   0x....             LDR.N    R1,??DataTable1_4
   \   000000A8   0x8809             LDRH     R1,[R1, #+0]
   \   000000AA   0x0489             LSLS     R1,R1,#+18
   \   000000AC   0xD501             BPL.N    ??CTR_LP_5
   \   000000AE   0xF490 0x5000      EORS     R0,R0,#0x2000
   \                     ??CTR_LP_5: (+1)
   \   000000B2   0x....             LDR.N    R1,??DataTable1_5
   \   000000B4   0x8809             LDRH     R1,[R1, #+0]
   \   000000B6   0x06C9             LSLS     R1,R1,#+27
   \   000000B8   0xD501             BPL.N    ??CTR_LP_6
   \   000000BA   0xF090 0x0010      EORS     R0,R0,#0x10
   \                     ??CTR_LP_6: (+1)
   \   000000BE   0x....             LDR.N    R1,??DataTable1_5
   \   000000C0   0x8809             LDRH     R1,[R1, #+0]
   \   000000C2   0x0689             LSLS     R1,R1,#+26
   \   000000C4   0xD501             BPL.N    ??CTR_LP_7
   \   000000C6   0xF090 0x0020      EORS     R0,R0,#0x20
   \                     ??CTR_LP_7: (+1)
   \   000000CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CC   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000000D0   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000D4   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   000000D6   0x6008             STR      R0,[R1, #+0]
     82          		  return;
   \   000000D8   0xE0A8             B.N      ??CTR_LP_8
     83                }
     84                else
     85                {
     86                  /* DIR = 1 */
     87          
     88                  /* DIR = 1 & CTR_RX       => SETUP or OUT int */
     89                  /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
     90          
     91                  wEPVal = _GetENDPOINT(ENDP0);
   \                     ??CTR_LP_3: (+1)
   \   000000DA   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     92                  
     93                  if ((wEPVal &EP_SETUP) != 0)
   \   000000E2   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000E6   0x0500             LSLS     R0,R0,#+20
   \   000000E8   0xD52F             BPL.N    ??CTR_LP_9
     94                  {
     95                    _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
   \   000000EA   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0xF640 0x718F      MOVW     R1,#+3983
   \   000000F2   0x4008             ANDS     R0,R1,R0
   \   000000F4   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   000000F6   0x6008             STR      R0,[R1, #+0]
     96                    Setup0_Process();
   \   000000F8   0x.... 0x....      BL       Setup0_Process
     97                    /* before terminate set Tx & Rx status */
     98          
     99          		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
   \   000000FC   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   000000FE   0x6809             LDR      R1,[R1, #+0]
   \   00000100   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000102   0xF64B 0x72BF      MOVW     R2,#+49087
   \   00000106   0x4011             ANDS     R1,R2,R1
   \   00000108   0x0008             MOVS     R0,R1
   \   0000010A   0x....             LDR.N    R1,??DataTable1_4
   \   0000010C   0x8809             LDRH     R1,[R1, #+0]
   \   0000010E   0x04C9             LSLS     R1,R1,#+19
   \   00000110   0xD501             BPL.N    ??CTR_LP_10
   \   00000112   0xF490 0x5080      EORS     R0,R0,#0x1000
   \                     ??CTR_LP_10: (+1)
   \   00000116   0x....             LDR.N    R1,??DataTable1_4
   \   00000118   0x8809             LDRH     R1,[R1, #+0]
   \   0000011A   0x0489             LSLS     R1,R1,#+18
   \   0000011C   0xD501             BPL.N    ??CTR_LP_11
   \   0000011E   0xF490 0x5000      EORS     R0,R0,#0x2000
   \                     ??CTR_LP_11: (+1)
   \   00000122   0x....             LDR.N    R1,??DataTable1_5
   \   00000124   0x8809             LDRH     R1,[R1, #+0]
   \   00000126   0x06C9             LSLS     R1,R1,#+27
   \   00000128   0xD501             BPL.N    ??CTR_LP_12
   \   0000012A   0xF090 0x0010      EORS     R0,R0,#0x10
   \                     ??CTR_LP_12: (+1)
   \   0000012E   0x....             LDR.N    R1,??DataTable1_5
   \   00000130   0x8809             LDRH     R1,[R1, #+0]
   \   00000132   0x0689             LSLS     R1,R1,#+26
   \   00000134   0xD501             BPL.N    ??CTR_LP_13
   \   00000136   0xF090 0x0020      EORS     R0,R0,#0x20
   \                     ??CTR_LP_13: (+1)
   \   0000013A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013C   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   00000140   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000144   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   00000146   0x6008             STR      R0,[R1, #+0]
    100                    return;
   \   00000148   0xE070             B.N      ??CTR_LP_8
    101                  }
    102          
    103                  else if ((wEPVal & EP_CTR_RX) != 0)
   \                     ??CTR_LP_9: (+1)
   \   0000014A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000014E   0x0400             LSLS     R0,R0,#+16
   \   00000150   0xF57F 0xAF5A      BPL.W    ??CTR_LP_0
    104                  {
    105                    _ClearEP_CTR_RX(ENDP0);
   \   00000154   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   00000156   0x6800             LDR      R0,[R0, #+0]
   \   00000158   0xF640 0x718F      MOVW     R1,#+3983
   \   0000015C   0x4008             ANDS     R0,R1,R0
   \   0000015E   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   00000160   0x6008             STR      R0,[R1, #+0]
    106                    Out0_Process();
   \   00000162   0x.... 0x....      BL       Out0_Process
    107                    /* before terminate set Tx & Rx status */
    108               
    109          		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
   \   00000166   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   00000168   0x6809             LDR      R1,[R1, #+0]
   \   0000016A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000016C   0xF64B 0x72BF      MOVW     R2,#+49087
   \   00000170   0x4011             ANDS     R1,R2,R1
   \   00000172   0x0008             MOVS     R0,R1
   \   00000174   0x....             LDR.N    R1,??DataTable1_4
   \   00000176   0x8809             LDRH     R1,[R1, #+0]
   \   00000178   0x04C9             LSLS     R1,R1,#+19
   \   0000017A   0xD501             BPL.N    ??CTR_LP_14
   \   0000017C   0xF490 0x5080      EORS     R0,R0,#0x1000
   \                     ??CTR_LP_14: (+1)
   \   00000180   0x....             LDR.N    R1,??DataTable1_4
   \   00000182   0x8809             LDRH     R1,[R1, #+0]
   \   00000184   0x0489             LSLS     R1,R1,#+18
   \   00000186   0xD501             BPL.N    ??CTR_LP_15
   \   00000188   0xF490 0x5000      EORS     R0,R0,#0x2000
   \                     ??CTR_LP_15: (+1)
   \   0000018C   0x....             LDR.N    R1,??DataTable1_5
   \   0000018E   0x8809             LDRH     R1,[R1, #+0]
   \   00000190   0x06C9             LSLS     R1,R1,#+27
   \   00000192   0xD501             BPL.N    ??CTR_LP_16
   \   00000194   0xF090 0x0010      EORS     R0,R0,#0x10
   \                     ??CTR_LP_16: (+1)
   \   00000198   0x....             LDR.N    R1,??DataTable1_5
   \   0000019A   0x8809             LDRH     R1,[R1, #+0]
   \   0000019C   0x0689             LSLS     R1,R1,#+26
   \   0000019E   0xD501             BPL.N    ??CTR_LP_17
   \   000001A0   0xF090 0x0020      EORS     R0,R0,#0x20
   \                     ??CTR_LP_17: (+1)
   \   000001A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001A6   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   000001AA   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001AE   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   000001B0   0x6008             STR      R0,[R1, #+0]
    110                    return;
   \   000001B2   0xE03B             B.N      ??CTR_LP_8
    111                  }
    112                }
    113              }/* if(EPindex == 0) */
    114              else
    115              {
    116                /* Decode and service non control endpoints interrupt  */
    117          
    118                /* process related endpoint register */
    119                wEPVal = _GetENDPOINT(EPindex);
   \                     ??CTR_LP_2: (+1)
   \   000001B4   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   000001B6   0x....             LDR.N    R1,??DataTable1_2
   \   000001B8   0x7809             LDRB     R1,[R1, #+0]
   \   000001BA   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000001BE   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    120                if ((wEPVal & EP_CTR_RX) != 0)
   \   000001C2   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001C6   0x0400             LSLS     R0,R0,#+16
   \   000001C8   0xD514             BPL.N    ??CTR_LP_18
    121                {
    122                  /* clear int flag */
    123                  _ClearEP_CTR_RX(EPindex);
   \   000001CA   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   000001CC   0x....             LDR.N    R1,??DataTable1_2
   \   000001CE   0x7809             LDRB     R1,[R1, #+0]
   \   000001D0   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000001D4   0xF640 0x718F      MOVW     R1,#+3983
   \   000001D8   0x4008             ANDS     R0,R1,R0
   \   000001DA   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   000001DC   0x....             LDR.N    R2,??DataTable1_2
   \   000001DE   0x7812             LDRB     R2,[R2, #+0]
   \   000001E0   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    124          
    125                  /* call OUT service function */
    126                  (*pEpInt_OUT[EPindex-1])();
   \   000001E4   0x....             LDR.N    R0,??DataTable1_6
   \   000001E6   0x....             LDR.N    R1,??DataTable1_2
   \   000001E8   0x7809             LDRB     R1,[R1, #+0]
   \   000001EA   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   000001EE   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   000001F2   0x4780             BLX      R0
    127          
    128                } /* if((wEPVal & EP_CTR_RX) */
    129          
    130                if ((wEPVal & EP_CTR_TX) != 0)
   \                     ??CTR_LP_18: (+1)
   \   000001F4   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001F8   0x0600             LSLS     R0,R0,#+24
   \   000001FA   0xF57F 0xAF05      BPL.W    ??CTR_LP_0
    131                {
    132                  /* clear int flag */
    133                  _ClearEP_CTR_TX(EPindex);
   \   000001FE   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   00000200   0x....             LDR.N    R1,??DataTable1_2
   \   00000202   0x7809             LDRB     R1,[R1, #+0]
   \   00000204   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000208   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000020A   0xF648 0x710F      MOVW     R1,#+36623
   \   0000020E   0x4008             ANDS     R0,R1,R0
   \   00000210   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   00000212   0x....             LDR.N    R2,??DataTable1_2
   \   00000214   0x7812             LDRB     R2,[R2, #+0]
   \   00000216   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    134          
    135                  /* call IN service function */
    136                  (*pEpInt_IN[EPindex-1])();
   \   0000021A   0x....             LDR.N    R0,??DataTable1_7
   \   0000021C   0x....             LDR.N    R1,??DataTable1_2
   \   0000021E   0x7809             LDRB     R1,[R1, #+0]
   \   00000220   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   00000224   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000228   0x4780             BLX      R0
   \   0000022A   0xE6ED             B.N      ??CTR_LP_0
    137                } /* if((wEPVal & EP_CTR_TX) != 0) */
    138          
    139              }/* if(EPindex == 0) else */
    140          
    141            }/* while(...) */
    142          }
   \                     ??CTR_LP_1: (+1)
   \                     ??CTR_LP_8: (+1)
   \   0000022C   0xBD01             POP      {R0,PC}          ;; return
    143          
    144          /*******************************************************************************
    145          * Function Name  : CTR_HP.
    146          * Description    : High Priority Endpoint Correct Transfer interrupt's service 
    147          *                  routine.
    148          * Input          : None.
    149          * Output         : None.
    150          * Return         : None.
    151          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    152          void CTR_HP(void)
    153          {
   \                     CTR_HP: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    154            uint32_t wEPVal = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    155          
    156            while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   \                     ??CTR_HP_0: (+1)
   \   00000004   0x....             LDR.N    R0,??DataTable1  ;; 0x40005c44
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable1_1
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
   \   0000000C   0x0400             LSLS     R0,R0,#+16
   \   0000000E   0xD541             BPL.N    ??CTR_HP_1
    157            {
    158              _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
   \   00000010   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000014   0x....             LDR.N    R1,??DataTable1  ;; 0x40005c44
   \   00000016   0x6008             STR      R0,[R1, #+0]
    159              /* extract highest priority endpoint number */
    160              EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
   \   00000018   0x....             LDR.N    R0,??DataTable1_1
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000020   0x....             LDR.N    R1,??DataTable1_2
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    161              /* process related endpoint register */
    162              wEPVal = _GetENDPOINT(EPindex);
   \   00000024   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   00000026   0x....             LDR.N    R1,??DataTable1_2
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0x0004             MOVS     R4,R0
    163              if ((wEPVal & EP_CTR_RX) != 0)
   \   00000032   0x0420             LSLS     R0,R4,#+16
   \   00000034   0xD515             BPL.N    ??CTR_HP_2
    164              {
    165                /* clear int flag */
    166                _ClearEP_CTR_RX(EPindex);
   \   00000036   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   00000038   0x....             LDR.N    R1,??DataTable1_2
   \   0000003A   0x7809             LDRB     R1,[R1, #+0]
   \   0000003C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000040   0xF640 0x718F      MOVW     R1,#+3983
   \   00000044   0x4008             ANDS     R0,R1,R0
   \   00000046   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   00000048   0x....             LDR.N    R2,??DataTable1_2
   \   0000004A   0x7812             LDRB     R2,[R2, #+0]
   \   0000004C   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    167          
    168                /* call OUT service function */
    169                (*pEpInt_OUT[EPindex-1])();
   \   00000050   0x....             LDR.N    R0,??DataTable1_6
   \   00000052   0x....             LDR.N    R1,??DataTable1_2
   \   00000054   0x7809             LDRB     R1,[R1, #+0]
   \   00000056   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   0000005A   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   0000005E   0x4780             BLX      R0
   \   00000060   0xE7D0             B.N      ??CTR_HP_0
    170          
    171              } /* if((wEPVal & EP_CTR_RX) */
    172              else if ((wEPVal & EP_CTR_TX) != 0)
   \                     ??CTR_HP_2: (+1)
   \   00000062   0x0620             LSLS     R0,R4,#+24
   \   00000064   0xD5CE             BPL.N    ??CTR_HP_0
    173              {
    174                /* clear int flag */
    175                _ClearEP_CTR_TX(EPindex);
   \   00000066   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40005c00
   \   00000068   0x....             LDR.N    R1,??DataTable1_2
   \   0000006A   0x7809             LDRB     R1,[R1, #+0]
   \   0000006C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0xF648 0x710F      MOVW     R1,#+36623
   \   00000076   0x4008             ANDS     R0,R1,R0
   \   00000078   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40005c00
   \   0000007A   0x....             LDR.N    R2,??DataTable1_2
   \   0000007C   0x7812             LDRB     R2,[R2, #+0]
   \   0000007E   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    176          
    177                /* call IN service function */
    178                (*pEpInt_IN[EPindex-1])();
   \   00000082   0x....             LDR.N    R0,??DataTable1_7
   \   00000084   0x....             LDR.N    R1,??DataTable1_2
   \   00000086   0x7809             LDRB     R1,[R1, #+0]
   \   00000088   0xEB10 0x0081      ADDS     R0,R0,R1, LSL #+2
   \   0000008C   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000090   0x4780             BLX      R0
   \   00000092   0xE7B7             B.N      ??CTR_HP_0
    179          
    180          
    181              } /* if((wEPVal & EP_CTR_TX) != 0) */
    182          
    183            }/* while(...) */
    184          }
   \                     ??CTR_HP_1: (+1)
   \   00000094   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40005C44         DC32     0x40005c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     wIstr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     EPindex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40005C00         DC32     0x40005c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     SaveRState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     SaveTState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     pEpInt_OUT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     pEpInt_IN
    185          
    186          #endif  /* STM32F10X_CL */
    187          
    188          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CTR_HP
         8   -- Indirect call
       8   CTR_LP
         8   -- Indirect call
         8   -> In0_Process
         8   -> Out0_Process
         8   -> Setup0_Process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
     150  CTR_HP
     558  CTR_LP
       2  SaveRState
       2  SaveTState

 
   4 bytes in section .bss
 740 bytes in section .text
 
 740 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
