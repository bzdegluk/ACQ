###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_regs.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_regs.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\usb_regs.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\usb_regs.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_regs.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_regs.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : Interface functions to USB cell registers
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #ifndef STM32F10X_CL
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "usb_lib.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          /* Private variables ---------------------------------------------------------*/
     24          /* Extern variables ----------------------------------------------------------*/
     25          /* Private function prototypes -----------------------------------------------*/
     26          /* Private functions ---------------------------------------------------------*/
     27          
     28          /*******************************************************************************
     29          * Function Name  : SetCNTR.
     30          * Description    : Set the CNTR register value.
     31          * Input          : wRegValue: new register value.
     32          * Output         : None.
     33          * Return         : None.
     34          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     35          void SetCNTR(uint16_t wRegValue)
     36          {
     37            _SetCNTR(wRegValue);
   \                     SetCNTR: (+1)
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable55  ;; 0x40005c40
   \   00000006   0x6008             STR      R0,[R1, #+0]
     38          }
   \   00000008   0x4770             BX       LR               ;; return
     39          
     40          /*******************************************************************************
     41          * Function Name  : GetCNTR.
     42          * Description    : returns the CNTR register value.
     43          * Input          : None.
     44          * Output         : None.
     45          * Return         : CNTR register Value.
     46          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     47          uint16_t GetCNTR(void)
     48          {
     49            return(_GetCNTR());
   \                     GetCNTR: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40005c40
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x4770             BX       LR               ;; return
     50          }
     51          
     52          /*******************************************************************************
     53          * Function Name  : SetISTR.
     54          * Description    : Set the ISTR register value.
     55          * Input          : wRegValue: new register value.
     56          * Output         : None.
     57          * Return         : None.
     58          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     59          void SetISTR(uint16_t wRegValue)
     60          {
     61            _SetISTR(wRegValue);
   \                     SetISTR: (+1)
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable55_1  ;; 0x40005c44
   \   00000006   0x6008             STR      R0,[R1, #+0]
     62          }
   \   00000008   0x4770             BX       LR               ;; return
     63          
     64          /*******************************************************************************
     65          * Function Name  : GetISTR
     66          * Description    : Returns the ISTR register value.
     67          * Input          : None.
     68          * Output         : None.
     69          * Return         : ISTR register Value
     70          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     71          uint16_t GetISTR(void)
     72          {
     73            return(_GetISTR());
   \                     GetISTR: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40005c44
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x4770             BX       LR               ;; return
     74          }
     75          
     76          /*******************************************************************************
     77          * Function Name  : GetFNR
     78          * Description    : Returns the FNR register value.
     79          * Input          : None.
     80          * Output         : None.
     81          * Return         : FNR register Value
     82          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     83          uint16_t GetFNR(void)
     84          {
     85            return(_GetFNR());
   \                     GetFNR: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40005c48
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x4770             BX       LR               ;; return
     86          }
     87          
     88          /*******************************************************************************
     89          * Function Name  : SetDADDR
     90          * Description    : Set the DADDR register value.
     91          * Input          : wRegValue: new register value.
     92          * Output         : None.
     93          * Return         : None.
     94          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     95          void SetDADDR(uint16_t wRegValue)
     96          {
     97            _SetDADDR(wRegValue);
   \                     SetDADDR: (+1)
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable55_3  ;; 0x40005c4c
   \   00000006   0x6008             STR      R0,[R1, #+0]
     98          }
   \   00000008   0x4770             BX       LR               ;; return
     99          
    100          /*******************************************************************************
    101          * Function Name  : GetDADDR
    102          * Description    : Returns the DADDR register value.
    103          * Input          : None.
    104          * Output         : None.
    105          * Return         : DADDR register Value
    106          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          uint16_t GetDADDR(void)
    108          {
    109            return(_GetDADDR());
   \                     GetDADDR: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40005c4c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x4770             BX       LR               ;; return
    110          }
    111          
    112          /*******************************************************************************
    113          * Function Name  : SetBTABLE
    114          * Description    : Set the BTABLE.
    115          * Input          : wRegValue: New register value.
    116          * Output         : None.
    117          * Return         : None.
    118          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    119          void SetBTABLE(uint16_t wRegValue)
    120          {
    121            _SetBTABLE(wRegValue);
   \                     SetBTABLE: (+1)
   \   00000000   0xF64F 0x71F8      MOVW     R1,#+65528
   \   00000004   0x4001             ANDS     R1,R1,R0
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable55_4  ;; 0x40005c50
   \   0000000A   0x6011             STR      R1,[R2, #+0]
    122          }
   \   0000000C   0x4770             BX       LR               ;; return
    123          
    124          /*******************************************************************************
    125          * Function Name  : GetBTABLE.
    126          * Description    : Returns the BTABLE register value.
    127          * Input          : None. 
    128          * Output         : None.
    129          * Return         : BTABLE address.
    130          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    131          uint16_t GetBTABLE(void)
    132          {
    133            return(_GetBTABLE());
   \                     GetBTABLE: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x4770             BX       LR               ;; return
    134          }
    135          
    136          /*******************************************************************************
    137          * Function Name  : SetENDPOINT
    138          * Description    : Set the Endpoint register value.
    139          * Input          : bEpNum: Endpoint Number. 
    140          *                  wRegValue.
    141          * Output         : None.
    142          * Return         : None.
    143          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    144          void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
    145          {
    146            _SetENDPOINT(bEpNum, wRegValue);
   \                     SetENDPOINT: (+1)
   \   00000000   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    147          }
   \   0000000C   0x4770             BX       LR               ;; return
    148          
    149          /*******************************************************************************
    150          * Function Name  : GetENDPOINT
    151          * Description    : Return the Endpoint register value.
    152          * Input          : bEpNum: Endpoint Number. 
    153          * Output         : None.
    154          * Return         : Endpoint register value.
    155          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    156          uint16_t GetENDPOINT(uint8_t bEpNum)
    157          {
    158            return(_GetENDPOINT(bEpNum));
   \                     GetENDPOINT: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4770             BX       LR               ;; return
    159          }
    160          
    161          /*******************************************************************************
    162          * Function Name  : SetEPType
    163          * Description    : sets the type in the endpoint register.
    164          * Input          : bEpNum: Endpoint Number. 
    165          *                  wType: type definition.
    166          * Output         : None.
    167          * Return         : None.
    168          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    169          void SetEPType(uint8_t bEpNum, uint16_t wType)
    170          {
    171            _SetEPType(bEpNum, wType);
   \                     SetEPType: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000A   0xF648 0x138F      MOVW     R3,#+35215
   \   0000000E   0x401A             ANDS     R2,R3,R2
   \   00000010   0x430A             ORRS     R2,R1,R2
   \   00000012   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000014   0x.... 0x....      LDR.W    R3,??DataTable55_5  ;; 0x40005c00
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    172          }
   \   0000001E   0x4770             BX       LR               ;; return
    173          
    174          /*******************************************************************************
    175          * Function Name  : GetEPType
    176          * Description    : Returns the endpoint type.
    177          * Input          : bEpNum: Endpoint Number. 
    178          * Output         : None.
    179          * Return         : Endpoint Type
    180          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          uint16_t GetEPType(uint8_t bEpNum)
    182          {
    183            return(_GetEPType(bEpNum));
   \                     GetEPType: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xF410 0x60C0      ANDS     R0,R0,#0x600
   \   0000000E   0x4770             BX       LR               ;; return
    184          }
    185          
    186          /*******************************************************************************
    187          * Function Name  : SetEPTxStatus
    188          * Description    : Set the status of Tx endpoint.
    189          * Input          : bEpNum: Endpoint Number. 
    190          *                  wState: new state.
    191          * Output         : None.
    192          * Return         : None.
    193          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
    195          {
   \                     SetEPTxStatus: (+1)
   \   00000000   0xB410             PUSH     {R4}
    196            _SetEPTxStatus(bEpNum, wState);
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable55_5  ;; 0x40005c00
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000000C   0xF648 0x74BF      MOVW     R4,#+36799
   \   00000010   0x4023             ANDS     R3,R4,R3
   \   00000012   0x001A             MOVS     R2,R3
   \   00000014   0x06CB             LSLS     R3,R1,#+27
   \   00000016   0xD501             BPL.N    ??SetEPTxStatus_0
   \   00000018   0xF092 0x0210      EORS     R2,R2,#0x10
   \                     ??SetEPTxStatus_0: (+1)
   \   0000001C   0x068B             LSLS     R3,R1,#+26
   \   0000001E   0xD501             BPL.N    ??SetEPTxStatus_1
   \   00000020   0xF092 0x0220      EORS     R2,R2,#0x20
   \                     ??SetEPTxStatus_1: (+1)
   \   00000024   0xF442 0x4200      ORR      R2,R2,#0x8000
   \   00000028   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000002C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable55_5  ;; 0x40005c00
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    197          }
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0x4770             BX       LR               ;; return
    198          
    199          /*******************************************************************************
    200          * Function Name  : SetEPRxStatus
    201          * Description    : Set the status of Rx endpoint.
    202          * Input          : bEpNum: Endpoint Number. 
    203          *                  wState: new state.
    204          * Output         : None.
    205          * Return         : None.
    206          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    207          void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
    208          {
   \                     SetEPRxStatus: (+1)
   \   00000000   0xB410             PUSH     {R4}
    209            _SetEPRxStatus(bEpNum, wState);
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable55_5  ;; 0x40005c00
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000000C   0xF64B 0x748F      MOVW     R4,#+49039
   \   00000010   0x4023             ANDS     R3,R4,R3
   \   00000012   0x001A             MOVS     R2,R3
   \   00000014   0x04CB             LSLS     R3,R1,#+19
   \   00000016   0xD501             BPL.N    ??SetEPRxStatus_0
   \   00000018   0xF492 0x5280      EORS     R2,R2,#0x1000
   \                     ??SetEPRxStatus_0: (+1)
   \   0000001C   0x048B             LSLS     R3,R1,#+18
   \   0000001E   0xD501             BPL.N    ??SetEPRxStatus_1
   \   00000020   0xF492 0x5200      EORS     R2,R2,#0x2000
   \                     ??SetEPRxStatus_1: (+1)
   \   00000024   0xF442 0x4200      ORR      R2,R2,#0x8000
   \   00000028   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000002C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable55_5  ;; 0x40005c00
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    210          }
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0x4770             BX       LR               ;; return
    211          
    212          /*******************************************************************************
    213          * Function Name  : SetDouBleBuffEPStall
    214          * Description    : sets the status for Double Buffer Endpoint to STALL
    215          * Input          : bEpNum: Endpoint Number. 
    216          *                  bDir: Endpoint direction.
    217          * Output         : None.
    218          * Return         : None.
    219          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    220          void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
    221          {
   \                     SetDouBleBuffEPStall: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    222            uint16_t Endpoint_DTOG_Status;
    223            Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       GetENDPOINT
   \   0000000E   0x0006             MOVS     R6,R0
    224            if (bDir == EP_DBUF_OUT)
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D01             CMP      R5,#+1
   \   00000014   0xD108             BNE.N    ??SetDouBleBuffEPStall_0
    225            { /* OUT double buffered endpoint */
    226              _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
   \   00000016   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000018   0xF436 0x5080      BICS     R0,R6,#0x1000
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000026   0xE00A             B.N      ??SetDouBleBuffEPStall_1
    227            }
    228            else if (bDir == EP_DBUF_IN)
   \                     ??SetDouBleBuffEPStall_0: (+1)
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D02             CMP      R5,#+2
   \   0000002C   0xD107             BNE.N    ??SetDouBleBuffEPStall_1
    229            { /* IN double buffered endpoint */
    230              _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
   \   0000002E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000030   0xF036 0x0010      BICS     R0,R6,#0x10
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
    231            }
    232          }
   \                     ??SetDouBleBuffEPStall_1: (+1)
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    233          
    234          /*******************************************************************************
    235          * Function Name  : GetEPTxStatus
    236          * Description    : Returns the endpoint Tx status.
    237          * Input          : bEpNum: Endpoint Number. 
    238          * Output         : None.
    239          * Return         : Endpoint TX Status
    240          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    241          uint16_t GetEPTxStatus(uint8_t bEpNum)
    242          {
    243            return(_GetEPTxStatus(bEpNum));
   \                     GetEPTxStatus: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xF010 0x0030      ANDS     R0,R0,#0x30
   \   0000000E   0x4770             BX       LR               ;; return
    244          }
    245          
    246          /*******************************************************************************
    247          * Function Name  : GetEPRxStatus
    248          * Description    : Returns the endpoint Rx status.
    249          * Input          : bEpNum: Endpoint Number. 
    250          * Output         : None.
    251          * Return         : Endpoint RX Status
    252          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    253          uint16_t GetEPRxStatus(uint8_t bEpNum)
    254          {
    255            return(_GetEPRxStatus(bEpNum));
   \                     GetEPRxStatus: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xF410 0x5040      ANDS     R0,R0,#0x3000
   \   0000000E   0x4770             BX       LR               ;; return
    256          }
    257          
    258          /*******************************************************************************
    259          * Function Name  : SetEPTxValid
    260          * Description    : Valid the endpoint Tx Status.
    261          * Input          : bEpNum: Endpoint Number.  
    262          * Output         : None.
    263          * Return         : None.
    264          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    265          void SetEPTxValid(uint8_t bEpNum)
    266          {
    267            _SetEPTxStatus(bEpNum, EP_TX_VALID);
   \                     SetEPTxValid: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000A   0xF648 0x73BF      MOVW     R3,#+36799
   \   0000000E   0x401A             ANDS     R2,R3,R2
   \   00000010   0x0011             MOVS     R1,R2
   \   00000012   0xF091 0x0110      EORS     R1,R1,#0x10
   \   00000016   0xF091 0x0120      EORS     R1,R1,#0x20
   \   0000001A   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   0000001E   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    268          }
   \   0000002E   0x4770             BX       LR               ;; return
    269          
    270          /*******************************************************************************
    271          * Function Name  : SetEPRxValid
    272          * Description    : Valid the endpoint Rx Status.
    273          * Input          : bEpNum: Endpoint Number. 
    274          * Output         : None.
    275          * Return         : None.
    276          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    277          void SetEPRxValid(uint8_t bEpNum)
    278          {
    279            _SetEPRxStatus(bEpNum, EP_RX_VALID);
   \                     SetEPRxValid: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000A   0xF64B 0x738F      MOVW     R3,#+49039
   \   0000000E   0x401A             ANDS     R2,R3,R2
   \   00000010   0x0011             MOVS     R1,R2
   \   00000012   0xF491 0x5180      EORS     R1,R1,#0x1000
   \   00000016   0xF491 0x5100      EORS     R1,R1,#0x2000
   \   0000001A   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   0000001E   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    280          }
   \   0000002E   0x4770             BX       LR               ;; return
    281          
    282          /*******************************************************************************
    283          * Function Name  : SetEP_KIND
    284          * Description    : Clear the EP_KIND bit.
    285          * Input          : bEpNum: Endpoint Number. 
    286          * Output         : None.
    287          * Return         : None.
    288          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    289          void SetEP_KIND(uint8_t bEpNum)
    290          {
    291            _SetEP_KIND(bEpNum);
   \                     SetEP_KIND: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x728F      MOVW     R2,#+36751
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4101      ORR      R1,R1,#0x8100
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    292          }
   \   00000024   0x4770             BX       LR               ;; return
    293          
    294          /*******************************************************************************
    295          * Function Name  : ClearEP_KIND
    296          * Description    : set the  EP_KIND bit.
    297          * Input          : bEpNum: Endpoint Number. 
    298          * Output         : None.
    299          * Return         : None.
    300          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    301          void ClearEP_KIND(uint8_t bEpNum)
    302          {
    303            _ClearEP_KIND(bEpNum);
   \                     ClearEP_KIND: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x628F      MOVW     R2,#+36495
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    304          }
   \   00000024   0x4770             BX       LR               ;; return
    305          /*******************************************************************************
    306          * Function Name  : Clear_Status_Out
    307          * Description    : Clear the Status Out of the related Endpoint
    308          * Input          : bEpNum: Endpoint Number. 
    309          * Output         : None.
    310          * Return         : None.
    311          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    312          void Clear_Status_Out(uint8_t bEpNum)
    313          {
    314            _ClearEP_KIND(bEpNum);
   \                     Clear_Status_Out: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x628F      MOVW     R2,#+36495
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    315          }
   \   00000024   0x4770             BX       LR               ;; return
    316          /*******************************************************************************
    317          * Function Name  : Set_Status_Out
    318          * Description    : Set the Status Out of the related Endpoint
    319          * Input          : bEpNum: Endpoint Number. 
    320          * Output         : None.
    321          * Return         : None.
    322          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    323          void Set_Status_Out(uint8_t bEpNum)
    324          {
    325            _SetEP_KIND(bEpNum);
   \                     Set_Status_Out: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x728F      MOVW     R2,#+36751
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4101      ORR      R1,R1,#0x8100
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    326          }
   \   00000024   0x4770             BX       LR               ;; return
    327          /*******************************************************************************
    328          * Function Name  : SetEPDoubleBuff
    329          * Description    : Enable the double buffer feature for the endpoint. 
    330          * Input          : bEpNum: Endpoint Number. 
    331          * Output         : None.
    332          * Return         : None.
    333          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    334          void SetEPDoubleBuff(uint8_t bEpNum)
    335          {
    336            _SetEP_KIND(bEpNum);
   \                     SetEPDoubleBuff: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x728F      MOVW     R2,#+36751
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4101      ORR      R1,R1,#0x8100
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    337          }
   \   00000024   0x4770             BX       LR               ;; return
    338          /*******************************************************************************
    339          * Function Name  : ClearEPDoubleBuff
    340          * Description    : Disable the double buffer feature for the endpoint. 
    341          * Input          : bEpNum: Endpoint Number. 
    342          * Output         : None.
    343          * Return         : None.
    344          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    345          void ClearEPDoubleBuff(uint8_t bEpNum)
    346          {
    347            _ClearEP_KIND(bEpNum);
   \                     ClearEPDoubleBuff: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x628F      MOVW     R2,#+36495
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    348          }
   \   00000024   0x4770             BX       LR               ;; return
    349          /*******************************************************************************
    350          * Function Name  : GetTxStallStatus
    351          * Description    : Returns the Stall status of the Tx endpoint.
    352          * Input          : bEpNum: Endpoint Number. 
    353          * Output         : None.
    354          * Return         : Tx Stall status.
    355          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    356          uint16_t GetTxStallStatus(uint8_t bEpNum)
    357          {
    358            return(_GetTxStallStatus(bEpNum));
   \                     GetTxStallStatus: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xF010 0x0030      ANDS     R0,R0,#0x30
   \   0000000E   0x2810             CMP      R0,#+16
   \   00000010   0xD101             BNE.N    ??GetTxStallStatus_0
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE000             B.N      ??GetTxStallStatus_1
   \                     ??GetTxStallStatus_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??GetTxStallStatus_1: (+1)
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x4770             BX       LR               ;; return
    359          }
    360          /*******************************************************************************
    361          * Function Name  : GetRxStallStatus
    362          * Description    : Returns the Stall status of the Rx endpoint. 
    363          * Input          : bEpNum: Endpoint Number. 
    364          * Output         : None.
    365          * Return         : Rx Stall status.
    366          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    367          uint16_t GetRxStallStatus(uint8_t bEpNum)
    368          {
    369            return(_GetRxStallStatus(bEpNum));
   \                     GetRxStallStatus: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xF410 0x5040      ANDS     R0,R0,#0x3000
   \   0000000E   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000012   0xD101             BNE.N    ??GetRxStallStatus_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??GetRxStallStatus_1
   \                     ??GetRxStallStatus_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??GetRxStallStatus_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0x4770             BX       LR               ;; return
    370          }
    371          /*******************************************************************************
    372          * Function Name  : ClearEP_CTR_RX
    373          * Description    : Clear the CTR_RX bit.
    374          * Input          : bEpNum: Endpoint Number. 
    375          * Output         : None.
    376          * Return         : None.
    377          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    378          void ClearEP_CTR_RX(uint8_t bEpNum)
    379          {
    380            _ClearEP_CTR_RX(bEpNum);
   \                     ClearEP_CTR_RX: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF640 0x728F      MOVW     R2,#+3983
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    381          }
   \   0000001A   0x4770             BX       LR               ;; return
    382          /*******************************************************************************
    383          * Function Name  : ClearEP_CTR_TX
    384          * Description    : Clear the CTR_TX bit.
    385          * Input          : bEpNum: Endpoint Number. 
    386          * Output         : None.
    387          * Return         : None.
    388          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    389          void ClearEP_CTR_TX(uint8_t bEpNum)
    390          {
    391            _ClearEP_CTR_TX(bEpNum);
   \                     ClearEP_CTR_TX: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000C   0xF648 0x720F      MOVW     R2,#+36623
   \   00000010   0x4011             ANDS     R1,R2,R1
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    392          }
   \   0000001C   0x4770             BX       LR               ;; return
    393          /*******************************************************************************
    394          * Function Name  : ToggleDTOG_RX
    395          * Description    : Toggle the DTOG_RX bit.
    396          * Input          : bEpNum: Endpoint Number. 
    397          * Output         : None.
    398          * Return         : None.
    399          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    400          void ToggleDTOG_RX(uint8_t bEpNum)
    401          {
    402            _ToggleDTOG_RX(bEpNum);
   \                     ToggleDTOG_RX: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x728F      MOVW     R2,#+36751
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4140      ORR      R1,R1,#0xC000
   \   00000014   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    403          }
   \   00000022   0x4770             BX       LR               ;; return
    404          /*******************************************************************************
    405          * Function Name  : ToggleDTOG_TX
    406          * Description    : Toggle the DTOG_TX bit.
    407          * Input          : bEpNum: Endpoint Number. 
    408          * Output         : None.
    409          * Return         : None.
    410          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    411          void ToggleDTOG_TX(uint8_t bEpNum)
    412          {
    413            _ToggleDTOG_TX(bEpNum);
   \                     ToggleDTOG_TX: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0xF648 0x728F      MOVW     R2,#+36751
   \   0000000E   0x4011             ANDS     R1,R2,R1
   \   00000010   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000014   0xF051 0x01C0      ORRS     R1,R1,#0xC0
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    414          }
   \   00000022   0x4770             BX       LR               ;; return
    415          /*******************************************************************************
    416          * Function Name  : ClearDTOG_RX.
    417          * Description    : Clear the DTOG_RX bit.
    418          * Input          : bEpNum: Endpoint Number. 
    419          * Output         : None.
    420          * Return         : None.
    421          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    422          void ClearDTOG_RX(uint8_t bEpNum)
    423          {
    424            _ClearDTOG_RX(bEpNum);
   \                     ClearDTOG_RX: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x0449             LSLS     R1,R1,#+17
   \   0000000C   0xD510             BPL.N    ??ClearDTOG_RX_0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000018   0xF648 0x728F      MOVW     R2,#+36751
   \   0000001C   0x4011             ANDS     R1,R2,R1
   \   0000001E   0xF441 0x4140      ORR      R1,R1,#0xC000
   \   00000022   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    425          }
   \                     ??ClearDTOG_RX_0: (+1)
   \   00000030   0x4770             BX       LR               ;; return
    426          /*******************************************************************************
    427          * Function Name  : ClearDTOG_TX.
    428          * Description    : Clear the DTOG_TX bit.
    429          * Input          : bEpNum: Endpoint Number. 
    430          * Output         : None.
    431          * Return         : None.
    432          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    433          void ClearDTOG_TX(uint8_t bEpNum)
    434          {
    435            _ClearDTOG_TX(bEpNum);
   \                     ClearDTOG_TX: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x0649             LSLS     R1,R1,#+25
   \   0000000C   0xD510             BPL.N    ??ClearDTOG_TX_0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000018   0xF648 0x728F      MOVW     R2,#+36751
   \   0000001C   0x4011             ANDS     R1,R2,R1
   \   0000001E   0xF441 0x4100      ORR      R1,R1,#0x8000
   \   00000022   0xF051 0x01C0      ORRS     R1,R1,#0xC0
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    436          }
   \                     ??ClearDTOG_TX_0: (+1)
   \   00000030   0x4770             BX       LR               ;; return
    437          /*******************************************************************************
    438          * Function Name  : SetEPAddress
    439          * Description    : Set the endpoint address.
    440          * Input          : bEpNum: Endpoint Number.
    441          *                  bAddr: New endpoint address.
    442          * Output         : None.
    443          * Return         : None.
    444          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    445          void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
    446          {
    447            _SetEPAddress(bEpNum, bAddr);
   \                     SetEPAddress: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000A   0xF648 0x738F      MOVW     R3,#+36751
   \   0000000E   0x401A             ANDS     R2,R3,R2
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x430A             ORRS     R2,R1,R2
   \   00000014   0xF442 0x4200      ORR      R2,R2,#0x8000
   \   00000018   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable55_5  ;; 0x40005c00
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    448          }
   \   00000026   0x4770             BX       LR               ;; return
    449          /*******************************************************************************
    450          * Function Name  : GetEPAddress
    451          * Description    : Get the endpoint address.
    452          * Input          : bEpNum: Endpoint Number. 
    453          * Output         : None.
    454          * Return         : Endpoint address.
    455          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    456          uint8_t GetEPAddress(uint8_t bEpNum)
    457          {
    458            return(_GetEPAddress(bEpNum));
   \                     GetEPAddress: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_5  ;; 0x40005c00
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000A   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000000E   0x4770             BX       LR               ;; return
    459          }
    460          /*******************************************************************************
    461          * Function Name  : SetEPTxAddr
    462          * Description    : Set the endpoint Tx buffer address.
    463          * Input          : bEpNum: Endpoint Number.
    464          *                  wAddr: new address. 
    465          * Output         : None.
    466          * Return         : None.
    467          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    468          void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
    469          {
   \                     SetEPTxAddr: (+1)
   \   00000000   0xB410             PUSH     {R4}
    470            _SetEPTxAddr(bEpNum, wAddr);
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable55_4  ;; 0x40005c50
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable55_6  ;; 0x40006000
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x084C             LSRS     R4,R1,#+1
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x0064             LSLS     R4,R4,#+1
   \   0000001C   0xF843 0x4012      STR      R4,[R3, R2, LSL #+1]
    471          }
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    472          /*******************************************************************************
    473          * Function Name  : SetEPRxAddr
    474          * Description    : Set the endpoint Rx buffer address.
    475          * Input          : bEpNum: Endpoint Number.
    476          *                  wAddr: new address.
    477          * Output         : None.
    478          * Return         : None.
    479          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    480          void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
    481          {
   \                     SetEPRxAddr: (+1)
   \   00000000   0xB410             PUSH     {R4}
    482            _SetEPRxAddr(bEpNum, wAddr);
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable55_4  ;; 0x40005c50
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable55_7  ;; 0x40006008
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x084C             LSRS     R4,R1,#+1
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x0064             LSLS     R4,R4,#+1
   \   0000001C   0xF843 0x4012      STR      R4,[R3, R2, LSL #+1]
    483          }
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    484          /*******************************************************************************
    485          * Function Name  : GetEPTxAddr
    486          * Description    : Returns the endpoint Tx buffer address.
    487          * Input          : bEpNum: Endpoint Number. 
    488          * Output         : None.
    489          * Return         : Rx buffer address. 
    490          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    491          uint16_t GetEPTxAddr(uint8_t bEpNum)
    492          {
    493            return(_GetEPTxAddr(bEpNum));
   \                     GetEPTxAddr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable55_6  ;; 0x40006000
   \   00000012   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x4770             BX       LR               ;; return
    494          }
    495          /*******************************************************************************
    496          * Function Name  : GetEPRxAddr.
    497          * Description    : Returns the endpoint Rx buffer address.
    498          * Input          : bEpNum: Endpoint Number. 
    499          * Output         : None.
    500          * Return         : Rx buffer address.
    501          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    502          uint16_t GetEPRxAddr(uint8_t bEpNum)
    503          {
    504            return(_GetEPRxAddr(bEpNum));
   \                     GetEPRxAddr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable55_7  ;; 0x40006008
   \   00000012   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x4770             BX       LR               ;; return
    505          }
    506          /*******************************************************************************
    507          * Function Name  : SetEPTxCount.
    508          * Description    : Set the Tx count.
    509          * Input          : bEpNum: Endpoint Number.
    510          *                  wCount: new count value.
    511          * Output         : None.
    512          * Return         : None.
    513          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    514          void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
    515          {
    516            _SetEPTxCount(bEpNum, wCount);
   \                     SetEPTxCount: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable55_8  ;; 0x40006004
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0xF843 0x1012      STR      R1,[R3, R2, LSL #+1]
    517          }
   \   00000018   0x4770             BX       LR               ;; return
    518          /*******************************************************************************
    519          * Function Name  : SetEPCountRxReg.
    520          * Description    : Set the Count Rx Register value.
    521          * Input          : *pdwReg: point to the register.
    522          *                  wCount: the new register value.
    523          * Output         : None.
    524          * Return         : None.
    525          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    526          void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
    527          {
   \                     SetEPCountRxReg: (+1)
   \   00000000   0xB410             PUSH     {R4}
    528            _SetEPCountRxReg(dwReg, wCount);
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0x293F             CMP      R1,#+63
   \   00000006   0xDB0C             BLT.N    ??SetEPCountRxReg_0
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x094B             LSRS     R3,R1,#+5
   \   0000000C   0x001A             MOVS     R2,R3
   \   0000000E   0x231F             MOVS     R3,#+31
   \   00000010   0x4219             TST      R1,R3
   \   00000012   0xD100             BNE.N    ??SetEPCountRxReg_1
   \   00000014   0x1E52             SUBS     R2,R2,#+1
   \                     ??SetEPCountRxReg_1: (+1)
   \   00000016   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000018   0x0292             LSLS     R2,R2,#+10
   \   0000001A   0xF452 0x4200      ORRS     R2,R2,#0x8000
   \   0000001E   0x6002             STR      R2,[R0, #+0]
   \   00000020   0xE008             B.N      ??SetEPCountRxReg_2
   \                     ??SetEPCountRxReg_0: (+1)
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x084B             LSRS     R3,R1,#+1
   \   00000026   0x001A             MOVS     R2,R3
   \   00000028   0x07CB             LSLS     R3,R1,#+31
   \   0000002A   0xD500             BPL.N    ??SetEPCountRxReg_3
   \   0000002C   0x1C52             ADDS     R2,R2,#+1
   \                     ??SetEPCountRxReg_3: (+1)
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0292             LSLS     R2,R2,#+10
   \   00000032   0x6002             STR      R2,[R0, #+0]
    529          }
   \                     ??SetEPCountRxReg_2: (+1)
   \   00000034   0xBC10             POP      {R4}
   \   00000036   0x4770             BX       LR               ;; return
    530          /*******************************************************************************
    531          * Function Name  : SetEPRxCount
    532          * Description    : Set the Rx count.
    533          * Input          : bEpNum: Endpoint Number. 
    534          *                  wCount: the new count value.
    535          * Output         : None.
    536          * Return         : None.
    537          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    538          void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
    539          {
   \                     SetEPRxCount: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    540            _SetEPRxCount(bEpNum, wCount);
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable55_4  ;; 0x40005c50
   \   00000006   0x681B             LDR      R3,[R3, #+0]
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000010   0x.... 0x....      LDR.W    R4,??DataTable55_9  ;; 0x4000600c
   \   00000014   0xEB14 0x0343      ADDS     R3,R4,R3, LSL #+1
   \   00000018   0x001A             MOVS     R2,R3
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0x293F             CMP      R1,#+63
   \   0000001E   0xDB0C             BLT.N    ??SetEPRxCount_0
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x094C             LSRS     R4,R1,#+5
   \   00000024   0x0023             MOVS     R3,R4
   \   00000026   0x241F             MOVS     R4,#+31
   \   00000028   0x4221             TST      R1,R4
   \   0000002A   0xD100             BNE.N    ??SetEPRxCount_1
   \   0000002C   0x1E5B             SUBS     R3,R3,#+1
   \                     ??SetEPRxCount_1: (+1)
   \   0000002E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000030   0x029B             LSLS     R3,R3,#+10
   \   00000032   0xF453 0x4300      ORRS     R3,R3,#0x8000
   \   00000036   0x6013             STR      R3,[R2, #+0]
   \   00000038   0xE008             B.N      ??SetEPRxCount_2
   \                     ??SetEPRxCount_0: (+1)
   \   0000003A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003C   0x084C             LSRS     R4,R1,#+1
   \   0000003E   0x0023             MOVS     R3,R4
   \   00000040   0x07CC             LSLS     R4,R1,#+31
   \   00000042   0xD500             BPL.N    ??SetEPRxCount_3
   \   00000044   0x1C5B             ADDS     R3,R3,#+1
   \                     ??SetEPRxCount_3: (+1)
   \   00000046   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000048   0x029B             LSLS     R3,R3,#+10
   \   0000004A   0x6013             STR      R3,[R2, #+0]
    541          }
   \                     ??SetEPRxCount_2: (+1)
   \   0000004C   0xBC30             POP      {R4,R5}
   \   0000004E   0x4770             BX       LR               ;; return
    542          /*******************************************************************************
    543          * Function Name  : GetEPTxCount
    544          * Description    : Get the Tx count.
    545          * Input          : bEpNum: Endpoint Number. 
    546          * Output         : None
    547          * Return         : Tx count value.
    548          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    549          uint16_t GetEPTxCount(uint8_t bEpNum)
    550          {
    551            return(_GetEPTxCount(bEpNum));
   \                     GetEPTxCount: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable55_8  ;; 0x40006004
   \   00000012   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000016   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000018   0x0D80             LSRS     R0,R0,#+22
   \   0000001A   0x4770             BX       LR               ;; return
    552          }
    553          /*******************************************************************************
    554          * Function Name  : GetEPRxCount
    555          * Description    : Get the Rx count.
    556          * Input          : bEpNum: Endpoint Number. 
    557          * Output         : None.
    558          * Return         : Rx count value.
    559          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    560          uint16_t GetEPRxCount(uint8_t bEpNum)
    561          {
    562            return(_GetEPRxCount(bEpNum));
   \                     GetEPRxCount: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable55_4  ;; 0x40005c50
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000C   0x....             LDR.N    R1,??DataTable55_9  ;; 0x4000600c
   \   0000000E   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000012   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000014   0x0D80             LSRS     R0,R0,#+22
   \   00000016   0x4770             BX       LR               ;; return
    563          }
    564          /*******************************************************************************
    565          * Function Name  : SetEPDblBuffAddr
    566          * Description    : Set the addresses of the buffer 0 and 1.
    567          * Input          : bEpNum: Endpoint Number.  
    568          *                  wBuf0Addr: new address of buffer 0. 
    569          *                  wBuf1Addr: new address of buffer 1.
    570          * Output         : None.
    571          * Return         : None.
    572          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    573          void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
    574          {
   \                     SetEPDblBuffAddr: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    575            _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
   \   00000002   0x....             LDR.N    R3,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x681B             LDR      R3,[R3, #+0]
   \   00000006   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   0000000E   0x....             LDR.N    R4,??DataTable55_6  ;; 0x40006000
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x084D             LSRS     R5,R1,#+1
   \   00000014   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000016   0x006D             LSLS     R5,R5,#+1
   \   00000018   0xF844 0x5013      STR      R5,[R4, R3, LSL #+1]
   \   0000001C   0x....             LDR.N    R3,??DataTable55_4  ;; 0x40005c50
   \   0000001E   0x681B             LDR      R3,[R3, #+0]
   \   00000020   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000028   0x....             LDR.N    R4,??DataTable55_7  ;; 0x40006008
   \   0000002A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002C   0x0855             LSRS     R5,R2,#+1
   \   0000002E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000030   0x006D             LSLS     R5,R5,#+1
   \   00000032   0xF844 0x5013      STR      R5,[R4, R3, LSL #+1]
    576          }
   \   00000036   0xBC30             POP      {R4,R5}
   \   00000038   0x4770             BX       LR               ;; return
    577          /*******************************************************************************
    578          * Function Name  : SetEPDblBuf0Addr
    579          * Description    : Set the Buffer 1 address.
    580          * Input          : bEpNum: Endpoint Number
    581          *                  wBuf0Addr: new address.
    582          * Output         : None.
    583          * Return         : None.
    584          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    585          void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
    586          {
   \                     SetEPDblBuf0Addr: (+1)
   \   00000000   0xB410             PUSH     {R4}
    587            _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
   \   00000002   0x....             LDR.N    R2,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   0000000E   0x....             LDR.N    R3,??DataTable55_6  ;; 0x40006000
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x084C             LSRS     R4,R1,#+1
   \   00000014   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   0x0064             LSLS     R4,R4,#+1
   \   00000018   0xF843 0x4012      STR      R4,[R3, R2, LSL #+1]
    588          }
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    589          /*******************************************************************************
    590          * Function Name  : SetEPDblBuf1Addr
    591          * Description    : Set the Buffer 1 address.
    592          * Input          : bEpNum: Endpoint Number
    593          *                  wBuf1Addr: new address.
    594          * Output         : None.
    595          * Return         : None.
    596          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    597          void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
    598          {
   \                     SetEPDblBuf1Addr: (+1)
   \   00000000   0xB410             PUSH     {R4}
    599            _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
   \   00000002   0x....             LDR.N    R2,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   0000000E   0x....             LDR.N    R3,??DataTable55_7  ;; 0x40006008
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x084C             LSRS     R4,R1,#+1
   \   00000014   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   0x0064             LSLS     R4,R4,#+1
   \   00000018   0xF843 0x4012      STR      R4,[R3, R2, LSL #+1]
    600          }
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    601          /*******************************************************************************
    602          * Function Name  : GetEPDblBuf0Addr
    603          * Description    : Returns the address of the Buffer 0.
    604          * Input          : bEpNum: Endpoint Number.
    605          * Output         : None.
    606          * Return         : None.
    607          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    608          uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
    609          {
    610            return(_GetEPDblBuf0Addr(bEpNum));
   \                     GetEPDblBuf0Addr: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable55_4  ;; 0x40005c50
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000C   0x....             LDR.N    R1,??DataTable55_6  ;; 0x40006000
   \   0000000E   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x4770             BX       LR               ;; return
    611          }
    612          /*******************************************************************************
    613          * Function Name  : GetEPDblBuf1Addr
    614          * Description    : Returns the address of the Buffer 1.
    615          * Input          : bEpNum: Endpoint Number.
    616          * Output         : None.
    617          * Return         : Address of the Buffer 1.
    618          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    619          uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
    620          {
    621            return(_GetEPDblBuf1Addr(bEpNum));
   \                     GetEPDblBuf1Addr: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable55_4  ;; 0x40005c50
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000C   0x....             LDR.N    R1,??DataTable55_7  ;; 0x40006008
   \   0000000E   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x4770             BX       LR               ;; return
    622          }
    623          /*******************************************************************************
    624          * Function Name  : SetEPDblBuffCount
    625          * Description    : Set the number of bytes for a double Buffer 
    626          *                  endpoint.
    627          * Input          : bEpNum,bDir, wCount
    628          * Output         : None.
    629          * Return         : None.
    630          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    631          void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
    632          {
   \                     SetEPDblBuffCount: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    633            _SetEPDblBuffCount(bEpNum, bDir, wCount);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD123             BNE.N    ??SetEPDblBuffCount_0
   \   00000008   0x....             LDR.N    R4,??DataTable55_4  ;; 0x40005c50
   \   0000000A   0x6824             LDR      R4,[R4, #+0]
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xEB14 0x04C0      ADDS     R4,R4,R0, LSL #+3
   \   00000014   0x....             LDR.N    R5,??DataTable55_8  ;; 0x40006004
   \   00000016   0xEB15 0x0444      ADDS     R4,R5,R4, LSL #+1
   \   0000001A   0x0023             MOVS     R3,R4
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x2A3F             CMP      R2,#+63
   \   00000020   0xDB0C             BLT.N    ??SetEPDblBuffCount_1
   \   00000022   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000024   0x0955             LSRS     R5,R2,#+5
   \   00000026   0x002C             MOVS     R4,R5
   \   00000028   0x251F             MOVS     R5,#+31
   \   0000002A   0x422A             TST      R2,R5
   \   0000002C   0xD100             BNE.N    ??SetEPDblBuffCount_2
   \   0000002E   0x1E64             SUBS     R4,R4,#+1
   \                     ??SetEPDblBuffCount_2: (+1)
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0x02A4             LSLS     R4,R4,#+10
   \   00000034   0xF454 0x4400      ORRS     R4,R4,#0x8000
   \   00000038   0x601C             STR      R4,[R3, #+0]
   \   0000003A   0xE016             B.N      ??SetEPDblBuffCount_3
   \                     ??SetEPDblBuffCount_1: (+1)
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x0855             LSRS     R5,R2,#+1
   \   00000040   0x002C             MOVS     R4,R5
   \   00000042   0x07D5             LSLS     R5,R2,#+31
   \   00000044   0xD500             BPL.N    ??SetEPDblBuffCount_4
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??SetEPDblBuffCount_4: (+1)
   \   00000048   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004A   0x02A4             LSLS     R4,R4,#+10
   \   0000004C   0x601C             STR      R4,[R3, #+0]
   \   0000004E   0xE00C             B.N      ??SetEPDblBuffCount_3
   \                     ??SetEPDblBuffCount_0: (+1)
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD109             BNE.N    ??SetEPDblBuffCount_3
   \   00000056   0x....             LDR.N    R3,??DataTable55_4  ;; 0x40005c50
   \   00000058   0x681B             LDR      R3,[R3, #+0]
   \   0000005A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000062   0x....             LDR.N    R4,??DataTable55_8  ;; 0x40006004
   \   00000064   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000066   0xF844 0x2013      STR      R2,[R4, R3, LSL #+1]
   \                     ??SetEPDblBuffCount_3: (+1)
   \   0000006A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006C   0x2901             CMP      R1,#+1
   \   0000006E   0xD123             BNE.N    ??SetEPDblBuffCount_5
   \   00000070   0x....             LDR.N    R4,??DataTable55_4  ;; 0x40005c50
   \   00000072   0x6824             LDR      R4,[R4, #+0]
   \   00000074   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0xEB14 0x04C0      ADDS     R4,R4,R0, LSL #+3
   \   0000007C   0x....             LDR.N    R5,??DataTable55_9  ;; 0x4000600c
   \   0000007E   0xEB15 0x0444      ADDS     R4,R5,R4, LSL #+1
   \   00000082   0x0023             MOVS     R3,R4
   \   00000084   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000086   0x2A3F             CMP      R2,#+63
   \   00000088   0xDB0C             BLT.N    ??SetEPDblBuffCount_6
   \   0000008A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000008C   0x0955             LSRS     R5,R2,#+5
   \   0000008E   0x002C             MOVS     R4,R5
   \   00000090   0x251F             MOVS     R5,#+31
   \   00000092   0x422A             TST      R2,R5
   \   00000094   0xD100             BNE.N    ??SetEPDblBuffCount_7
   \   00000096   0x1E64             SUBS     R4,R4,#+1
   \                     ??SetEPDblBuffCount_7: (+1)
   \   00000098   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000009A   0x02A4             LSLS     R4,R4,#+10
   \   0000009C   0xF454 0x4400      ORRS     R4,R4,#0x8000
   \   000000A0   0x601C             STR      R4,[R3, #+0]
   \   000000A2   0xE016             B.N      ??SetEPDblBuffCount_8
   \                     ??SetEPDblBuffCount_6: (+1)
   \   000000A4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A6   0x0855             LSRS     R5,R2,#+1
   \   000000A8   0x002C             MOVS     R4,R5
   \   000000AA   0x07D5             LSLS     R5,R2,#+31
   \   000000AC   0xD500             BPL.N    ??SetEPDblBuffCount_9
   \   000000AE   0x1C64             ADDS     R4,R4,#+1
   \                     ??SetEPDblBuffCount_9: (+1)
   \   000000B0   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000B2   0x02A4             LSLS     R4,R4,#+10
   \   000000B4   0x601C             STR      R4,[R3, #+0]
   \   000000B6   0xE00C             B.N      ??SetEPDblBuffCount_8
   \                     ??SetEPDblBuffCount_5: (+1)
   \   000000B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BA   0x2902             CMP      R1,#+2
   \   000000BC   0xD109             BNE.N    ??SetEPDblBuffCount_8
   \   000000BE   0x....             LDR.N    R3,??DataTable55_4  ;; 0x40005c50
   \   000000C0   0x681B             LDR      R3,[R3, #+0]
   \   000000C2   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C6   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   000000CA   0x....             LDR.N    R4,??DataTable55_9  ;; 0x4000600c
   \   000000CC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000CE   0xF844 0x2013      STR      R2,[R4, R3, LSL #+1]
    634          }
   \                     ??SetEPDblBuffCount_8: (+1)
   \   000000D2   0xBC70             POP      {R4-R6}
   \   000000D4   0x4770             BX       LR               ;; return
    635          /*******************************************************************************
    636          * Function Name  : SetEPDblBuf0Count
    637          * Description    : Set the number of bytes in the buffer 0 of a double Buffer 
    638          *                  endpoint.
    639          * Input          : bEpNum, bDir,  wCount
    640          * Output         : None.
    641          * Return         : None.
    642          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    643          void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
    644          {
   \                     SetEPDblBuf0Count: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    645            _SetEPDblBuf0Count(bEpNum, bDir, wCount);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD123             BNE.N    ??SetEPDblBuf0Count_0
   \   00000008   0x....             LDR.N    R4,??DataTable55_4  ;; 0x40005c50
   \   0000000A   0x6824             LDR      R4,[R4, #+0]
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xEB14 0x04C0      ADDS     R4,R4,R0, LSL #+3
   \   00000014   0x....             LDR.N    R5,??DataTable55_8  ;; 0x40006004
   \   00000016   0xEB15 0x0444      ADDS     R4,R5,R4, LSL #+1
   \   0000001A   0x0023             MOVS     R3,R4
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x2A3F             CMP      R2,#+63
   \   00000020   0xDB0C             BLT.N    ??SetEPDblBuf0Count_1
   \   00000022   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000024   0x0955             LSRS     R5,R2,#+5
   \   00000026   0x002C             MOVS     R4,R5
   \   00000028   0x251F             MOVS     R5,#+31
   \   0000002A   0x422A             TST      R2,R5
   \   0000002C   0xD100             BNE.N    ??SetEPDblBuf0Count_2
   \   0000002E   0x1E64             SUBS     R4,R4,#+1
   \                     ??SetEPDblBuf0Count_2: (+1)
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0x02A4             LSLS     R4,R4,#+10
   \   00000034   0xF454 0x4400      ORRS     R4,R4,#0x8000
   \   00000038   0x601C             STR      R4,[R3, #+0]
   \   0000003A   0xE016             B.N      ??SetEPDblBuf0Count_3
   \                     ??SetEPDblBuf0Count_1: (+1)
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x0855             LSRS     R5,R2,#+1
   \   00000040   0x002C             MOVS     R4,R5
   \   00000042   0x07D5             LSLS     R5,R2,#+31
   \   00000044   0xD500             BPL.N    ??SetEPDblBuf0Count_4
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??SetEPDblBuf0Count_4: (+1)
   \   00000048   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004A   0x02A4             LSLS     R4,R4,#+10
   \   0000004C   0x601C             STR      R4,[R3, #+0]
   \   0000004E   0xE00C             B.N      ??SetEPDblBuf0Count_3
   \                     ??SetEPDblBuf0Count_0: (+1)
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD109             BNE.N    ??SetEPDblBuf0Count_3
   \   00000056   0x....             LDR.N    R3,??DataTable55_4  ;; 0x40005c50
   \   00000058   0x681B             LDR      R3,[R3, #+0]
   \   0000005A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000062   0x....             LDR.N    R4,??DataTable55_8  ;; 0x40006004
   \   00000064   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000066   0xF844 0x2013      STR      R2,[R4, R3, LSL #+1]
    646          }
   \                     ??SetEPDblBuf0Count_3: (+1)
   \   0000006A   0xBC70             POP      {R4-R6}
   \   0000006C   0x4770             BX       LR               ;; return
    647          /*******************************************************************************
    648          * Function Name  : SetEPDblBuf1Count
    649          * Description    : Set the number of bytes in the buffer 0 of a double Buffer 
    650          *                  endpoint.
    651          * Input          : bEpNum,  bDir,  wCount
    652          * Output         : None.
    653          * Return         : None.
    654          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    655          void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
    656          {
   \                     SetEPDblBuf1Count: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    657            _SetEPDblBuf1Count(bEpNum, bDir, wCount);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD123             BNE.N    ??SetEPDblBuf1Count_0
   \   00000008   0x....             LDR.N    R4,??DataTable55_4  ;; 0x40005c50
   \   0000000A   0x6824             LDR      R4,[R4, #+0]
   \   0000000C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0xEB14 0x04C0      ADDS     R4,R4,R0, LSL #+3
   \   00000014   0x....             LDR.N    R5,??DataTable55_9  ;; 0x4000600c
   \   00000016   0xEB15 0x0444      ADDS     R4,R5,R4, LSL #+1
   \   0000001A   0x0023             MOVS     R3,R4
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x2A3F             CMP      R2,#+63
   \   00000020   0xDB0C             BLT.N    ??SetEPDblBuf1Count_1
   \   00000022   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000024   0x0955             LSRS     R5,R2,#+5
   \   00000026   0x002C             MOVS     R4,R5
   \   00000028   0x251F             MOVS     R5,#+31
   \   0000002A   0x422A             TST      R2,R5
   \   0000002C   0xD100             BNE.N    ??SetEPDblBuf1Count_2
   \   0000002E   0x1E64             SUBS     R4,R4,#+1
   \                     ??SetEPDblBuf1Count_2: (+1)
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0x02A4             LSLS     R4,R4,#+10
   \   00000034   0xF454 0x4400      ORRS     R4,R4,#0x8000
   \   00000038   0x601C             STR      R4,[R3, #+0]
   \   0000003A   0xE016             B.N      ??SetEPDblBuf1Count_3
   \                     ??SetEPDblBuf1Count_1: (+1)
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x0855             LSRS     R5,R2,#+1
   \   00000040   0x002C             MOVS     R4,R5
   \   00000042   0x07D5             LSLS     R5,R2,#+31
   \   00000044   0xD500             BPL.N    ??SetEPDblBuf1Count_4
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??SetEPDblBuf1Count_4: (+1)
   \   00000048   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004A   0x02A4             LSLS     R4,R4,#+10
   \   0000004C   0x601C             STR      R4,[R3, #+0]
   \   0000004E   0xE00C             B.N      ??SetEPDblBuf1Count_3
   \                     ??SetEPDblBuf1Count_0: (+1)
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0x2902             CMP      R1,#+2
   \   00000054   0xD109             BNE.N    ??SetEPDblBuf1Count_3
   \   00000056   0x....             LDR.N    R3,??DataTable55_4  ;; 0x40005c50
   \   00000058   0x681B             LDR      R3,[R3, #+0]
   \   0000005A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000062   0x....             LDR.N    R4,??DataTable55_9  ;; 0x4000600c
   \   00000064   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000066   0xF844 0x2013      STR      R2,[R4, R3, LSL #+1]
    658          }
   \                     ??SetEPDblBuf1Count_3: (+1)
   \   0000006A   0xBC70             POP      {R4-R6}
   \   0000006C   0x4770             BX       LR               ;; return
    659          /*******************************************************************************
    660          * Function Name  : GetEPDblBuf0Count
    661          * Description    : Returns the number of byte received in the buffer 0 of a double
    662          *                  Buffer endpoint.
    663          * Input          : bEpNum: Endpoint Number.
    664          * Output         : None.
    665          * Return         : Endpoint Buffer 0 count
    666          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    667          uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
    668          {
    669            return(_GetEPDblBuf0Count(bEpNum));
   \                     GetEPDblBuf0Count: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable55_4  ;; 0x40005c50
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000C   0x....             LDR.N    R1,??DataTable55_8  ;; 0x40006004
   \   0000000E   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000012   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000014   0x0D80             LSRS     R0,R0,#+22
   \   00000016   0x4770             BX       LR               ;; return
    670          }
    671          /*******************************************************************************
    672          * Function Name  : GetEPDblBuf1Count
    673          * Description    : Returns the number of data received in the buffer 1 of a double
    674          *                  Buffer endpoint.
    675          * Input          : bEpNum: Endpoint Number.
    676          * Output         : None.
    677          * Return         : Endpoint Buffer 1 count.
    678          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    679          uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
    680          {
    681            return(_GetEPDblBuf1Count(bEpNum));
   \                     GetEPDblBuf1Count: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable55_4  ;; 0x40005c50
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xEB11 0x00C0      ADDS     R0,R1,R0, LSL #+3
   \   0000000C   0x....             LDR.N    R1,??DataTable55_9  ;; 0x4000600c
   \   0000000E   0xF851 0x0010      LDR      R0,[R1, R0, LSL #+1]
   \   00000012   0x0580             LSLS     R0,R0,#+22       ;; ZeroExtS R0,R0,#+22,#+22
   \   00000014   0x0D80             LSRS     R0,R0,#+22
   \   00000016   0x4770             BX       LR               ;; return
    682          }
    683          /*******************************************************************************
    684          * Function Name  : GetEPDblBufDir
    685          * Description    : gets direction of the double buffered endpoint
    686          * Input          : bEpNum: Endpoint Number. 
    687          * Output         : None.
    688          * Return         : EP_DBUF_OUT, EP_DBUF_IN,
    689          *                  EP_DBUF_ERR if the endpoint counter not yet programmed.
    690          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    691          EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
    692          {
   \                     GetEPDblBufDir: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    693            if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
   \   00000002   0x....             LDR.N    R0,??DataTable55_4  ;; 0x40005c50
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   0000000E   0x....             LDR.N    R2,??DataTable55_9  ;; 0x4000600c
   \   00000010   0xF852 0x0010      LDR      R0,[R2, R0, LSL #+1]
   \   00000014   0xF410 0x407C      ANDS     R0,R0,#0xFC00
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD001             BEQ.N    ??GetEPDblBufDir_0
    694              return(EP_DBUF_OUT);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xE00D             B.N      ??GetEPDblBufDir_1
    695            else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
   \                     ??GetEPDblBufDir_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable55_4  ;; 0x40005c50
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   0000002C   0x....             LDR.N    R2,??DataTable55_8  ;; 0x40006004
   \   0000002E   0xF852 0x0010      LDR      R0,[R2, R0, LSL #+1]
   \   00000032   0x0580             LSLS     R0,R0,#+22
   \   00000034   0xD001             BEQ.N    ??GetEPDblBufDir_2
    696              return(EP_DBUF_IN);
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xE000             B.N      ??GetEPDblBufDir_1
    697            else
    698              return(EP_DBUF_ERR);
   \                     ??GetEPDblBufDir_2: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \                     ??GetEPDblBufDir_1: (+1)
   \   0000003C   0x4770             BX       LR               ;; return
    699          }
    700          /*******************************************************************************
    701          * Function Name  : FreeUserBuffer
    702          * Description    : free buffer used from the application realizing it to the line
    703                             toggles bit SW_BUF in the double buffered endpoint register
    704          * Input          : bEpNum, bDir
    705          * Output         : None.
    706          * Return         : None.
    707          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    708          void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
    709          {
    710            if (bDir == EP_DBUF_OUT)
   \                     FreeUserBuffer: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2901             CMP      R1,#+1
   \   00000004   0xD10F             BNE.N    ??FreeUserBuffer_0
    711            { /* OUT double buffered endpoint */
    712              _ToggleDTOG_TX(bEpNum);
   \   00000006   0x....             LDR.N    R2,??DataTable55_5  ;; 0x40005c00
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000E   0xF648 0x738F      MOVW     R3,#+36751
   \   00000012   0x401A             ANDS     R2,R3,R2
   \   00000014   0xF442 0x4200      ORR      R2,R2,#0x8000
   \   00000018   0xF052 0x02C0      ORRS     R2,R2,#0xC0
   \   0000001C   0x....             LDR.N    R3,??DataTable55_5  ;; 0x40005c00
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   00000024   0xE011             B.N      ??FreeUserBuffer_1
    713            }
    714            else if (bDir == EP_DBUF_IN)
   \                     ??FreeUserBuffer_0: (+1)
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x2902             CMP      R1,#+2
   \   0000002A   0xD10E             BNE.N    ??FreeUserBuffer_1
    715            { /* IN double buffered endpoint */
    716              _ToggleDTOG_RX(bEpNum);
   \   0000002C   0x....             LDR.N    R2,??DataTable55_5  ;; 0x40005c00
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000034   0xF648 0x738F      MOVW     R3,#+36751
   \   00000038   0x401A             ANDS     R2,R3,R2
   \   0000003A   0xF442 0x4240      ORR      R2,R2,#0xC000
   \   0000003E   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   00000042   0x....             LDR.N    R3,??DataTable55_5  ;; 0x40005c00
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    717            }
    718          }
   \                     ??FreeUserBuffer_1: (+1)
   \   0000004A   0x4770             BX       LR               ;; return
    719          
    720          /*******************************************************************************
    721          * Function Name  : ToWord
    722          * Description    : merge two byte in a word.
    723          * Input          : bh: byte high, bl: bytes low.
    724          * Output         : None.
    725          * Return         : resulted word.
    726          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    727          uint16_t ToWord(uint8_t bh, uint8_t bl)
    728          {
   \                     ToWord: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    729            uint16_t wRet;
    730            wRet = (uint16_t)bl | ((uint16_t)bh << 8);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0xEA51 0x2302      ORRS     R3,R1,R2, LSL #+8
   \   0000000A   0x0018             MOVS     R0,R3
    731            return(wRet);
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x4770             BX       LR               ;; return
    732          }
    733          /*******************************************************************************
    734          * Function Name  : ByteSwap
    735          * Description    : Swap two byte in a word.
    736          * Input          : wSwW: word to Swap.
    737          * Output         : None.
    738          * Return         : resulted word.
    739          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    740          uint16_t ByteSwap(uint16_t wSwW)
    741          {
   \                     ByteSwap: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    742            uint8_t bTemp;
    743            uint16_t wRet;
    744            bTemp = (uint8_t)(wSwW & 0xff);
   \   00000002   0x000B             MOVS     R3,R1
   \   00000004   0x001A             MOVS     R2,R3
    745            wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
   \   00000006   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x0213             LSLS     R3,R2,#+8
   \   0000000C   0xEA53 0x2311      ORRS     R3,R3,R1, LSR #+8
   \   00000010   0x0018             MOVS     R0,R3
    746            return(wRet);
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x4770             BX       LR               ;; return
    747          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   0x40005C40         DC32     0x40005c40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   0x40005C44         DC32     0x40005c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   0x40005C48         DC32     0x40005c48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   0x40005C4C         DC32     0x40005c4c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \   00000000   0x40005C50         DC32     0x40005c50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \   00000000   0x40005C00         DC32     0x40005c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \   00000000   0x40006000         DC32     0x40006000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_7:
   \   00000000   0x40006008         DC32     0x40006008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_8:
   \   00000000   0x40006004         DC32     0x40006004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_9:
   \   00000000   0x4000600C         DC32     0x4000600c
    748          
    749          #endif /* STM32F10X_CL */
    750          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ByteSwap
       0   ClearDTOG_RX
       0   ClearDTOG_TX
       0   ClearEPDoubleBuff
       0   ClearEP_CTR_RX
       0   ClearEP_CTR_TX
       0   ClearEP_KIND
       0   Clear_Status_Out
       0   FreeUserBuffer
       0   GetBTABLE
       0   GetCNTR
       0   GetDADDR
       0   GetENDPOINT
       0   GetEPAddress
       0   GetEPDblBuf0Addr
       0   GetEPDblBuf0Count
       0   GetEPDblBuf1Addr
       0   GetEPDblBuf1Count
       0   GetEPDblBufDir
       0   GetEPRxAddr
       0   GetEPRxCount
       0   GetEPRxStatus
       0   GetEPTxAddr
       0   GetEPTxCount
       0   GetEPTxStatus
       0   GetEPType
       0   GetFNR
       0   GetISTR
       0   GetRxStallStatus
       0   GetTxStallStatus
       0   SetBTABLE
       0   SetCNTR
       0   SetDADDR
      16   SetDouBleBuffEPStall
        16   -> GetENDPOINT
       0   SetENDPOINT
       0   SetEPAddress
       4   SetEPCountRxReg
       4   SetEPDblBuf0Addr
      12   SetEPDblBuf0Count
       4   SetEPDblBuf1Addr
      12   SetEPDblBuf1Count
       8   SetEPDblBuffAddr
      12   SetEPDblBuffCount
       0   SetEPDoubleBuff
       4   SetEPRxAddr
       8   SetEPRxCount
       4   SetEPRxStatus
       0   SetEPRxValid
       4   SetEPTxAddr
       0   SetEPTxCount
       4   SetEPTxStatus
       0   SetEPTxValid
       0   SetEPType
       0   SetEP_KIND
       0   SetISTR
       0   Set_Status_Out
       0   ToWord
       0   ToggleDTOG_RX
       0   ToggleDTOG_TX


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable55
       4  ??DataTable55_1
       4  ??DataTable55_2
       4  ??DataTable55_3
       4  ??DataTable55_4
       4  ??DataTable55_5
       4  ??DataTable55_6
       4  ??DataTable55_7
       4  ??DataTable55_8
       4  ??DataTable55_9
      22  ByteSwap
      50  ClearDTOG_RX
      50  ClearDTOG_TX
      38  ClearEPDoubleBuff
      28  ClearEP_CTR_RX
      30  ClearEP_CTR_TX
      38  ClearEP_KIND
      38  Clear_Status_Out
      76  FreeUserBuffer
      10  GetBTABLE
      10  GetCNTR
      10  GetDADDR
      14  GetENDPOINT
      16  GetEPAddress
      22  GetEPDblBuf0Addr
      24  GetEPDblBuf0Count
      22  GetEPDblBuf1Addr
      24  GetEPDblBuf1Count
      62  GetEPDblBufDir
      26  GetEPRxAddr
      24  GetEPRxCount
      16  GetEPRxStatus
      26  GetEPTxAddr
      28  GetEPTxCount
      16  GetEPTxStatus
      16  GetEPType
      10  GetFNR
      10  GetISTR
      32  GetRxStallStatus
      30  GetTxStallStatus
      14  SetBTABLE
      10  SetCNTR
      10  SetDADDR
      64  SetDouBleBuffEPStall
      14  SetENDPOINT
      40  SetEPAddress
      56  SetEPCountRxReg
      32  SetEPDblBuf0Addr
     110  SetEPDblBuf0Count
      32  SetEPDblBuf1Addr
     110  SetEPDblBuf1Count
      58  SetEPDblBuffAddr
     214  SetEPDblBuffCount
      38  SetEPDoubleBuff
      36  SetEPRxAddr
      80  SetEPRxCount
      60  SetEPRxStatus
      48  SetEPRxValid
      36  SetEPTxAddr
      26  SetEPTxCount
      60  SetEPTxStatus
      48  SetEPTxValid
      32  SetEPType
      38  SetEP_KIND
      10  SetISTR
      38  Set_Status_Out
      16  ToWord
      36  ToggleDTOG_RX
      36  ToggleDTOG_TX

 
 2 260 bytes in section .text
 
 2 260 bytes of CODE memory

Errors: none
Warnings: none
