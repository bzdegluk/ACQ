###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktCommon.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktCommon.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_PktCommon.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_PktCommon.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktCommon.c
      1          /**
      2           * @file    SPIRIT_PktCommon.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of the common features of SPIRIT packets.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "SPIRIT_PktCommon.h"
     25          #include "MCU_Interface.h"
     26          
     27          
     28          /**
     29           * @addtogroup SPIRIT_Libraries
     30           * @{
     31           */
     32          
     33          
     34          /**
     35           * @addtogroup SPIRIT_PktCommon
     36           * @{
     37           */
     38          
     39          
     40          /**
     41           * @defgroup PktCommon_Private_TypesDefinitions         Pkt Common Private Types Definitions
     42           * @{
     43           */
     44          
     45          /**
     46           *@}
     47           */
     48          
     49          
     50          /**
     51           * @defgroup PktCommon_Private_Defines                  Pkt Common Private Defines
     52           * @{
     53           */
     54          
     55          /**
     56           *@}
     57           */
     58          
     59          
     60          /**
     61           * @defgroup PktCommon_Private_Macros                   Pkt Common Private Macros
     62           * @{
     63           */
     64          
     65          /**
     66           *@}
     67           */
     68          
     69          
     70          /**
     71           * @defgroup PktCommon_Private_Variables                Pkt Common Private Variables
     72           * @{
     73           */
     74          
     75          /**
     76           *@}
     77           */
     78          
     79          
     80          
     81          /**
     82           * @defgroup PktCommon_Private_FunctionPrototypes       Pkt Common Private Function Prototypes
     83           * @{
     84           */
     85          
     86          /**
     87           *@}
     88           */
     89          
     90          
     91          /**
     92           * @defgroup PktCommon_Private_Functions                Pkt Common Private Functions
     93           * @{
     94           */
     95          
     96          /**
     97           * @brief  Sets the CONTROL field length for SPIRIT packets.
     98           * @param  xControlLength length of CONTROL field in bytes.
     99           *         This parameter can be any value of @ref PktControlLength.
    100           * @retval None.
    101           */

   \                                 In section .text, align 2, keep-with-next
    102          void SpiritPktCommonSetControlLength(PktControlLength xControlLength)
    103          {
   \                     SpiritPktCommonSetControlLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104            uint8_t tempRegValue;
    105          
    106            /* Check the parameters */
    107            s_assert_param(IS_PKT_CONTROL_LENGTH(xControlLength));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD010             BEQ.N    ??SpiritPktCommonSetControlLength_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD00D             BEQ.N    ??SpiritPktCommonSetControlLength_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xD00A             BEQ.N    ??SpiritPktCommonSetControlLength_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C03             CMP      R4,#+3
   \   0000001A   0xD007             BEQ.N    ??SpiritPktCommonSetControlLength_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C04             CMP      R4,#+4
   \   00000020   0xD004             BEQ.N    ??SpiritPktCommonSetControlLength_0
   \   00000022   0x216B             MOVS     R1,#+107
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000028   0x.... 0x....      BL       s_assert_failed
    108          
    109            /* Reads the PCKTCTRL4 register value */
    110            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetControlLength_0: (+1)
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x2030             MOVS     R0,#+48
   \   00000032   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000003C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000040   0x8001             STRH     R1,[R0, #+0]
    111          
    112            /* Set the control length */
    113            tempRegValue &= ~PCKTCTRL4_CONTROL_LEN_MASK;
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    114            tempRegValue |= (uint8_t)xControlLength;
   \   0000004E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000052   0x4320             ORRS     R0,R4,R0
   \   00000054   0xF88D 0x0000      STRB     R0,[SP, #+0]
    115          
    116            /* Writes the new value on the PCKTCTRL4 register */
    117            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \   00000058   0xAA00             ADD      R2,SP,#+0
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x2030             MOVS     R0,#+48
   \   0000005E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000062   0x9001             STR      R0,[SP, #+4]
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000068   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000006C   0x8001             STRH     R1,[R0, #+0]
    118          
    119          }
   \   0000006E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    120          
    121          
    122          /**
    123           * @brief  Returns the CONTROL field length for SPIRIT packets.
    124           * @param  None.
    125           * @retval uint8_t Control field length.
    126           */

   \                                 In section .text, align 2, keep-with-next
    127          uint8_t SpiritPktCommonGetControlLength(void)
    128          {
   \                     SpiritPktCommonGetControlLength: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    129            uint8_t tempRegValue;
    130          
    131            /* Reads the PCKTCTRL4 register value */
    132            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    133          
    134            /* Rebuild and return value */
    135            return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    136          
    137          }
    138          
    139          
    140          /**
    141           * @brief  Sets the PREAMBLE field Length mode for SPIRIT packets.
    142           * @param  xPreambleLength length of PREAMBLE field in bytes.
    143           *         This parameter can be any value of @ref PktPreambleLength.
    144           * @retval None.
    145           */

   \                                 In section .text, align 2, keep-with-next
    146          void SpiritPktCommonSetPreambleLength(PktPreambleLength xPreambleLength)
    147          {
   \                     SpiritPktCommonSetPreambleLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    148            uint8_t tempRegValue;
    149          
    150            /* Check the parameters */
    151            s_assert_param(IS_PKT_PREAMBLE_LENGTH(xPreambleLength));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD061             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C08             CMP      R4,#+8
   \   0000000E   0xD05E             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C10             CMP      R4,#+16
   \   00000014   0xD05B             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C18             CMP      R4,#+24
   \   0000001A   0xD058             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C20             CMP      R4,#+32
   \   00000020   0xD055             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C28             CMP      R4,#+40
   \   00000026   0xD052             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C30             CMP      R4,#+48
   \   0000002C   0xD04F             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C38             CMP      R4,#+56
   \   00000032   0xD04C             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C40             CMP      R4,#+64
   \   00000038   0xD049             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C48             CMP      R4,#+72
   \   0000003E   0xD046             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C50             CMP      R4,#+80
   \   00000044   0xD043             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C58             CMP      R4,#+88
   \   0000004A   0xD040             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2C60             CMP      R4,#+96
   \   00000050   0xD03D             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2C68             CMP      R4,#+104
   \   00000056   0xD03A             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C70             CMP      R4,#+112
   \   0000005C   0xD037             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C78             CMP      R4,#+120
   \   00000062   0xD034             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x2C80             CMP      R4,#+128
   \   00000068   0xD031             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x2C88             CMP      R4,#+136
   \   0000006E   0xD02E             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C90             CMP      R4,#+144
   \   00000074   0xD02B             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x2C98             CMP      R4,#+152
   \   0000007A   0xD028             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0x2CA0             CMP      R4,#+160
   \   00000080   0xD025             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x2CA8             CMP      R4,#+168
   \   00000086   0xD022             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2CB0             CMP      R4,#+176
   \   0000008C   0xD01F             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x2CB8             CMP      R4,#+184
   \   00000092   0xD01C             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   00000094   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000096   0x2CC0             CMP      R4,#+192
   \   00000098   0xD019             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x2CC8             CMP      R4,#+200
   \   0000009E   0xD016             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A2   0x2CD0             CMP      R4,#+208
   \   000000A4   0xD013             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A8   0x2CD8             CMP      R4,#+216
   \   000000AA   0xD010             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AE   0x2CE0             CMP      R4,#+224
   \   000000B0   0xD00D             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B4   0x2CE8             CMP      R4,#+232
   \   000000B6   0xD00A             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0x2CF0             CMP      R4,#+240
   \   000000BC   0xD007             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000BE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C0   0x2CF8             CMP      R4,#+248
   \   000000C2   0xD004             BEQ.N    ??SpiritPktCommonSetPreambleLength_0
   \   000000C4   0x2197             MOVS     R1,#+151
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable43
   \   000000CA   0x.... 0x....      BL       s_assert_failed
    152          
    153            /* Reads the PCKTCTRL2 register value */
    154            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetPreambleLength_0: (+1)
   \   000000CE   0xAA00             ADD      R2,SP,#+0
   \   000000D0   0x2101             MOVS     R1,#+1
   \   000000D2   0x2032             MOVS     R0,#+50
   \   000000D4   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000000D8   0x9001             STR      R0,[SP, #+4]
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable45
   \   000000DE   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000E2   0x8001             STRH     R1,[R0, #+0]
    155          
    156            /* Set the preamble length */
    157            tempRegValue &= ~PCKTCTRL2_PREAMBLE_LENGTH_MASK;
   \   000000E4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000E8   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   000000EC   0xF88D 0x0000      STRB     R0,[SP, #+0]
    158            tempRegValue |= (uint8_t)xPreambleLength;
   \   000000F0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000F4   0x4320             ORRS     R0,R4,R0
   \   000000F6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    159          
    160            /* Writes the new value on the PCKTCTRL2 register */
    161            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \   000000FA   0xAA00             ADD      R2,SP,#+0
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x2032             MOVS     R0,#+50
   \   00000100   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000104   0x9001             STR      R0,[SP, #+4]
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000010A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000010E   0x8001             STRH     R1,[R0, #+0]
    162          
    163          }
   \   00000110   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    164          
    165          
    166          /**
    167           * @brief  Returns the PREAMBLE field Length mode for SPIRIT packets.
    168           * @param  None.
    169           * @retval uint8_t Preamble field length in bytes.
    170           */

   \                                 In section .text, align 2, keep-with-next
    171          uint8_t SpiritPktCommonGetPreambleLength(void)
    172          {
   \                     SpiritPktCommonGetPreambleLength: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    173            uint8_t tempRegValue;
    174          
    175            /* Reads the PCKTCTRL2 register value */
    176            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2032             MOVS     R0,#+50
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    177          
    178            /* Rebuild and return value */
    179            return ((tempRegValue & PCKTCTRL2_PREAMBLE_LENGTH_MASK)>>3) + 1;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x08C0             LSRS     R0,R0,#+3
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    180          
    181          }
    182          
    183          
    184          /**
    185           * @brief  Sets the SYNC field Length for SPIRIT packets.
    186           * @param  xSyncLength length of SYNC field in bytes.
    187           *         This parameter can be any value of @ref PktSyncLength.
    188           * @retval None.
    189           */

   \                                 In section .text, align 2, keep-with-next
    190          void SpiritPktCommonSetSyncLength(PktSyncLength xSyncLength)
    191          {
   \                     SpiritPktCommonSetSyncLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    192            uint8_t tempRegValue;
    193          
    194            /* Check the parameters */
    195            s_assert_param(IS_PKT_SYNC_LENGTH(xSyncLength));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00D             BEQ.N    ??SpiritPktCommonSetSyncLength_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD00A             BEQ.N    ??SpiritPktCommonSetSyncLength_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C04             CMP      R4,#+4
   \   00000014   0xD007             BEQ.N    ??SpiritPktCommonSetSyncLength_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C06             CMP      R4,#+6
   \   0000001A   0xD004             BEQ.N    ??SpiritPktCommonSetSyncLength_0
   \   0000001C   0x21C3             MOVS     R1,#+195
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000022   0x.... 0x....      BL       s_assert_failed
    196          
    197            /* Reads the PCKTCTRL2 register value */
    198            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetSyncLength_0: (+1)
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x2032             MOVS     R0,#+50
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000036   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000003A   0x8001             STRH     R1,[R0, #+0]
    199          
    200            /* Set the sync length */
    201            tempRegValue &= ~PCKTCTRL2_SYNC_LENGTH_MASK;
   \   0000003C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000040   0xF010 0x00F9      ANDS     R0,R0,#0xF9
   \   00000044   0xF88D 0x0000      STRB     R0,[SP, #+0]
    202            tempRegValue |= (uint8_t)xSyncLength;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0x4320             ORRS     R0,R4,R0
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    203          
    204            /* Writes the new value on the PCKTCTRL2 register */
    205            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x2032             MOVS     R0,#+50
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000062   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    206          
    207          }
   \   00000068   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    208          
    209          
    210          /**
    211           * @brief  Returns the SYNC field Length for SPIRIT packets.
    212           * @param  None.
    213           * @retval uint8_t Sync field length in bytes.
    214           */

   \                                 In section .text, align 2, keep-with-next
    215          uint8_t SpiritPktCommonGetSyncLength(void)
    216          {
   \                     SpiritPktCommonGetSyncLength: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    217            uint8_t tempRetValue;
    218          
    219            /* Reads the PCKTCTRL2 register value */
    220            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL2_BASE, 1, &tempRetValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2032             MOVS     R0,#+50
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    221          
    222            /* Rebuild and return value */
    223            return ((tempRetValue & PCKTCTRL2_SYNC_LENGTH_MASK)>>1) + 1;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF3C0 0x0041      UBFX     R0,R0,#+1,#+2
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    224          
    225          }
    226          
    227          
    228          /**
    229           * @brief  Sets fixed or variable payload length mode for SPIRIT packets.
    230           * @param  xFixVarLength variable or fixed length.
    231           *         PKT_FIXED_LENGTH_VAR -> variable (the length is extracted from the received packet).
    232           *         PKT_FIXED_LENGTH_FIX -> fix (the length is set by PCKTLEN0 and PCKTLEN1).
    233           * @retval None.
    234           */

   \                                 In section .text, align 2, keep-with-next
    235          void SpiritPktCommonSetFixVarLength(PktFixVarLength xFixVarLength)
    236          {
   \                     SpiritPktCommonSetFixVarLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    237            uint8_t tempRegValue;
    238          
    239            /* Check the parameters */
    240            s_assert_param(IS_PKT_FIX_VAR_LENGTH(xFixVarLength));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktCommonSetFixVarLength_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktCommonSetFixVarLength_0
   \   00000010   0x21F0             MOVS     R1,#+240
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000016   0x.... 0x....      BL       s_assert_failed
    241          
    242            /* Reads the PCKTCTRL2 register value */
    243            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetFixVarLength_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2032             MOVS     R0,#+50
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    244          
    245            /* Set fixed or variable address mode */
    246            tempRegValue &= ~PCKTCTRL2_FIX_VAR_LEN_MASK;
   \   00000030   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000034   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    247            tempRegValue |= (uint8_t)xFixVarLength;
   \   0000003C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000040   0x4320             ORRS     R0,R4,R0
   \   00000042   0xF88D 0x0000      STRB     R0,[SP, #+0]
    248          
    249            /* Writes the new value on the PCKTCTRL2 register */
    250            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL2_BASE, 1, &tempRegValue);
   \   00000046   0xAA00             ADD      R2,SP,#+0
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2032             MOVS     R0,#+50
   \   0000004C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000050   0x9001             STR      R0,[SP, #+4]
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000056   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000005A   0x8001             STRH     R1,[R0, #+0]
    251          
    252          }
   \   0000005C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    253          
    254          
    255          /**
    256           * @brief  Enables or Disables the filtering on CRC.
    257           * @param  xNewState new state for CRC_CHECK.
    258           *         This parameter can be S_ENABLE or S_DISABLE.
    259           * @retval None.
    260           */

   \                                 In section .text, align 2, keep-with-next
    261          void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
    262          {
   \                     SpiritPktCommonFilterOnCrc: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    263            uint8_t tempRegValue;
    264          
    265            /* Check the parameters */
    266            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktCommonFilterOnCrc_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktCommonFilterOnCrc_0
   \   00000010   0xF44F 0x7185      MOV      R1,#+266
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000018   0x.... 0x....      BL       s_assert_failed
    267          
    268            /* Reads the PCKT_FLT_OPTIONS register value */
    269            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnCrc_0: (+1)
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x204F             MOVS     R0,#+79
   \   00000022   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    270          
    271            /* Modify the register value: enable or disable the CRC filtering */
    272            if(xNewState == S_ENABLE)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C01             CMP      R4,#+1
   \   00000036   0xD106             BNE.N    ??SpiritPktCommonFilterOnCrc_1
    273            {
    274              tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000044   0xE005             B.N      ??SpiritPktCommonFilterOnCrc_2
    275            }
    276            else
    277            {
    278              tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
   \                     ??SpiritPktCommonFilterOnCrc_1: (+1)
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    279            }
    280          
    281            /* Writes the PCKT_FLT_OPTIONS register value */
    282            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnCrc_2: (+1)
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x204F             MOVS     R0,#+79
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000062   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    283          
    284          }
   \   00000068   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    285          
    286          
    287          /**
    288           * @brief  Returns the CRC filtering enable bit.
    289           * @param  None.
    290           * @retval SpiritFunctionalState CRC filtering.
    291           */

   \                                 In section .text, align 2, keep-with-next
    292          SpiritFunctionalState SpiritPktCommonGetFilterOnCrc(void)
    293          {
   \                     SpiritPktCommonGetFilterOnCrc: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    294            uint8_t tempRegValue;
    295          
    296          
    297            /* Reads the PCKT_FLT_OPTIONS register value */
    298            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204F             MOVS     R0,#+79
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    299          
    300            /* Check the CRC filtering bit */
    301            if(tempRegValue & PCKT_FLT_OPTIONS_CRC_CHECK_MASK)
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0x07C0             LSLS     R0,R0,#+31
   \   00000020   0xD501             BPL.N    ??SpiritPktCommonGetFilterOnCrc_0
    302            {
    303              return S_ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE000             B.N      ??SpiritPktCommonGetFilterOnCrc_1
    304            }
    305            else
    306            {
    307              return S_DISABLE;
   \                     ??SpiritPktCommonGetFilterOnCrc_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetFilterOnCrc_1: (+1)
   \   00000028   0xBD0E             POP      {R1-R3,PC}       ;; return
    308            }
    309          
    310          }
    311          
    312          
    313          /**
    314           * @brief  Sets the CRC mode for SPIRIT packets.
    315           * @param  xCrcMode length of CRC field in bytes.
    316           *         This parameter can be any value of @ref PktCrcMode.
    317           * @retval None.
    318           */

   \                                 In section .text, align 2, keep-with-next
    319          void SpiritPktCommonSetCrcMode(PktCrcMode xCrcMode)
    320          {
   \                     SpiritPktCommonSetCrcMode: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    321            uint8_t tempRegValue;
    322          
    323            /* Check the parameters */
    324            s_assert_param(IS_PKT_CRC_MODE(xCrcMode));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD011             BEQ.N    ??SpiritPktCommonSetCrcMode_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C20             CMP      R4,#+32
   \   0000000E   0xD00E             BEQ.N    ??SpiritPktCommonSetCrcMode_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C40             CMP      R4,#+64
   \   00000014   0xD00B             BEQ.N    ??SpiritPktCommonSetCrcMode_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C60             CMP      R4,#+96
   \   0000001A   0xD008             BEQ.N    ??SpiritPktCommonSetCrcMode_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C80             CMP      R4,#+128
   \   00000020   0xD005             BEQ.N    ??SpiritPktCommonSetCrcMode_0
   \   00000022   0xF44F 0x71A2      MOV      R1,#+324
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable43
   \   0000002A   0x.... 0x....      BL       s_assert_failed
    325          
    326            /* Reads the PCKTCTRL1 register value */
    327            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetCrcMode_0: (+1)
   \   0000002E   0xAA00             ADD      R2,SP,#+0
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2033             MOVS     R0,#+51
   \   00000034   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000003E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000042   0x8001             STRH     R1,[R0, #+0]
    328          
    329            /* Build data to write setting the CRC mode */
    330            tempRegValue &= ~PCKTCTRL1_CRC_MODE_MASK;
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    331            tempRegValue |= (uint8_t)xCrcMode;
   \   00000050   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000054   0x4320             ORRS     R0,R4,R0
   \   00000056   0xF88D 0x0000      STRB     R0,[SP, #+0]
    332          
    333            /* Writes the new value on the PCKTCTRL1 register */
    334            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   0000005A   0xAA00             ADD      R2,SP,#+0
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x2033             MOVS     R0,#+51
   \   00000060   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000064   0x9001             STR      R0,[SP, #+4]
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000006A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000006E   0x8001             STRH     R1,[R0, #+0]
    335          
    336          }
   \   00000070   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    337          
    338          
    339          /**
    340           * @brief  Returns the CRC mode for SPIRIT packets.
    341           * @param  None.
    342           * @retval PktCrcMode Crc mode.
    343           */

   \                                 In section .text, align 2, keep-with-next
    344          PktCrcMode SpiritPktCommonGetCrcMode(void)
    345          {
   \                     SpiritPktCommonGetCrcMode: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    346            uint8_t tempRegValue;
    347          
    348            /* Reads the PCKTCTRL1 register */
    349            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2033             MOVS     R0,#+51
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    350          
    351            /* Rebuild and return value */
    352            return (PktCrcMode)(tempRegValue & 0xE0);
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF010 0x00E0      ANDS     R0,R0,#0xE0
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    353          
    354          }
    355          
    356          
    357          /**
    358           * @brief  Enables or Disables WHITENING for SPIRIT packets.
    359           * @param  xNewState new state for WHITENING mode.
    360           *         This parameter can be S_ENABLE or S_DISABLE.
    361           * @retval None.
    362           */

   \                                 In section .text, align 2, keep-with-next
    363          void SpiritPktCommonWhitening(SpiritFunctionalState xNewState)
    364          {
   \                     SpiritPktCommonWhitening: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    365            uint8_t tempRegValue;
    366          
    367            /* Check the parameters */
    368            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktCommonWhitening_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktCommonWhitening_0
   \   00000010   0xF44F 0x71B8      MOV      R1,#+368
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000018   0x.... 0x....      BL       s_assert_failed
    369          
    370            /* Reads the PCKTCTRL1 register value */
    371            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonWhitening_0: (+1)
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2033             MOVS     R0,#+51
   \   00000022   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    372          
    373            /* Build data to write: set or reset the whitening enable bit */
    374            if(xNewState == S_ENABLE)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C01             CMP      R4,#+1
   \   00000036   0xD106             BNE.N    ??SpiritPktCommonWhitening_1
    375            {
    376              tempRegValue |= PCKTCTRL1_WHIT_MASK;
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000044   0xE005             B.N      ??SpiritPktCommonWhitening_2
    377            }
    378            else
    379            {
    380              tempRegValue &= ~PCKTCTRL1_WHIT_MASK;
   \                     ??SpiritPktCommonWhitening_1: (+1)
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    381            }
    382          
    383            /* Writes the new value on the PCKTCTRL1 register */
    384            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonWhitening_2: (+1)
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x2033             MOVS     R0,#+51
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000062   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    385          
    386          }
   \   00000068   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    387          
    388          
    389          /**
    390           * @brief  Enables or Disables FEC for SPIRIT packets.
    391           * @param  xNewState new state for FEC mode.
    392           *         This parameter can be S_ENABLE or S_DISABLE.
    393           * @retval None.
    394           */

   \                                 In section .text, align 2, keep-with-next
    395          void SpiritPktCommonFec(SpiritFunctionalState xNewState)
    396          {
   \                     SpiritPktCommonFec: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    397            uint8_t tempRegValue;
    398          
    399            /* Check the parameters */
    400            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktCommonFec_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktCommonFec_0
   \   00000010   0xF44F 0x71C8      MOV      R1,#+400
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000018   0x.... 0x....      BL       s_assert_failed
    401          
    402            /* Reads the PCKTCTRL1 register value */
    403            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFec_0: (+1)
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x2033             MOVS     R0,#+51
   \   00000022   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    404          
    405            /* Build data to write: set or reset the FEC enable bit */
    406            if(xNewState == S_ENABLE)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C01             CMP      R4,#+1
   \   00000036   0xD106             BNE.N    ??SpiritPktCommonFec_1
    407            {
    408              tempRegValue |= PCKTCTRL1_FEC_MASK;
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000044   0xE005             B.N      ??SpiritPktCommonFec_2
    409            }
    410            else
    411            {
    412              tempRegValue &= ~PCKTCTRL1_FEC_MASK;
   \                     ??SpiritPktCommonFec_1: (+1)
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    413            }
    414          
    415            /* Writes data on the PCKTCTRL1 register */
    416            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFec_2: (+1)
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x2033             MOVS     R0,#+51
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000062   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    417          
    418          }
   \   00000068   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    419          
    420          
    421          /**
    422           * @brief  Sets a specific SYNC word for SPIRIT packets.
    423           * @param  xSyncX SYNC word number to be set.
    424           *         This parameter can be any value of @ref PktSyncX.
    425           * @param  cSyncWord SYNC word.
    426           *         This parameter is an uint8_t.
    427           * @retval None.
    428           */

   \                                 In section .text, align 2, keep-with-next
    429          void SpiritPktCommonSetSyncxWord(PktSyncX xSyncX ,  uint8_t cSyncWord)
    430          {
   \                     SpiritPktCommonSetSyncxWord: (+1)
   \   00000000   0xB532             PUSH     {R1,R4,R5,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    431            uint8_t tempRegAddress;
    432          
    433            /* Check the parameters */
    434            s_assert_param(IS_PKT_SYNCx(xSyncX));
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD00E             BEQ.N    ??SpiritPktCommonSetSyncxWord_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C02             CMP      R4,#+2
   \   00000010   0xD00B             BEQ.N    ??SpiritPktCommonSetSyncxWord_0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C03             CMP      R4,#+3
   \   00000016   0xD008             BEQ.N    ??SpiritPktCommonSetSyncxWord_0
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C04             CMP      R4,#+4
   \   0000001C   0xD005             BEQ.N    ??SpiritPktCommonSetSyncxWord_0
   \   0000001E   0xF44F 0x71D9      MOV      R1,#+434
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000026   0x.... 0x....      BL       s_assert_failed
    435          
    436            /* Set the specified address */
    437            switch(xSyncX)
   \                     ??SpiritPktCommonSetSyncxWord_0: (+1)
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0x2C01             CMP      R4,#+1
   \   0000002E   0xD006             BEQ.N    ??SpiritPktCommonSetSyncxWord_1
   \   00000030   0xD310             BCC.N    ??SpiritPktCommonSetSyncxWord_2
   \   00000032   0x2C03             CMP      R4,#+3
   \   00000034   0xD009             BEQ.N    ??SpiritPktCommonSetSyncxWord_3
   \   00000036   0xD305             BCC.N    ??SpiritPktCommonSetSyncxWord_4
   \   00000038   0x2C04             CMP      R4,#+4
   \   0000003A   0xD009             BEQ.N    ??SpiritPktCommonSetSyncxWord_5
   \   0000003C   0xE00A             B.N      ??SpiritPktCommonSetSyncxWord_2
    438            {
    439              case PKT_SYNC_WORD_1:
    440                tempRegAddress=SYNC1_BASE;
   \                     ??SpiritPktCommonSetSyncxWord_1: (+1)
   \   0000003E   0x2039             MOVS     R0,#+57
   \   00000040   0x0005             MOVS     R5,R0
    441                break;
   \   00000042   0xE007             B.N      ??SpiritPktCommonSetSyncxWord_2
    442              case PKT_SYNC_WORD_2:
    443                tempRegAddress=SYNC2_BASE;
   \                     ??SpiritPktCommonSetSyncxWord_4: (+1)
   \   00000044   0x2038             MOVS     R0,#+56
   \   00000046   0x0005             MOVS     R5,R0
    444                break;
   \   00000048   0xE004             B.N      ??SpiritPktCommonSetSyncxWord_2
    445              case PKT_SYNC_WORD_3:
    446                tempRegAddress=SYNC3_BASE;
   \                     ??SpiritPktCommonSetSyncxWord_3: (+1)
   \   0000004A   0x2037             MOVS     R0,#+55
   \   0000004C   0x0005             MOVS     R5,R0
    447                break;
   \   0000004E   0xE001             B.N      ??SpiritPktCommonSetSyncxWord_2
    448              case PKT_SYNC_WORD_4:
    449                tempRegAddress=SYNC4_BASE;
   \                     ??SpiritPktCommonSetSyncxWord_5: (+1)
   \   00000050   0x2036             MOVS     R0,#+54
   \   00000052   0x0005             MOVS     R5,R0
    450                break;
    451            }
    452          
    453            /* Writes value on the selected register */
    454            g_xStatus = SpiritSpiWriteRegisters(tempRegAddress, 1, &cSyncWord);
   \                     ??SpiritPktCommonSetSyncxWord_2: (+1)
   \   00000054   0xAA02             ADD      R2,SP,#+8
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000066   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000006A   0x8001             STRH     R1,[R0, #+0]
    455          
    456          }
   \   0000006C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    457          
    458          
    459          /**
    460           * @brief  Returns a specific SYNC word for SPIRIT packets.
    461           * @param  xSyncX SYNC word number to be get.
    462           *         This parameter can be any value of @ref PktSyncX.
    463           * @retval uint8_t Sync word x.
    464           */

   \                                 In section .text, align 2, keep-with-next
    465          uint8_t SpiritPktCommonGetSyncxWord(PktSyncX xSyncX)
    466          {
   \                     SpiritPktCommonGetSyncxWord: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    467            uint8_t tempRegAddress, tempRegValue;
    468          
    469            /* Set the specified address */
    470            switch(xSyncX)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD006             BEQ.N    ??SpiritPktCommonGetSyncxWord_0
   \   0000000C   0xD310             BCC.N    ??SpiritPktCommonGetSyncxWord_1
   \   0000000E   0x2C03             CMP      R4,#+3
   \   00000010   0xD009             BEQ.N    ??SpiritPktCommonGetSyncxWord_2
   \   00000012   0xD305             BCC.N    ??SpiritPktCommonGetSyncxWord_3
   \   00000014   0x2C04             CMP      R4,#+4
   \   00000016   0xD009             BEQ.N    ??SpiritPktCommonGetSyncxWord_4
   \   00000018   0xE00A             B.N      ??SpiritPktCommonGetSyncxWord_1
    471            {
    472              case PKT_SYNC_WORD_1:
    473                tempRegAddress=SYNC1_BASE;
   \                     ??SpiritPktCommonGetSyncxWord_0: (+1)
   \   0000001A   0x2039             MOVS     R0,#+57
   \   0000001C   0x0005             MOVS     R5,R0
    474                break;
   \   0000001E   0xE007             B.N      ??SpiritPktCommonGetSyncxWord_1
    475              case PKT_SYNC_WORD_2:
    476                tempRegAddress=SYNC2_BASE;
   \                     ??SpiritPktCommonGetSyncxWord_3: (+1)
   \   00000020   0x2038             MOVS     R0,#+56
   \   00000022   0x0005             MOVS     R5,R0
    477                break;
   \   00000024   0xE004             B.N      ??SpiritPktCommonGetSyncxWord_1
    478              case PKT_SYNC_WORD_3:
    479                tempRegAddress=SYNC3_BASE;
   \                     ??SpiritPktCommonGetSyncxWord_2: (+1)
   \   00000026   0x2037             MOVS     R0,#+55
   \   00000028   0x0005             MOVS     R5,R0
    480                break;
   \   0000002A   0xE001             B.N      ??SpiritPktCommonGetSyncxWord_1
    481              case PKT_SYNC_WORD_4:
    482                tempRegAddress=SYNC4_BASE;
   \                     ??SpiritPktCommonGetSyncxWord_4: (+1)
   \   0000002C   0x2036             MOVS     R0,#+54
   \   0000002E   0x0005             MOVS     R5,R0
    483                break;
    484            }
    485          
    486            /* Reads the selected register value */
    487            g_xStatus = SpiritSpiReadRegisters(tempRegAddress, 1, &tempRegValue);
   \                     ??SpiritPktCommonGetSyncxWord_1: (+1)
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000003C   0x9001             STR      R0,[SP, #+4]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000042   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000046   0x8001             STRH     R1,[R0, #+0]
    488          
    489            /* Returns the read value */
    490            return tempRegValue;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xBD3E             POP      {R1-R5,PC}       ;; return
    491          
    492          }
    493          
    494          
    495          /**
    496           * @brief  Sets multiple SYNC words for SPIRIT packets.
    497           * @param  lSyncWords SYNC words to be set with format: 0x|SYNC1|SYNC2|SYNC3|SYNC4|.
    498           *         This parameter is a uint32_t.
    499           * @param  xSyncLength SYNC length in bytes. The 32bit word passed will be stored in the SYNCx registers from the MSb
    500           *         until the number of bytes in xSyncLength has been stored.
    501           *         This parameter is a @ref PktSyncLength.
    502           * @retval None.
    503           */

   \                                 In section .text, align 2, keep-with-next
    504          void SpiritPktCommonSetSyncWords(uint32_t lSyncWords, PktSyncLength xSyncLength)
    505          {
   \                     SpiritPktCommonSetSyncWords: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    506            uint8_t tempRegValue[4];
    507          
    508            /* Split the 32-bit value in 4 8-bit values */
    509            for(uint8_t i=0 ; i<4 ; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonSetSyncWords_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2804             CMP      R0,#+4
   \   0000000E   0xDA14             BGE.N    ??SpiritPktCommonSetSyncWords_1
    510            {
    511              if(i<3-xSyncLength>>1)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0xF1D5 0x0103      RSBS     R1,R5,#+3
   \   00000018   0xEBB0 0x0F61      CMP      R0,R1, ASR #+1
   \   0000001C   0xDA04             BGE.N    ??SpiritPktCommonSetSyncWords_2
    512              {
    513                tempRegValue[i]=0;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0xAA00             ADD      R2,SP,#+0
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x5481             STRB     R1,[R0, R2]
   \   00000026   0xE006             B.N      ??SpiritPktCommonSetSyncWords_3
    514              }
    515              else
    516              {
    517                tempRegValue[i]=(uint8_t)(lSyncWords>>(8*i));
   \                     ??SpiritPktCommonSetSyncWords_2: (+1)
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x00C1             LSLS     R1,R0,#+3
   \   0000002C   0x0022             MOVS     R2,R4
   \   0000002E   0x40CA             LSRS     R2,R2,R1
   \   00000030   0xA900             ADD      R1,SP,#+0
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x5442             STRB     R2,[R0, R1]
    518              }
    519            }
   \                     ??SpiritPktCommonSetSyncWords_3: (+1)
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xE7E7             B.N      ??SpiritPktCommonSetSyncWords_0
    520          
    521            /* Writes SYNC value on the SYNCx registers */
    522            g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
   \                     ??SpiritPktCommonSetSyncWords_1: (+1)
   \   0000003A   0xAA00             ADD      R2,SP,#+0
   \   0000003C   0x2104             MOVS     R1,#+4
   \   0000003E   0x2036             MOVS     R0,#+54
   \   00000040   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000044   0x9001             STR      R0,[SP, #+4]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000004A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
    523          
    524          }
   \   00000050   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    525          
    526          
    527          /**
    528           * @brief  Returns multiple SYNC words for SPIRIT packets.
    529           * @param  xSyncLength SYNC length in bytes. The 32bit word passed will be stored in the SYNCx registers from the MSb
    530           *         until the number of bytes in xSyncLength has been stored.
    531           *         This parameter is a pointer to @ref PktSyncLength.
    532           * @retval uint32_t Sync words. The format of the read 32 bit word is 0x|SYNC1|SYNC2|SYNC3|SYNC4|.
    533           */

   \                                 In section .text, align 2, keep-with-next
    534          uint32_t SpiritPktCommonGetSyncWords(PktSyncLength xSyncLength)
    535          {
   \                     SpiritPktCommonGetSyncWords: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    536            uint8_t tempRegValue[4];
    537            uint32_t tempRetValue=0;
   \   00000006   0x2500             MOVS     R5,#+0
    538          
    539            /* Reads the SYNCx registers value */
    540            g_xStatus = SpiritSpiReadRegisters(SYNC4_BASE, 4, tempRegValue);
   \   00000008   0xAA00             ADD      R2,SP,#+0
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x2036             MOVS     R0,#+54
   \   0000000E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000018   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    541          
    542            /* Rebuild the SYNC words */
    543            for(uint8_t i=0 ; i<4 ; i++)
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetSyncWords_0: (+1)
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2804             CMP      R0,#+4
   \   00000024   0xDA10             BGE.N    ??SpiritPktCommonGetSyncWords_1
    544            {
    545              if(i>2-(xSyncLength >>1))
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x0861             LSRS     R1,R4,#+1
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0xF1D1 0x0102      RSBS     R1,R1,#+2
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x4281             CMP      R1,R0
   \   00000034   0xDA06             BGE.N    ??SpiritPktCommonGetSyncWords_2
    546              {
    547                tempRetValue |= tempRegValue[i]<<(8*i);
   \   00000036   0xA900             ADD      R1,SP,#+0
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x5C41             LDRB     R1,[R0, R1]
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x00C2             LSLS     R2,R0,#+3
   \   00000040   0x4091             LSLS     R1,R1,R2
   \   00000042   0x430D             ORRS     R5,R1,R5
    548              }
    549            }
   \                     ??SpiritPktCommonGetSyncWords_2: (+1)
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0xE7EB             B.N      ??SpiritPktCommonGetSyncWords_0
    550          
    551            /* Return SYNC words */
    552            return tempRetValue;
   \                     ??SpiritPktCommonGetSyncWords_1: (+1)
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0xBD3E             POP      {R1-R5,PC}       ;; return
    553          
    554          }
    555          
    556          
    557          /**
    558           * @brief  Returns the variable length width (in number of bits).
    559           * @param  None.
    560           * @retval uint8_t Variable length width in bits.
    561           */

   \                                 In section .text, align 2, keep-with-next
    562          uint8_t SpiritPktCommonGetVarLengthWidth(void)
    563          {
   \                     SpiritPktCommonGetVarLengthWidth: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    564            uint8_t tempRegValue;
    565          
    566            /* Reads the PCKTCTRL3 register value */
    567            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    568          
    569            /* Rebuild and return value */
    570            return (tempRegValue & PCKTCTRL3_LEN_WID_MASK)+1;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    571          
    572          }
    573          
    574          
    575          /**
    576           * @brief  Sets the destination address for the Tx packet.
    577           * @param  cAddress Destination address.
    578           *         This parameter is an uint8_t.
    579           * @retval None.
    580           */

   \                                 In section .text, align 2, keep-with-next
    581          void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
    582          {
   \                     SpiritPktCommonSetDestinationAddress: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    583            /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
    584            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
   \   00000004   0xAA02             ADD      R2,SP,#+8
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204B             MOVS     R0,#+75
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    585          
    586          }
   \   0000001A   0xBD07             POP      {R0-R2,PC}       ;; return
    587          
    588          
    589          /**
    590           * @brief  Returns the settled destination address.
    591           * @param  None.
    592           * @retval uint8_t Transmitted destination address.
    593           */

   \                                 In section .text, align 2, keep-with-next
    594          uint8_t SpiritPktCommonGetTransmittedDestAddress(void)
    595          {
   \                     SpiritPktCommonGetTransmittedDestAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    596            uint8_t tempRegValue;
    597          
    598            /* Reads value on the PCKT_FLT_GOALS_SOURCE_ADDR register */
    599            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204B             MOVS     R0,#+75
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    600          
    601            /* Return value */
    602            return tempRegValue;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    603          
    604          }
    605          
    606          
    607          /**
    608           * @brief  Sets the node my address. When the filtering on my address is on, if the destination address extracted from the received packet is equal to the content of the
    609           *         my address, then the packet is accepted (this is the address of the node).
    610           * @param  cAddress Address of the present node.
    611           *         This parameter is an uint8_t.
    612           * @retval None.
    613           */

   \                                 In section .text, align 2, keep-with-next
    614          void SpiritPktCommonSetMyAddress(uint8_t cAddress)
    615          {
   \                     SpiritPktCommonSetMyAddress: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    616            /* Writes value on the PCKT_FLT_GOALS_TX_ADDR register */
    617            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_TX_ADDR_BASE, 1, &cAddress);
   \   00000004   0xAA02             ADD      R2,SP,#+8
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204E             MOVS     R0,#+78
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    618          
    619          }
   \   0000001A   0xBD07             POP      {R0-R2,PC}       ;; return
    620          
    621          
    622          /**
    623           * @brief  Returns the address of the present node.
    624           * @param  None.
    625           * @retval uint8_t My address (address of this node).
    626           */

   \                                 In section .text, align 2, keep-with-next
    627          uint8_t SpiritPktCommonGetMyAddress(void)
    628          {
   \                     SpiritPktCommonGetMyAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    629            uint8_t tempRegValue;
    630          
    631            /* Reads value on the PCKT_FLT_GOALS_TX_ADDR register */
    632            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_TX_ADDR_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204E             MOVS     R0,#+78
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    633          
    634            /* Return value */
    635            return tempRegValue;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    636          
    637          }
    638          
    639          
    640          /**
    641           * @brief  Sets the broadcast address. If the destination address extracted from the received packet is equal to the content of the
    642           *         BROADCAST_ADDR register, then the packet is accepted.
    643           * @param  cAddress Broadcast address.
    644           *         This parameter is an uint8_t.
    645           * @retval None.
    646           */

   \                                 In section .text, align 2, keep-with-next
    647          void SpiritPktCommonSetBroadcastAddress(uint8_t cAddress)
    648          {
   \                     SpiritPktCommonSetBroadcastAddress: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    649            /* Writes value on the PCKT_FLT_GOALS_BROADCAST register */
    650            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 1, &cAddress);
   \   00000004   0xAA02             ADD      R2,SP,#+8
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204C             MOVS     R0,#+76
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    651          
    652          }
   \   0000001A   0xBD07             POP      {R0-R2,PC}       ;; return
    653          
    654          
    655          /**
    656           * @brief  Returns the broadcast address.
    657           * @param  None.
    658           * @retval uint8_t Broadcast address.
    659           */

   \                                 In section .text, align 2, keep-with-next
    660          uint8_t SpiritPktCommonGetBroadcastAddress(void)
    661          {
   \                     SpiritPktCommonGetBroadcastAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    662            uint8_t tempRegValue;
    663          
    664            /* Reads value on the PCKT_FLT_GOALS_BROADCAST register */
    665            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204C             MOVS     R0,#+76
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    666          
    667            /* Return value */
    668            return tempRegValue;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    669          
    670          }
    671          
    672          
    673          /**
    674           * @brief  Sets the multicast address. When the multicast filtering is on, if the destination address extracted from the received packet is equal to the content of the
    675           *         MULTICAST_ADDR register, then the packet is accepted.
    676           * @param  cAddress Multicast address.
    677           *         This parameter is an uint8_t.
    678           * @retval None.
    679           */

   \                                 In section .text, align 2, keep-with-next
    680          void SpiritPktCommonSetMulticastAddress(uint8_t cAddress)
    681          {
   \                     SpiritPktCommonSetMulticastAddress: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    682            /* Writes value on the PCKT_FLT_GOALS_MULTICAST register */
    683            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_MULTICAST_BASE, 1, &cAddress);
   \   00000004   0xAA02             ADD      R2,SP,#+8
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204D             MOVS     R0,#+77
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    684          
    685          }
   \   0000001A   0xBD07             POP      {R0-R2,PC}       ;; return
    686          
    687          
    688          /**
    689           * @brief  Returns the multicast address.
    690           * @param  None.
    691           * @retval uint8_t Multicast address.
    692           */

   \                                 In section .text, align 2, keep-with-next
    693          uint8_t SpiritPktCommonGetMulticastAddress(void)
    694          {
   \                     SpiritPktCommonGetMulticastAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    695            uint8_t tempRegValue;
    696          
    697            /* Reads value on the PCKT_FLT_GOALS_MULTICAST register */
    698            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_MULTICAST_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204D             MOVS     R0,#+77
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    699          
    700            /* Return value */
    701            return tempRegValue;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    702          
    703          }
    704          
    705          
    706          /**
    707           * @brief  Sets the control mask. The 1 bits of the CONTROL_MASK indicate the
    708           *         bits to be used in filtering. (All 0s no filtering)
    709           * @param  lMask Control mask.
    710           *         This parameter is an uint32_t.
    711           * @retval None.
    712           */

   \                                 In section .text, align 2, keep-with-next
    713          void SpiritPktCommonSetCtrlMask(uint32_t lMask)
    714          {
   \                     SpiritPktCommonSetCtrlMask: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    715            uint8_t tempRegValue[4];
    716          
    717            /* Split the 32-bit value in 4 8-bit values */
    718            tempRegValue[0] = (uint8_t) lMask;
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    719            tempRegValue[1] = (uint8_t)(lMask >> 8);
   \   0000000A   0x0A20             LSRS     R0,R4,#+8
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    720            tempRegValue[2] = (uint8_t)(lMask >> 16);
   \   00000010   0x0C20             LSRS     R0,R4,#+16
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
    721            tempRegValue[3] = (uint8_t)(lMask >> 24);
   \   00000016   0x0E20             LSRS     R0,R4,#+24
   \   00000018   0xF88D 0x0003      STRB     R0,[SP, #+3]
    722          
    723            /* Writes values on the CKT_FLT_GOALS_CONTROLx_MASK registers */
    724            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_CONTROL0_MASK_BASE, 4, tempRegValue);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x2042             MOVS     R0,#+66
   \   00000022   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    725          
    726          }
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    727          
    728          
    729          /**
    730           * @brief  Returns the control mask. The 1 bits of the CONTROL_MASK indicate the
    731           *         bits to be used in filtering. (All 0s no filtering)
    732           * @param  None.
    733           * @retval uint32_t Control mask.
    734           */

   \                                 In section .text, align 2, keep-with-next
    735          uint32_t SpiritPktCommonGetCtrlMask(void)
    736          {
   \                     SpiritPktCommonGetCtrlMask: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    737            uint8_t tempRegValue[4];
    738            uint32_t tempRetValue=0;
   \   00000002   0x2400             MOVS     R4,#+0
    739          
    740            /* Reads the PCKT_FLT_GOALS_CONTROLx_MASK registers */
    741            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_CONTROL0_MASK_BASE, 4, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x2042             MOVS     R0,#+66
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    742          
    743            /* Rebuild the control mask value on a 32-bit integer variable */
    744            for(uint8_t i=0 ; i<4 ; i++)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetCtrlMask_0: (+1)
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xDA08             BGE.N    ??SpiritPktCommonGetCtrlMask_1
    745            {
    746              tempRetValue |= ((uint32_t)tempRegValue[i])<<(8*i);
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x5C41             LDRB     R1,[R0, R1]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x00C2             LSLS     R2,R0,#+3
   \   0000002C   0x4091             LSLS     R1,R1,R2
   \   0000002E   0x430C             ORRS     R4,R1,R4
    747            }
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xE7F3             B.N      ??SpiritPktCommonGetCtrlMask_0
    748          
    749            /* Return value */
    750            return tempRetValue;
   \                     ??SpiritPktCommonGetCtrlMask_1: (+1)
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    751          }
    752          
    753          /**
    754           * @brief  Sets the control field reference. If the bits enabled by the CONTROL_MASK
    755           *         match the ones of the control fields extracted from the received packet
    756           *         then the packet is accepted.
    757           * @param  lReference Control reference.
    758           *         This parameter is an uint32_t.
    759           * @retval None.
    760           */

   \                                 In section .text, align 2, keep-with-next
    761          void SpiritPktCommonSetCtrlReference(uint32_t lReference)
    762          {
   \                     SpiritPktCommonSetCtrlReference: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    763            uint8_t tempRegValue[4];
    764          
    765            /* Split the 32-bit value in 4 8-bit values */
    766            tempRegValue[0] = (uint8_t) lReference;
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    767            tempRegValue[1] = (uint8_t)(lReference >> 8);
   \   0000000A   0x0A20             LSRS     R0,R4,#+8
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    768            tempRegValue[2] = (uint8_t)(lReference >> 16);
   \   00000010   0x0C20             LSRS     R0,R4,#+16
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
    769            tempRegValue[3] = (uint8_t)(lReference >> 24);
   \   00000016   0x0E20             LSRS     R0,R4,#+24
   \   00000018   0xF88D 0x0003      STRB     R0,[SP, #+3]
    770          
    771            /* Writes values on the CKT_FLT_GOALS_CONTROLx_FIELD registers */
    772            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_CONTROL0_FIELD_BASE, 4, tempRegValue);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x2046             MOVS     R0,#+70
   \   00000022   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    773          
    774          }
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    775          
    776          
    777          /**
    778           * @brief  Returns the control field reference.
    779           * @param  None.
    780           * @retval uint32_t Control reference.
    781           */

   \                                 In section .text, align 2, keep-with-next
    782          uint32_t SpiritPktCommonGetCtrlReference(void)
    783          {
   \                     SpiritPktCommonGetCtrlReference: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    784            uint8_t tempRegValue[4];
    785            uint32_t tempRetValue=0;
   \   00000002   0x2400             MOVS     R4,#+0
    786          
    787            /* Reads the PCKT_FLT_GOALS_CONTROLx_FIELD registers */
    788            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_CONTROL0_FIELD_BASE, 4, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x2046             MOVS     R0,#+70
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    789          
    790            /* Rebuild the control mask value on a 32-bit integer variable */
    791            for(uint8_t i=0 ; i<4 ; i++)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetCtrlReference_0: (+1)
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xDA08             BGE.N    ??SpiritPktCommonGetCtrlReference_1
    792            {
    793              tempRetValue |= ((uint32_t)tempRegValue[i])<<(8*i);
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x5C41             LDRB     R1,[R0, R1]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x00C2             LSLS     R2,R0,#+3
   \   0000002C   0x4091             LSLS     R1,R1,R2
   \   0000002E   0x430C             ORRS     R4,R1,R4
    794            }
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0xE7F3             B.N      ??SpiritPktCommonGetCtrlReference_0
    795          
    796            /* Return value */
    797            return tempRetValue;
   \                     ??SpiritPktCommonGetCtrlReference_1: (+1)
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    798          }
    799          
    800          
    801          /**
    802           * @brief  Sets the TX control field.
    803           * @param  lField Tx contro field.
    804           *         This parameter is an uint32_t.
    805           * @retval None.
    806           */

   \                                 In section .text, align 2, keep-with-next
    807          void SpiritPktCommonSetTransmittedCtrlField(uint32_t lField)
    808          {
   \                     SpiritPktCommonSetTransmittedCtrlField: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    809            uint8_t tempRegValue[4];
    810          
    811            /* Split the 32-bit value in 4 8-bit values */
    812            tempRegValue[3] = (uint8_t) lField;
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xF88D 0x0003      STRB     R0,[SP, #+3]
    813            tempRegValue[2] = (uint8_t)(lField >> 8);
   \   0000000A   0x0A20             LSRS     R0,R4,#+8
   \   0000000C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    814            tempRegValue[1] = (uint8_t)(lField >> 16);
   \   00000010   0x0C20             LSRS     R0,R4,#+16
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
    815            tempRegValue[0] = (uint8_t)(lField >> 24);
   \   00000016   0x0E20             LSRS     R0,R4,#+24
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    816          
    817            /* Writes value on the TX_CTRL_FIELDx register */
    818            g_xStatus = SpiritSpiWriteRegisters(TX_CTRL_FIELD3_BASE, 4, tempRegValue);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x2068             MOVS     R0,#+104
   \   00000022   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    819          
    820          }
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    821          
    822          
    823          /**
    824           * @brief  Returns the Tx control field.
    825           * @param  None.
    826           * @retval uint32_t Control field of the transmitted packet.
    827           */

   \                                 In section .text, align 2, keep-with-next
    828          uint32_t SpiritPktCommonGetTransmittedCtrlField(void)
    829          {
   \                     SpiritPktCommonGetTransmittedCtrlField: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    830            uint8_t tempRegValue[4];
    831            uint32_t tempRetValue=0;
   \   00000002   0x2400             MOVS     R4,#+0
    832          
    833            /* Reads the TX_CTRL_FIELDx registers */
    834            g_xStatus = SpiritSpiReadRegisters(TX_CTRL_FIELD3_BASE, 4, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x2068             MOVS     R0,#+104
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    835          
    836            /* Rebuild value: build a 32-bit value from the read bytes */
    837            for(uint8_t i=0 ; i<4 ; i++)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetTransmittedCtrlField_0: (+1)
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xDA0A             BGE.N    ??SpiritPktCommonGetTransmittedCtrlField_1
    838            {
    839              tempRetValue |= ((uint32_t)tempRegValue[i])<<(8*(3-i));
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x5C41             LDRB     R1,[R0, R1]
   \   00000028   0xF1D0 0x0203      RSBS     R2,R0,#+3
   \   0000002C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002E   0x00D2             LSLS     R2,R2,#+3
   \   00000030   0x4091             LSLS     R1,R1,R2
   \   00000032   0x430C             ORRS     R4,R1,R4
    840            }
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0xE7F1             B.N      ??SpiritPktCommonGetTransmittedCtrlField_0
    841          
    842            /* Return value */
    843            return tempRetValue;
   \                     ??SpiritPktCommonGetTransmittedCtrlField_1: (+1)
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    844          
    845          }
    846          
    847          
    848          /**
    849           * @brief  If enabled RX packet is accepted if its destination address matches with My address.
    850           * @param  xNewState new state for DEST_VS_SOURCE_ADDRESS.
    851           *         This parameter can be S_ENABLE or S_DISABLE.
    852           * @retval None.
    853           */

   \                                 In section .text, align 2, keep-with-next
    854          void SpiritPktCommonFilterOnMyAddress(SpiritFunctionalState xNewState)
    855          {
   \                     SpiritPktCommonFilterOnMyAddress: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    856            uint8_t tempRegValue;
    857          
    858             /* Check the parameters */
    859            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktCommonFilterOnMyAddress_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktCommonFilterOnMyAddress_0
   \   00000010   0xF240 0x315B      MOVW     R1,#+859
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable43
   \   00000018   0x.... 0x....      BL       s_assert_failed
    860          
    861          
    862            /* Modify the register value: set or reset the TX source address control */
    863            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnMyAddress_0: (+1)
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x204F             MOVS     R0,#+79
   \   00000022   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    864          
    865            /* Set or reset the DESTINATION vs TX enabling bit */
    866            if(xNewState == S_ENABLE)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C01             CMP      R4,#+1
   \   00000036   0xD106             BNE.N    ??SpiritPktCommonFilterOnMyAddress_1
    867            {
    868              tempRegValue |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000044   0xE005             B.N      ??SpiritPktCommonFilterOnMyAddress_2
    869            }
    870            else
    871            {
    872              tempRegValue &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
   \                     ??SpiritPktCommonFilterOnMyAddress_1: (+1)
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    873            }
    874          
    875            /* Writes the new value on the PCKT_FLT_OPTIONS register */
    876            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnMyAddress_2: (+1)
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x204F             MOVS     R0,#+79
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000062   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    877          
    878          }
   \   00000068   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    879          
    880          
    881          /**
    882           * @brief  If enabled RX packet is accepted if its destination address matches with multicast address.
    883           * @param  xNewState new state for DEST_VS_MULTICAST_ADDRESS.
    884           *         This parameter can be S_ENABLE or S_DISABLE.
    885           * @retval None.
    886           */

   \                                 In section .text, align 2, keep-with-next
    887          void SpiritPktCommonFilterOnMulticastAddress(SpiritFunctionalState xNewState)
    888          {
   \                     SpiritPktCommonFilterOnMulticastAddress: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    889            uint8_t tempRegValue;
    890          
    891            /* Check the parameters */
    892            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktCommonFilterOnMulticastAddress_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktCommonFilterOnMulticastAddress_0
   \   00000010   0xF44F 0x715F      MOV      R1,#+892
   \   00000014   0x....             LDR.N    R0,??DataTable43
   \   00000016   0x.... 0x....      BL       s_assert_failed
    893          
    894            /* Reads the PCKT_FLT_OPTIONS register value */
    895            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnMulticastAddress_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x204F             MOVS     R0,#+79
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    896          
    897            /* Enable or disable the filtering option */
    898            if(xNewState == S_ENABLE)
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD106             BNE.N    ??SpiritPktCommonFilterOnMulticastAddress_1
    899            {
    900              tempRegValue |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
   \   00000036   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000042   0xE005             B.N      ??SpiritPktCommonFilterOnMulticastAddress_2
    901            }
    902            else
    903            {
    904              tempRegValue &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
   \                     ??SpiritPktCommonFilterOnMulticastAddress_1: (+1)
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    905            }
    906          
    907            /* Writes the new value on the PCKT_FLT_OPTIONS register */
    908            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnMulticastAddress_2: (+1)
   \   00000050   0xAA00             ADD      R2,SP,#+0
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x204F             MOVS     R0,#+79
   \   00000056   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000060   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    909          
    910          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    911          
    912          
    913          /**
    914           * @brief  If enabled RX packet is accepted if its destination address matches with broadcast address.
    915           * @param  xNewState new state for DEST_VS_BROADCAST_ADDRESS.
    916           *         This parameter can be S_ENABLE or S_DISABLE.
    917           * @retval None.
    918           */

   \                                 In section .text, align 2, keep-with-next
    919          void SpiritPktCommonFilterOnBroadcastAddress(SpiritFunctionalState xNewState)
    920          {
   \                     SpiritPktCommonFilterOnBroadcastAddress: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    921            uint8_t tempRegValue;
    922          
    923            /* Check the parameters */
    924            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktCommonFilterOnBroadcastAddress_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktCommonFilterOnBroadcastAddress_0
   \   00000010   0xF44F 0x7167      MOV      R1,#+924
   \   00000014   0x....             LDR.N    R0,??DataTable43
   \   00000016   0x.... 0x....      BL       s_assert_failed
    925          
    926            /* Reads the register value */
    927            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnBroadcastAddress_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x204F             MOVS     R0,#+79
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable45
   \   0000002A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    928          
    929            /* Enable or disable the filtering option */
    930            if(xNewState == S_ENABLE)
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD106             BNE.N    ??SpiritPktCommonFilterOnBroadcastAddress_1
    931            {
    932              tempRegValue |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
   \   00000036   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000042   0xE005             B.N      ??SpiritPktCommonFilterOnBroadcastAddress_2
    933            }
    934            else
    935            {
    936              tempRegValue &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
   \                     ??SpiritPktCommonFilterOnBroadcastAddress_1: (+1)
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    937            }
    938          
    939            /* Writes the new value on the PCKT_FLT_OPTIONS register */
    940            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnBroadcastAddress_2: (+1)
   \   00000050   0xAA00             ADD      R2,SP,#+0
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x204F             MOVS     R0,#+79
   \   00000056   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable45
   \   00000060   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    941          
    942          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    943          
    944          
    945          /**
    946           * @brief  Returns the enable bit of the my address filtering.
    947           * @param  None.
    948           * @retval SpiritFunctionalState This parameter can be S_ENABLE or S_DISABLE.
    949           */

   \                                 In section .text, align 2, keep-with-next
    950          SpiritFunctionalState SpiritPktCommonGetFilterOnMyAddress(void)
    951          {
   \                     SpiritPktCommonGetFilterOnMyAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    952            uint8_t tempRegValue;
    953          
    954            /* Reads the register value */
    955            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204F             MOVS     R0,#+79
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable45
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    956          
    957            /* Gets the enable/disable bit in form of SpiritFunctionalState type */
    958            if(tempRegValue & 0x08)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x0700             LSLS     R0,R0,#+28
   \   0000001E   0xD501             BPL.N    ??SpiritPktCommonGetFilterOnMyAddress_0
    959            {
    960              return S_ENABLE;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??SpiritPktCommonGetFilterOnMyAddress_1
    961            }
    962            else
    963            {
    964              return S_DISABLE;
   \                     ??SpiritPktCommonGetFilterOnMyAddress_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetFilterOnMyAddress_1: (+1)
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    965            }
    966          
    967          }
    968          
    969          /**
    970           * @brief  Returns the enable bit of the multicast address filtering.
    971           * @param  None.
    972           * @retval SpiritFunctionalState This parameter can be S_ENABLE or S_DISABLE.
    973           */

   \                                 In section .text, align 2, keep-with-next
    974          SpiritFunctionalState SpiritPktCommonGetFilterOnMulticastAddress(void)
    975          {
   \                     SpiritPktCommonGetFilterOnMulticastAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    976            uint8_t tempRegValue;
    977          
    978            /* Reads the register value */
    979            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204F             MOVS     R0,#+79
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable45
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    980          
    981            /* Get the enable/disable bit in form of SpiritFunctionalState type */
    982            if(tempRegValue & 0x04)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x0740             LSLS     R0,R0,#+29
   \   0000001E   0xD501             BPL.N    ??SpiritPktCommonGetFilterOnMulticastAddress_0
    983            {
    984              return S_ENABLE;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??SpiritPktCommonGetFilterOnMulticastAddress_1
    985            }
    986            else
    987            {
    988              return S_DISABLE;
   \                     ??SpiritPktCommonGetFilterOnMulticastAddress_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetFilterOnMulticastAddress_1: (+1)
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    989            }
    990          
    991          }
    992          
    993          /**
    994           * @brief  Returns the enable bit of the broadcast address filtering.
    995           * @param  None.
    996           * @retval SpiritFunctionalState This parameter can be S_ENABLE or S_DISABLE.
    997           */

   \                                 In section .text, align 2, keep-with-next
    998          SpiritFunctionalState SpiritPktCommonGetFilterOnBroadcastAddress(void)
    999          {
   \                     SpiritPktCommonGetFilterOnBroadcastAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1000            uint8_t tempRegValue;
   1001          
   1002            /* Reads the register value */
   1003            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204F             MOVS     R0,#+79
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable45
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1004          
   1005            /* Get the enable/disable bit in form of SpiritFunctionalState type */
   1006            if(tempRegValue & 0x02)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD501             BPL.N    ??SpiritPktCommonGetFilterOnBroadcastAddress_0
   1007            {
   1008              return S_ENABLE;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??SpiritPktCommonGetFilterOnBroadcastAddress_1
   1009            }
   1010            else
   1011            {
   1012              return S_DISABLE;
   \                     ??SpiritPktCommonGetFilterOnBroadcastAddress_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetFilterOnBroadcastAddress_1: (+1)
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
   1013            }
   1014          
   1015          }
   1016          
   1017          
   1018          /**
   1019           * @brief  Returns the destination address of the received packet.
   1020           * @param  None.
   1021           * @retval uint8_t Destination address of the received address.
   1022           */

   \                                 In section .text, align 2, keep-with-next
   1023          uint8_t SpiritPktCommonGetReceivedDestAddress(void)
   1024          {
   \                     SpiritPktCommonGetReceivedDestAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1025            uint8_t tempRegValue;
   1026          
   1027            /* Reads the RX_ADDR_FIELD0 register value */
   1028            g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20D3             MOVS     R0,#+211
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable45
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1029          
   1030            /* Return value */
   1031            return tempRegValue;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xBD0E             POP      {R1-R3,PC}       ;; return
   1032          
   1033          }
   1034          
   1035          
   1036          /**
   1037           * @brief  Returns the control field of the received packet.
   1038           * @param  None.
   1039           * @retval uint32_t Received control field.
   1040           */

   \                                 In section .text, align 2, keep-with-next
   1041          uint32_t SpiritPktCommonGetReceivedCtrlField(void)
   1042          {
   \                     SpiritPktCommonGetReceivedCtrlField: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   1043            uint8_t tempRegValue[4];
   1044            uint32_t tempRetValue=0;
   \   00000002   0x2400             MOVS     R4,#+0
   1045          
   1046            /* Reads the PCKT_FLT_GOALS_CONTROLx_MASK registers */
   1047            g_xStatus = SpiritSpiReadRegisters(RX_CTRL_FIELD0_BASE, 4, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x20CE             MOVS     R0,#+206
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable45
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1048          
   1049            /* Rebuild the control mask value on a 32-bit integer variable */
   1050            for(uint8_t i=0 ; i<4 ; i++)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetReceivedCtrlField_0: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2804             CMP      R0,#+4
   \   0000001E   0xDA08             BGE.N    ??SpiritPktCommonGetReceivedCtrlField_1
   1051            {
   1052              tempRetValue |= ((uint32_t)tempRegValue[i])<<(8*i);
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x5C41             LDRB     R1,[R0, R1]
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x00C2             LSLS     R2,R0,#+3
   \   0000002A   0x4091             LSLS     R1,R1,R2
   \   0000002C   0x430C             ORRS     R4,R1,R4
   1053            }
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0xE7F3             B.N      ??SpiritPktCommonGetReceivedCtrlField_0
   1054          
   1055            /* Returns value */
   1056            return tempRetValue;
   \                     ??SpiritPktCommonGetReceivedCtrlField_1: (+1)
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1057          }
   1058          
   1059          
   1060          /**
   1061           * @brief  Returns the CRC field of the received packet.
   1062           * @param  cCrcFieldVect array in which the CRC field has to be stored.
   1063           *         This parameter is an uint8_t array of 3 elements.
   1064           * @retval None.
   1065           */

   \                                 In section .text, align 2, keep-with-next
   1066          void SpiritPktCommonGetReceivedCrcField(uint8_t* cCrcFieldVect)
   1067          {
   \                     SpiritPktCommonGetReceivedCrcField: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1068            uint8_t tempRegValue[3],crcLength;
   1069            PktCrcMode crcMode;
   1070            
   1071            /* Gets the CRC mode in PktCrcMode enum */
   1072            crcMode=SpiritPktCommonGetCrcMode();
   \   00000004   0x.... 0x....      BL       SpiritPktCommonGetCrcMode
   \   00000008   0x0005             MOVS     R5,R0
   1073            
   1074            /* Cast to uint8_t */
   1075            crcLength = (uint8_t)crcMode;
   \   0000000A   0x002E             MOVS     R6,R5
   1076            
   1077            /* Obtains the real length: see the @ref PktCrcMode enumeration */
   1078            crcLength >>= 5;
   \   0000000C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000E   0x0976             LSRS     R6,R6,#+5
   1079            if(crcLength>=3) crcLength--;
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x2E03             CMP      R6,#+3
   \   00000014   0xDB00             BLT.N    ??SpiritPktCommonGetReceivedCrcField_0
   \   00000016   0x1E76             SUBS     R6,R6,#+1
   1080            
   1081            /* Reads the CRC_FIELDx registers value */
   1082            g_xStatus = SpiritSpiReadRegisters(CRC_FIELD2_BASE, 3,tempRegValue);
   \                     ??SpiritPktCommonGetReceivedCrcField_0: (+1)
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0x2103             MOVS     R1,#+3
   \   0000001C   0x20CB             MOVS     R0,#+203
   \   0000001E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable45
   \   00000026   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002A   0x8001             STRH     R1,[R0, #+0]
   1083            
   1084            /* Sets the array to be returned */
   1085            for(uint8_t i=0 ; i<3 ; i++)
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetReceivedCrcField_1: (+1)
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x2803             CMP      R0,#+3
   \   00000032   0xDA0F             BGE.N    ??SpiritPktCommonGetReceivedCrcField_2
   1086            {
   1087              if(i<crcLength) 
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000038   0x42B0             CMP      R0,R6
   \   0000003A   0xD206             BCS.N    ??SpiritPktCommonGetReceivedCrcField_3
   1088              {
   1089                cCrcFieldVect[i]=tempRegValue[2-i];
   \   0000003C   0xA900             ADD      R1,SP,#+0
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x1A09             SUBS     R1,R1,R0
   \   00000042   0x7889             LDRB     R1,[R1, #+2]
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x5501             STRB     R1,[R0, R4]
   \   00000048   0xE002             B.N      ??SpiritPktCommonGetReceivedCrcField_4
   1090              }
   1091              else 
   1092              {
   1093                cCrcFieldVect[i]=0;
   \                     ??SpiritPktCommonGetReceivedCrcField_3: (+1)
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x5501             STRB     R1,[R0, R4]
   1094              }
   1095            }
   \                     ??SpiritPktCommonGetReceivedCrcField_4: (+1)
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0xE7EC             B.N      ??SpiritPktCommonGetReceivedCrcField_1
   1096            
   1097          }
   \                     ??SpiritPktCommonGetReceivedCrcField_2: (+1)
   \   00000054   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   1098          
   1099          
   1100          /**
   1101           * @brief  Sets the AUTO ACKNOLEDGEMENT mechanism on the receiver. When the feature is enabled and
   1102           *         a data packet has been correctly received, then an acknowledgement packet is sent back to the originator of the received
   1103           *         packet. If the PIGGYBACKING bit is also set, payload data will be read from the FIFO; otherwise an empty packet is sent
   1104           *         only containing the source and destination addresses and the sequence number of the packet being acknowledged.
   1105           * @param  xAutoAck new state for autoack.
   1106           *         This parameter can be: S_ENABLE or S_DISABLE.
   1107           * @param  xPiggybacking new state for autoack.
   1108           *         This parameter can be: S_ENABLE or S_DISABLE.
   1109           * @retval None.
   1110           */

   \                                 In section .text, align 2, keep-with-next
   1111          void SpiritPktCommonAutoAck(SpiritFunctionalState xAutoAck , SpiritFunctionalState xPiggybacking)
   1112          {
   \                     SpiritPktCommonAutoAck: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1113            uint8_t tempRegValue[2];
   1114          
   1115            /* Check the parameters */
   1116            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xAutoAck));
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD007             BEQ.N    ??SpiritPktCommonAutoAck_0
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C01             CMP      R4,#+1
   \   00000012   0xD004             BEQ.N    ??SpiritPktCommonAutoAck_0
   \   00000014   0xF240 0x415C      MOVW     R1,#+1116
   \   00000018   0x....             LDR.N    R0,??DataTable43
   \   0000001A   0x.... 0x....      BL       s_assert_failed
   1117            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xPiggybacking));
   \                     ??SpiritPktCommonAutoAck_0: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD007             BEQ.N    ??SpiritPktCommonAutoAck_1
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D01             CMP      R5,#+1
   \   00000028   0xD004             BEQ.N    ??SpiritPktCommonAutoAck_1
   \   0000002A   0xF240 0x415D      MOVW     R1,#+1117
   \   0000002E   0x....             LDR.N    R0,??DataTable43
   \   00000030   0x.... 0x....      BL       s_assert_failed
   1118            /* Check if piggybacking is enabled and autoack is disabled */
   1119            s_assert_param(!(xPiggybacking==S_ENABLE && xAutoAck==S_DISABLE));
   \                     ??SpiritPktCommonAutoAck_1: (+1)
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D01             CMP      R5,#+1
   \   00000038   0xD107             BNE.N    ??SpiritPktCommonAutoAck_2
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD104             BNE.N    ??SpiritPktCommonAutoAck_2
   \   00000040   0xF240 0x415F      MOVW     R1,#+1119
   \   00000044   0x....             LDR.N    R0,??DataTable43
   \   00000046   0x.... 0x....      BL       s_assert_failed
   1120          
   1121            /* Reads the PROTOCOL[1:0] registers value */
   1122            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
   \                     ??SpiritPktCommonAutoAck_2: (+1)
   \   0000004A   0xAA00             ADD      R2,SP,#+0
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0x2051             MOVS     R0,#+81
   \   00000050   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x....             LDR.N    R0,??DataTable45
   \   00000058   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000005C   0x8001             STRH     R1,[R0, #+0]
   1123          
   1124            /* Sets the specified LLP option */
   1125            /* Autoack setting */
   1126            if(xAutoAck == S_ENABLE)
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C01             CMP      R4,#+1
   \   00000062   0xD106             BNE.N    ??SpiritPktCommonAutoAck_3
   1127            {
   1128              tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
   \   00000064   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000068   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000006C   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000070   0xE005             B.N      ??SpiritPktCommonAutoAck_4
   1129            }
   1130            else
   1131            {
   1132              tempRegValue[1] &= (~PROTOCOL0_AUTO_ACK_MASK);
   \                     ??SpiritPktCommonAutoAck_3: (+1)
   \   00000072   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000076   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000007A   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1133            }
   1134          
   1135            /* Piggybacking setting */
   1136            if(xPiggybacking == S_ENABLE)
   \                     ??SpiritPktCommonAutoAck_4: (+1)
   \   0000007E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   0x2D01             CMP      R5,#+1
   \   00000082   0xD106             BNE.N    ??SpiritPktCommonAutoAck_5
   1137            {
   1138              tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
   \   00000084   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000088   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000008C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000090   0xE005             B.N      ??SpiritPktCommonAutoAck_6
   1139            }
   1140            else
   1141            {
   1142              tempRegValue[0] &= (~PROTOCOL1_PIGGYBACKING_MASK);
   \                     ??SpiritPktCommonAutoAck_5: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000009A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1143            }
   1144          
   1145            /* Writes data on the PROTOCOL[1:0] registers */
   1146            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
   \                     ??SpiritPktCommonAutoAck_6: (+1)
   \   0000009E   0xAA00             ADD      R2,SP,#+0
   \   000000A0   0x2102             MOVS     R1,#+2
   \   000000A2   0x2051             MOVS     R0,#+81
   \   000000A4   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   \   000000AA   0x....             LDR.N    R0,??DataTable45
   \   000000AC   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000B0   0x8001             STRH     R1,[R0, #+0]
   1147          
   1148          }
   \   000000B2   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   1149          
   1150          
   1151          /**
   1152           * @brief  Sets the AUTO ACKNOLEDGEMENT mechanism on the transmitter. On the transmitter side, the NACK_TX field can be used to require or not an acknowledgment for each individual packet: if
   1153           *         NACK_TX is set to "1" then acknowledgment will not be required; if NACK_TX is set to "0" then acknowledgment will be
   1154           *         required.
   1155           * @param  xNewState new state for TX_AUTOACK.
   1156           *         This parameter can be: S_ENABLE or S_DISABLE.
   1157           * @retval None.
   1158           */

   \                                 In section .text, align 2, keep-with-next
   1159          void SpiritPktCommonRequireAck(SpiritFunctionalState xNewState)
   1160          {
   \                     SpiritPktCommonRequireAck: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1161            uint8_t tempRegValue;
   1162          
   1163            /* Check the parameters */
   1164            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktCommonRequireAck_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktCommonRequireAck_0
   \   00000010   0xF240 0x418C      MOVW     R1,#+1164
   \   00000014   0x....             LDR.N    R0,??DataTable43
   \   00000016   0x.... 0x....      BL       s_assert_failed
   1165          
   1166            /* Reads value on the PROTOCOL0 register */
   1167            g_xStatus = SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonRequireAck_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2052             MOVS     R0,#+82
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable45
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
   1168          
   1169            /* Enables or disables the ack requirement option */
   1170            if(xNewState == S_DISABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD106             BNE.N    ??SpiritPktCommonRequireAck_1
   1171            {
   1172              tempRegValue |= PROTOCOL0_NACK_TX_MASK;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritPktCommonRequireAck_2
   1173            }
   1174            else
   1175            {
   1176              tempRegValue &= ~PROTOCOL0_NACK_TX_MASK;
   \                     ??SpiritPktCommonRequireAck_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1177            }
   1178          
   1179            /* Writes value on the PROTOCOL0 register */
   1180            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonRequireAck_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2052             MOVS     R0,#+82
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable45
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
   1181          
   1182          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1183          
   1184          
   1185          /**
   1186           * @brief  Sets the TX sequence number to be used to start counting.
   1187           * @param  cSeqNumberReload new value for Tx seq number reload.
   1188           * @retval None.
   1189           */

   \                                 In section .text, align 2, keep-with-next
   1190          void SpiritPktCommonSetTransmittedSeqNumberReload(uint8_t cSeqNumberReload){
   \                     SpiritPktCommonSetTransmittedSeqNumberReload: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1191            uint8_t tempRegValue;
   1192          
   1193            /* Check the parameters */
   1194            s_assert_param(IS_PKT_SEQ_NUMBER_RELOAD(cSeqNumberReload));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C04             CMP      R4,#+4
   \   00000008   0xDB04             BLT.N    ??SpiritPktCommonSetTransmittedSeqNumberReload_0
   \   0000000A   0xF240 0x41AA      MOVW     R1,#+1194
   \   0000000E   0x....             LDR.N    R0,??DataTable43
   \   00000010   0x.... 0x....      BL       s_assert_failed
   1195          
   1196            /* Reads value on the PROTOCOL2 register */
   1197            g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetTransmittedSeqNumberReload_0: (+1)
   \   00000014   0xAA00             ADD      R2,SP,#+0
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2050             MOVS     R0,#+80
   \   0000001A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0x....             LDR.N    R0,??DataTable45
   \   00000022   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000026   0x8001             STRH     R1,[R0, #+0]
   1198          
   1199            tempRegValue &= 0xE7;
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xF010 0x00E7      ANDS     R0,R0,#0xE7
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1200            tempRegValue |= (cSeqNumberReload << 3);
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xEA50 0x00C4      ORRS     R0,R0,R4, LSL #+3
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1201          
   1202            /* Writes value on the PROTOCOL2 register */
   1203            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \   00000040   0xAA00             ADD      R2,SP,#+0
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x2050             MOVS     R0,#+80
   \   00000046   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x....             LDR.N    R0,??DataTable45
   \   0000004E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000052   0x8001             STRH     R1,[R0, #+0]
   1204          
   1205          }
   \   00000054   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1206          
   1207          
   1208          /**
   1209           * @brief  Sets the TX sequence number to be used to start counting.
   1210           * @param  cSeqNumberReload new value for Tx seq number reload.
   1211           *         This parameter can be: S_ENABLE or S_DISABLE.
   1212           * @retval None.
   1213           */

   \                                 In section .text, align 2, keep-with-next
   1214          void SpiritPktCommonSetNMaxReTx(PktNMaxReTx xNMaxReTx)
   1215          {
   \                     SpiritPktCommonSetNMaxReTx: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1216            uint8_t tempRegValue;
   1217          
   1218            /* Check the parameters */
   1219            s_assert_param(IS_PKT_NMAX_RETX(xNMaxReTx));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD031             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C10             CMP      R4,#+16
   \   0000000E   0xD02E             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C20             CMP      R4,#+32
   \   00000014   0xD02B             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C30             CMP      R4,#+48
   \   0000001A   0xD028             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C40             CMP      R4,#+64
   \   00000020   0xD025             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C50             CMP      R4,#+80
   \   00000026   0xD022             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C60             CMP      R4,#+96
   \   0000002C   0xD01F             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C70             CMP      R4,#+112
   \   00000032   0xD01C             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C80             CMP      R4,#+128
   \   00000038   0xD019             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C90             CMP      R4,#+144
   \   0000003E   0xD016             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2CA0             CMP      R4,#+160
   \   00000044   0xD013             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2CB0             CMP      R4,#+176
   \   0000004A   0xD010             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2CC0             CMP      R4,#+192
   \   00000050   0xD00D             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2CD0             CMP      R4,#+208
   \   00000056   0xD00A             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2CE0             CMP      R4,#+224
   \   0000005C   0xD007             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2CF0             CMP      R4,#+240
   \   00000062   0xD004             BEQ.N    ??SpiritPktCommonSetNMaxReTx_0
   \   00000064   0xF240 0x41C3      MOVW     R1,#+1219
   \   00000068   0x....             LDR.N    R0,??DataTable52
   \   0000006A   0x.... 0x....      BL       s_assert_failed
   1220          
   1221            /* Reads the PROTOCOL0 register value */
   1222            g_xStatus = SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonSetNMaxReTx_0: (+1)
   \   0000006E   0xAA00             ADD      R2,SP,#+0
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x2052             MOVS     R0,#+82
   \   00000074   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x....             LDR.N    R0,??DataTable45
   \   0000007C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000080   0x8001             STRH     R1,[R0, #+0]
   1223          
   1224            /* Build the value to be written */
   1225            tempRegValue &= ~PROTOCOL0_NMAX_RETX_MASK;
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000008A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1226            tempRegValue |= xNMaxReTx;
   \   0000008E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000092   0x4320             ORRS     R0,R4,R0
   \   00000094   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1227          
   1228            /* Writes value on the PROTOCOL0 register */
   1229            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
   \   00000098   0xAA00             ADD      R2,SP,#+0
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x2052             MOVS     R0,#+82
   \   0000009E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x....             LDR.N    R0,??DataTable45
   \   000000A6   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000AA   0x8001             STRH     R1,[R0, #+0]
   1230          
   1231          }
   \   000000AC   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1232          
   1233          
   1234          /**
   1235           * @brief  Returns the max number of automatic retransmission.
   1236           * @param  None.
   1237           * @retval uint8_t Max number of retransmissions.
   1238           *         This parameter is an uint8_t.
   1239           */

   \                                 In section .text, align 2, keep-with-next
   1240          uint8_t SpiritPktCommonGetNMaxReTx(void)
   1241          {
   \                     SpiritPktCommonGetNMaxReTx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1242            uint8_t tempRegValue;
   1243          
   1244            /* Reads the PROTOCOL0 register value */
   1245            g_xStatus = SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2052             MOVS     R0,#+82
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable45
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1246          
   1247            /* Build the value to be written */
   1248            return ((tempRegValue & PROTOCOL0_NMAX_RETX_MASK)>>4);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x0900             LSRS     R0,R0,#+4
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
   1249          
   1250          }
   1251          
   1252          
   1253          /**
   1254           * @brief  Returns the source address of the received packet.
   1255           * @param  None.
   1256           * @retval uint8_t Source address of the received packet.
   1257           */

   \                                 In section .text, align 2, keep-with-next
   1258          uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
   1259          {
   \                     SpiritPktCommonGetReceivedSourceAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1260            uint8_t tempRegValue;
   1261          
   1262            /* Reads the RX_ADDR_FIELD1 register value */
   1263            g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20D2             MOVS     R0,#+210
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable52_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1264          
   1265            /* Returns value */
   1266            return tempRegValue;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xBD0E             POP      {R1-R3,PC}       ;; return
   1267          
   1268          }
   1269          
   1270          
   1271          /**
   1272           * @brief  Returns the sequence number of the received packet.
   1273           * @param  None.
   1274           * @retval uint8_t Received Sequence number.
   1275           */

   \                                 In section .text, align 2, keep-with-next
   1276          uint8_t SpiritPktCommonGetReceivedSeqNumber(void)
   1277          {
   \                     SpiritPktCommonGetReceivedSeqNumber: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1278            uint8_t tempRegValue;
   1279          
   1280            /* Reads the RX_PCKT_INFO register value */
   1281            g_xStatus = SpiritSpiReadRegisters(RX_PCKT_INFO_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C3             MOVS     R0,#+195
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable52_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1282          
   1283            /* Obtains and returns the sequence number */
   1284            return tempRegValue & 0x03;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
   1285          
   1286          }
   1287          
   1288          
   1289          /**
   1290           * @brief  Returns the Nack bit of the received packet
   1291           * @param  None.
   1292           * @retval uint8_t Value of the Nack bit.
   1293           */

   \                                 In section .text, align 2, keep-with-next
   1294          uint8_t SpiritPktCommonGetReceivedNackRx(void)
   1295          {
   \                     SpiritPktCommonGetReceivedNackRx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1296            uint8_t tempRegValue;
   1297          
   1298            /* Reads the RX_PCKT_INFO register value */
   1299            g_xStatus = SpiritSpiReadRegisters(RX_PCKT_INFO_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C3             MOVS     R0,#+195
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable52_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1300          
   1301            /* Obtains and returns the RX nack bit */
   1302            return (tempRegValue >> 2) & 0x01;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
   1303          
   1304          }
   1305          
   1306          
   1307          /**
   1308           * @brief  Returns the sequence number of the transmitted packet.
   1309           * @param  None.
   1310           * @retval uint8_t Sequence number of the transmitted packet.
   1311           */

   \                                 In section .text, align 2, keep-with-next
   1312          uint8_t SpiritPktCommonGetTransmittedSeqNumber(void)
   1313          {
   \                     SpiritPktCommonGetTransmittedSeqNumber: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1314            uint8_t tempRegValue;
   1315          
   1316            /* Reads the TX_PCKT_INFO register value */
   1317            g_xStatus = SpiritSpiReadRegisters(TX_PCKT_INFO_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C2             MOVS     R0,#+194
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable52_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1318          
   1319            /* Obtains and returns the TX sequence number */
   1320            return (tempRegValue >> 4) & 0x07;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF3C0 0x1002      UBFX     R0,R0,#+4,#+3
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
   1321          
   1322          }
   1323          
   1324          
   1325          /**
   1326           * @brief  Returns the number of retransmission done on the transmitted packet.
   1327           * @param  None.
   1328           * @retval uint8_t Number of retransmissions done until now.
   1329           */

   \                                 In section .text, align 2, keep-with-next
   1330          uint8_t SpiritPktCommonGetNReTx(void)
   1331          {
   \                     SpiritPktCommonGetNReTx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1332            uint8_t tempRetValue;
   1333          
   1334            /* Reads the TX_PCKT_INFO register value */
   1335            g_xStatus = SpiritSpiReadRegisters(TX_PCKT_INFO_BASE, 1, &tempRetValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C2             MOVS     R0,#+194
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable52_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1336          
   1337            /* Obtains and returns the number of retransmission done */
   1338            return (tempRetValue & 0x0F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
   1339          
   1340          }
   1341          
   1342          
   1343          /**
   1344           * @brief  If enabled RX packet is accepted only if the masked control field matches the
   1345           *         masked control field reference (CONTROL_MASK & CONTROL_FIELD_REF == CONTROL_MASK & RX_CONTROL_FIELD).
   1346           * @param  xNewState new state for Control filtering enable bit.
   1347           *         This parameter can be S_ENABLE or S_DISABLE.
   1348           * @retval None.
   1349           * @note   This filtering control is enabled by default but the control mask is by default set to 0.
   1350           *         As a matter of fact the user has to enable the control filtering bit after the packet initialization
   1351           *         because the PktInit routine disables it.
   1352           */

   \                                 In section .text, align 2, keep-with-next
   1353          void SpiritPktCommonFilterOnControlField(SpiritFunctionalState xNewState)
   1354          {
   \                     SpiritPktCommonFilterOnControlField: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1355            uint8_t tempRegValue;
   1356          
   1357             /* Check the parameters */
   1358            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktCommonFilterOnControlField_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktCommonFilterOnControlField_0
   \   00000010   0xF240 0x514E      MOVW     R1,#+1358
   \   00000014   0x....             LDR.N    R0,??DataTable52
   \   00000016   0x.... 0x....      BL       s_assert_failed
   1359          
   1360          
   1361            /* Modify the register value: set or reset the control bit filtering */
   1362            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnControlField_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x204F             MOVS     R0,#+79
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable52_1
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
   1363          
   1364            /* Set or reset the CONTROL filtering enabling bit */
   1365            if(xNewState == S_ENABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xD106             BNE.N    ??SpiritPktCommonFilterOnControlField_1
   1366            {
   1367              tempRegValue |= PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritPktCommonFilterOnControlField_2
   1368            }
   1369            else
   1370            {
   1371              tempRegValue &= ~PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK;
   \                     ??SpiritPktCommonFilterOnControlField_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1372            }
   1373          
   1374            /* Writes the new value on the PCKT_FLT_OPTIONS register */
   1375            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktCommonFilterOnControlField_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x204F             MOVS     R0,#+79
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable52_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
   1376          
   1377          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1378          
   1379          
   1380          /**
   1381           * @brief  Returns the enable bit of the control field filtering.
   1382           * @param  None.
   1383           * @retval SpiritFunctionalState This parameter can be S_ENABLE or S_DISABLE.
   1384           */

   \                                 In section .text, align 2, keep-with-next
   1385          SpiritFunctionalState SpiritPktCommonGetFilterOnControlField(void)
   1386          {
   \                     SpiritPktCommonGetFilterOnControlField: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1387            uint8_t tempRegValue;
   1388          
   1389            /* Reads the register value */
   1390            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204F             MOVS     R0,#+79
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable52_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
   1391          
   1392            /* Gets the enable/disable bit in form of SpiritFunctionalState type */
   1393            if(tempRegValue & PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x0680             LSLS     R0,R0,#+26
   \   0000001E   0xD501             BPL.N    ??SpiritPktCommonGetFilterOnControlField_0
   1394            {
   1395              return S_ENABLE;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??SpiritPktCommonGetFilterOnControlField_1
   1396            }
   1397            else
   1398            {
   1399              return S_DISABLE;
   \                     ??SpiritPktCommonGetFilterOnControlField_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktCommonGetFilterOnControlField_1: (+1)
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
   1400            }
   1401          
   1402          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 42H, 61H, 73H, 65H
   \              0x35 0x5C    
   \              0x42 0x61    
   \              0x73 0x65    
   \   00000020   0x5F 0x30          DC8 5FH, 30H, 32H, 5CH, 32H, 30H, 31H, 33H
   \              0x32 0x5C    
   \              0x32 0x30    
   \              0x31 0x33    
   \   00000028   0x5F 0x31          DC8 5FH, 31H, 31H, 5FH, 32H, 35H, 5FH, 53H
   \              0x31 0x5F    
   \              0x32 0x35    
   \              0x5F 0x53    
   \   00000030   0x70 0x69          DC8 70H, 69H, 72H, 69H, 74H, 31H, 5FH, 45H
   \              0x72 0x69    
   \              0x74 0x31    
   \              0x5F 0x45    
   \   00000038   0x6C 0x65          DC8 6CH, 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H
   \              0x6B 0x74    
   \              0x72 0x6F    
   \              0x6C 0x75    
   \   00000040   0x78 0x5C          DC8 78H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000048   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000050   0x79 0x5F          DC8 79H, 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H
   \              0x50 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000058   0x74 0x5C          DC8 74H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000060   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000068   0x79 0x5C          DC8 79H, 5CH, 53H, 6FH, 75H, 72H, 63H, 65H
   \              0x53 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000070   0x5C 0x73          DC8 5CH, 73H, 72H, 63H, 5CH, 53H, 50H, 49H
   \              0x72 0x63    
   \              0x5C 0x53    
   \              0x50 0x49    
   \   00000078   0x52 0x49          DC8 52H, 49H, 54H, 5FH, 50H, 6BH, 74H, 43H
   \              0x54 0x5F    
   \              0x50 0x6B    
   \              0x74 0x43    
   \   00000080   0x6F 0x6D          DC8 6FH, 6DH, 6DH, 6FH, 6EH, 2EH, 63H, 0
   \              0x6D 0x6F    
   \              0x6E 0x2E    
   \              0x63 0x00    
   1403          
   1404          
   1405          /**
   1406           *@}
   1407           */
   1408          
   1409          /**
   1410           *@}
   1411           */
   1412          
   1413          
   1414          /**
   1415           *@}
   1416           */
   1417          
   1418          
   1419          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   SpiritPktCommonAutoAck
        24   -> SdkEvalSpiReadRegisters
        24   -> SdkEvalSpiWriteRegisters
        24   -> s_assert_failed
      16   SpiritPktCommonFec
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonFilterOnBroadcastAddress
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonFilterOnControlField
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonFilterOnCrc
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonFilterOnMulticastAddress
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonFilterOnMyAddress
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonGetBroadcastAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetControlLength
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetCrcMode
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetCtrlMask
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetCtrlReference
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetFilterOnBroadcastAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetFilterOnControlField
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetFilterOnCrc
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetFilterOnMulticastAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetFilterOnMyAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetMulticastAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetMyAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetNMaxReTx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetNReTx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetPreambleLength
        16   -> SdkEvalSpiReadRegisters
      24   SpiritPktCommonGetReceivedCrcField
        24   -> SdkEvalSpiReadRegisters
        24   -> SpiritPktCommonGetCrcMode
      16   SpiritPktCommonGetReceivedCtrlField
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetReceivedDestAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetReceivedNackRx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetReceivedSeqNumber
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetReceivedSourceAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetSyncLength
        16   -> SdkEvalSpiReadRegisters
      24   SpiritPktCommonGetSyncWords
        24   -> SdkEvalSpiReadRegisters
      24   SpiritPktCommonGetSyncxWord
        24   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetTransmittedCtrlField
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetTransmittedDestAddress
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetTransmittedSeqNumber
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonGetVarLengthWidth
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktCommonRequireAck
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonSetBroadcastAddress
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetControlLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonSetCrcMode
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonSetCtrlMask
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetCtrlReference
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetDestinationAddress
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetFixVarLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonSetMulticastAddress
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetMyAddress
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetNMaxReTx
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonSetPreambleLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonSetSyncLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      24   SpiritPktCommonSetSyncWords
        24   -> SdkEvalSpiWriteRegisters
      24   SpiritPktCommonSetSyncxWord
        24   -> SdkEvalSpiWriteRegisters
        24   -> s_assert_failed
      16   SpiritPktCommonSetTransmittedCtrlField
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktCommonSetTransmittedSeqNumberReload
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktCommonWhitening
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable43
       4  ??DataTable45
       4  ??DataTable52
       4  ??DataTable52_1
     136  ?_0
     180  SpiritPktCommonAutoAck
     106  SpiritPktCommonFec
     104  SpiritPktCommonFilterOnBroadcastAddress
     100  SpiritPktCommonFilterOnControlField
     106  SpiritPktCommonFilterOnCrc
     104  SpiritPktCommonFilterOnMulticastAddress
     106  SpiritPktCommonFilterOnMyAddress
      32  SpiritPktCommonGetBroadcastAddress
      36  SpiritPktCommonGetControlLength
      36  SpiritPktCommonGetCrcMode
      56  SpiritPktCommonGetCtrlMask
      56  SpiritPktCommonGetCtrlReference
      40  SpiritPktCommonGetFilterOnBroadcastAddress
      40  SpiritPktCommonGetFilterOnControlField
      42  SpiritPktCommonGetFilterOnCrc
      40  SpiritPktCommonGetFilterOnMulticastAddress
      40  SpiritPktCommonGetFilterOnMyAddress
      32  SpiritPktCommonGetMulticastAddress
      32  SpiritPktCommonGetMyAddress
      34  SpiritPktCommonGetNMaxReTx
      34  SpiritPktCommonGetNReTx
      40  SpiritPktCommonGetPreambleLength
      86  SpiritPktCommonGetReceivedCrcField
      54  SpiritPktCommonGetReceivedCtrlField
      30  SpiritPktCommonGetReceivedDestAddress
      36  SpiritPktCommonGetReceivedNackRx
      34  SpiritPktCommonGetReceivedSeqNumber
      30  SpiritPktCommonGetReceivedSourceAddress
      40  SpiritPktCommonGetSyncLength
      76  SpiritPktCommonGetSyncWords
      78  SpiritPktCommonGetSyncxWord
      60  SpiritPktCommonGetTransmittedCtrlField
      32  SpiritPktCommonGetTransmittedDestAddress
      36  SpiritPktCommonGetTransmittedSeqNumber
      40  SpiritPktCommonGetVarLengthWidth
     100  SpiritPktCommonRequireAck
      28  SpiritPktCommonSetBroadcastAddress
     112  SpiritPktCommonSetControlLength
     114  SpiritPktCommonSetCrcMode
      52  SpiritPktCommonSetCtrlMask
      52  SpiritPktCommonSetCtrlReference
      28  SpiritPktCommonSetDestinationAddress
      94  SpiritPktCommonSetFixVarLength
      28  SpiritPktCommonSetMulticastAddress
      28  SpiritPktCommonSetMyAddress
     174  SpiritPktCommonSetNMaxReTx
     274  SpiritPktCommonSetPreambleLength
     106  SpiritPktCommonSetSyncLength
      82  SpiritPktCommonSetSyncWords
     110  SpiritPktCommonSetSyncxWord
      52  SpiritPktCommonSetTransmittedCtrlField
      86  SpiritPktCommonSetTransmittedSeqNumberReload
     106  SpiritPktCommonWhitening

 
   136 bytes in section .rodata
 3 670 bytes in section .text
 
 3 670 bytes of CODE  memory
   136 bytes of CONST memory

Errors: none
Warnings: none
