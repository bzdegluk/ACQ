###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_DirectRF.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_DirectRF.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_DirectRF.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_DirectRF.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_DirectRF.c
      1          /**
      2           * @file    SPIRIT_DirectRF.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT direct transmission / receive modes.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          
     25          /* Includes ------------------------------------------------------------------*/
     26          #include "SPIRIT_DirectRF.h"
     27          #include "MCU_Interface.h"
     28          
     29          
     30          
     31          /**
     32           * @addtogroup SPIRIT_Libraries
     33           * @{
     34           */
     35          
     36          
     37          /**
     38           * @addtogroup SPIRIT_DirectRf
     39           * @{
     40           */
     41          
     42          
     43          /**
     44           * @defgroup DirectRf_Private_TypesDefinitions          Direct RF Private Types Definitions
     45           * @{
     46           */
     47          
     48          /**
     49           *@}
     50           */
     51          
     52          
     53          /**
     54           * @defgroup DirectRf_Private_Defines                   Direct RF Private Defines
     55           * @{
     56           */
     57          
     58          /**
     59           *@}
     60           */
     61          
     62          
     63          /**
     64           * @defgroup DirectRf_Private_Macros                    Direct RF Private Macros
     65           * @{
     66           */
     67          
     68          /**
     69           *@}
     70           */
     71          
     72          
     73          /**
     74           * @defgroup DirectRf_Private_Variables                 Direct RF Private Variables
     75           * @{
     76           */
     77          
     78          /**
     79           *@}
     80           */
     81          
     82          
     83          
     84          /**
     85           * @defgroup DirectRf_Private_FunctionPrototypes        Direct RF Private Function Prototypes
     86           * @{
     87           */
     88          
     89          /**
     90           *@}
     91           */
     92          
     93          
     94          /**
     95           * @defgroup DirectRf_Private_Functions                 Direct RF Private Functions
     96           * @{
     97           */
     98          
     99          /**
    100           * @brief  Sets the DirectRF RX mode of SPIRIT.
    101           * @param  xDirectRx code of the desired mode.
    102           *         This parameter can be any value of @ref DirectRx.
    103           * @retval None.
    104           */

   \                                 In section .text, align 2, keep-with-next
    105          void SpiritDirectRfSetRxMode(DirectRx xDirectRx)
    106          {
   \                     SpiritDirectRfSetRxMode: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    107            uint8_t tempRegValue;
    108          
    109            /* Check the parameters */
    110            s_assert_param(IS_DIRECT_RX(xDirectRx));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD009             BEQ.N    ??SpiritDirectRfSetRxMode_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C10             CMP      R4,#+16
   \   0000000E   0xD006             BEQ.N    ??SpiritDirectRfSetRxMode_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C20             CMP      R4,#+32
   \   00000014   0xD003             BEQ.N    ??SpiritDirectRfSetRxMode_0
   \   00000016   0x216E             MOVS     R1,#+110
   \   00000018   0x....             LDR.N    R0,??DataTable3
   \   0000001A   0x.... 0x....      BL       s_assert_failed
    111          
    112            /* Reads the register value */
    113            SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \                     ??SpiritDirectRfSetRxMode_0: (+1)
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x2031             MOVS     R0,#+49
   \   00000024   0x.... 0x....      BL       SdkEvalSpiReadRegisters
    114          
    115            /* Build the value to be stored */
    116            tempRegValue &= ~PCKTCTRL3_RX_MODE_MASK;
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xF010 0x00CF      ANDS     R0,R0,#0xCF
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
    117            tempRegValue |= (uint8_t)xDirectRx;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0x4320             ORRS     R0,R4,R0
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    118          
    119            /* Writes value on register */
    120            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   0000003E   0xAA00             ADD      R2,SP,#+0
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2031             MOVS     R0,#+49
   \   00000044   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0x....             LDR.N    R0,??DataTable3_1
   \   0000004C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    121          
    122          }
   \   00000052   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    123          
    124          
    125          /**
    126           * @brief  Returns the DirectRF RX mode of SPIRIT.
    127           * @param  None.
    128           * @retval DirectRx Direct Rx mode.
    129           */

   \                                 In section .text, align 2, keep-with-next
    130          DirectRx SpiritDirectRfGetRxMode(void)
    131          {
   \                     SpiritDirectRfGetRxMode: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    132            uint8_t tempRegValue;
    133          
    134            /* Reads the register value and mask the RX_Mode field */
    135            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable3_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    136          
    137            /* Rebuild and return value */
    138            return (DirectRx)(tempRegValue & 0x30);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x0030      ANDS     R0,R0,#0x30
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    139          
    140          }
    141          
    142          
    143          /**
    144           * @brief  Sets the TX mode of SPIRIT.
    145           * @param  xDirectTx code of the desired source.
    146           *         This parameter can be any value of @ref DirectTx.
    147           * @retval None.
    148           */

   \                                 In section .text, align 2, keep-with-next
    149          void SpiritDirectRfSetTxMode(DirectTx xDirectTx)
    150          {
   \                     SpiritDirectRfSetTxMode: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    151            uint8_t tempRegValue;
    152          
    153            /* Check the parameters */
    154            s_assert_param(IS_DIRECT_TX(xDirectTx));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00C             BEQ.N    ??SpiritDirectRfSetTxMode_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C04             CMP      R4,#+4
   \   0000000E   0xD009             BEQ.N    ??SpiritDirectRfSetTxMode_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD006             BEQ.N    ??SpiritDirectRfSetTxMode_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C0C             CMP      R4,#+12
   \   0000001A   0xD003             BEQ.N    ??SpiritDirectRfSetTxMode_0
   \   0000001C   0x219A             MOVS     R1,#+154
   \   0000001E   0x....             LDR.N    R0,??DataTable3
   \   00000020   0x.... 0x....      BL       s_assert_failed
    155          
    156            /* Reads the register value */
    157            SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \                     ??SpiritDirectRfSetTxMode_0: (+1)
   \   00000024   0xAA00             ADD      R2,SP,#+0
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2033             MOVS     R0,#+51
   \   0000002A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
    158          
    159            /* Build the value to be stored */
    160            tempRegValue &= ~PCKTCTRL1_TX_SOURCE_MASK;
   \   0000002E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000032   0xF010 0x00F3      ANDS     R0,R0,#0xF3
   \   00000036   0xF88D 0x0000      STRB     R0,[SP, #+0]
    161            tempRegValue |= (uint8_t)xDirectTx;
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x4320             ORRS     R0,R4,R0
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
    162          
    163            /* Writes value on register */
    164            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000044   0xAA00             ADD      R2,SP,#+0
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x2033             MOVS     R0,#+51
   \   0000004A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x....             LDR.N    R0,??DataTable3_1
   \   00000052   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000056   0x8001             STRH     R1,[R0, #+0]
    165          
    166          }
   \   00000058   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    167          
    168          
    169          /**
    170           * @brief  Returns the DirectRF TX mode of SPIRIT.
    171           * @param  None.
    172           * @retval DirectTx Direct Tx mode.
    173           */

   \                                 In section .text, align 2, keep-with-next
    174          DirectTx SpiritDirectRfGetTxMode(void)
    175          {
   \                     SpiritDirectRfGetTxMode: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    176            uint8_t tempRegValue;
    177          
    178            /* Reads the register value and mask the RX_Mode field */
    179            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2033             MOVS     R0,#+51
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable3_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    180          
    181            /* Returns value */
    182            return (DirectTx)(tempRegValue & 0x0C);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    183          
    184          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 42H, 61H, 73H, 65H
   \              0x35 0x5C    
   \              0x42 0x61    
   \              0x73 0x65    
   \   00000020   0x5F 0x30          DC8 5FH, 30H, 32H, 5CH, 32H, 30H, 31H, 33H
   \              0x32 0x5C    
   \              0x32 0x30    
   \              0x31 0x33    
   \   00000028   0x5F 0x31          DC8 5FH, 31H, 31H, 5FH, 32H, 35H, 5FH, 53H
   \              0x31 0x5F    
   \              0x32 0x35    
   \              0x5F 0x53    
   \   00000030   0x70 0x69          DC8 70H, 69H, 72H, 69H, 74H, 31H, 5FH, 45H
   \              0x72 0x69    
   \              0x74 0x31    
   \              0x5F 0x45    
   \   00000038   0x6C 0x65          DC8 6CH, 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H
   \              0x6B 0x74    
   \              0x72 0x6F    
   \              0x6C 0x75    
   \   00000040   0x78 0x5C          DC8 78H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000048   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000050   0x79 0x5F          DC8 79H, 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H
   \              0x50 0x72    
   \              0x6F 0x6A    
   \              0x65 0x63    
   \   00000058   0x74 0x5C          DC8 74H, 5CH, 53H, 50H, 49H, 52H, 49H, 54H
   \              0x53 0x50    
   \              0x49 0x52    
   \              0x49 0x54    
   \   00000060   0x31 0x5F          DC8 31H, 5FH, 4CH, 69H, 62H, 72H, 61H, 72H
   \              0x4C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \   00000068   0x79 0x5C          DC8 79H, 5CH, 53H, 6FH, 75H, 72H, 63H, 65H
   \              0x53 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \   00000070   0x5C 0x73          DC8 5CH, 73H, 72H, 63H, 5CH, 53H, 50H, 49H
   \              0x72 0x63    
   \              0x5C 0x53    
   \              0x50 0x49    
   \   00000078   0x52 0x49          DC8 52H, 49H, 54H, 5FH, 44H, 69H, 72H, 65H
   \              0x54 0x5F    
   \              0x44 0x69    
   \              0x72 0x65    
   \   00000080   0x63 0x74          DC8 63H, 74H, 52H, 46H, 2EH, 63H, 0
   \              0x52 0x46    
   \              0x2E 0x63    
   \              0x00         
   \   00000087   0x00               DC8 0
    185          
    186          
    187          /**
    188           *@}
    189           */
    190          
    191          /**
    192           *@}
    193           */
    194          
    195          
    196          /**
    197           *@}
    198           */
    199          
    200          
    201          
    202          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SpiritDirectRfGetRxMode
        16   -> SdkEvalSpiReadRegisters
      16   SpiritDirectRfGetTxMode
        16   -> SdkEvalSpiReadRegisters
      16   SpiritDirectRfSetRxMode
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritDirectRfSetTxMode
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
     136  ?_0
      34  SpiritDirectRfGetRxMode
      34  SpiritDirectRfGetTxMode
      84  SpiritDirectRfSetRxMode
      90  SpiritDirectRfSetTxMode

 
 136 bytes in section .rodata
 250 bytes in section .text
 
 250 bytes of CODE  memory
 136 bytes of CONST memory

Errors: none
Warnings: none
