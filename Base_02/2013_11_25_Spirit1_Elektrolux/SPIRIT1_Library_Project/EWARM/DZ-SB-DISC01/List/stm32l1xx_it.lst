###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:45
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\stm32l1xx_it.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\stm32l1xx_it.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\stm32l1xx_it.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\stm32l1xx_it.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\Base_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\stm32l1xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_it.c
      4            * @author  MCD Application Team
      5            * @version V3.3.0
      6            * @date    21-March-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @copy
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm32l1xx_it.h"
     25          
     26          extern uint16_t counter;
     27          extern uint8_t firstinterrupt;
     28          extern uint8_t command_buffer[60];
     29          extern int command_size;
     30          extern int command_index;
     31          extern int transfer;
     32          
     33          /* Private typedef -----------------------------------------------------------*/
     34          /* Private define ------------------------------------------------------------*/
     35          /* Private macro -------------------------------------------------------------*/
     36          /* Private variables ---------------------------------------------------------*/
     37          /* Private function prototypes -----------------------------------------------*/
     38          /* Private functions ---------------------------------------------------------*/
     39          
     40          /******************************************************************************/
     41          /*            Cortex-M3 Processor Exceptions Handlers                         */
     42          /******************************************************************************/
     43          
     44          /**
     45            * @brief  This function handles NMI exception.
     46            * @param  None
     47            * @retval : None
     48            */

   \                                 In section .text, align 2, keep-with-next
     49          void NMI_Handler(void)
     50          {
     51          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     52          
     53          /**
     54            * @brief  This function handles Hard Fault exception.
     55            * @param  None
     56            * @retval : None
     57            */

   \                                 In section .text, align 2, keep-with-next
     58          void HardFault_Handler(void)
     59          {
     60            /* Go to infinite loop when Hard Fault exception occurs */
     61            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     62            {
     63            }
     64          }
     65          
     66          /**
     67            * @brief  This function handles Memory Manage exception.
     68            * @param  None
     69            * @retval : None
     70            */

   \                                 In section .text, align 2, keep-with-next
     71          void MemManage_Handler(void)
     72          {
     73            /* Go to infinite loop when Memory Manage exception occurs */
     74            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??MemManage_Handler_0
     75            {
     76            }
     77          }
     78          
     79          /**
     80            * @brief  This function handles Bus Fault exception.
     81            * @param  None
     82            * @retval : None
     83            */

   \                                 In section .text, align 2, keep-with-next
     84          void BusFault_Handler(void)
     85          {
     86            /* Go to infinite loop when Bus Fault exception occurs */
     87            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??BusFault_Handler_0
     88            {
     89            }
     90          }
     91          
     92          /**
     93            * @brief  This function handles Usage Fault exception.
     94            * @param  None
     95            * @retval : None
     96            */

   \                                 In section .text, align 2, keep-with-next
     97          void UsageFault_Handler(void)
     98          {
     99            /* Go to infinite loop when Usage Fault exception occurs */
    100            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??UsageFault_Handler_0
    101            {
    102            }
    103          }
    104          
    105          /**
    106            * @brief  This function handles SVCall exception.
    107            * @param  None
    108            * @retval : None
    109            */

   \                                 In section .text, align 2, keep-with-next
    110          void SVC_Handler(void)
    111          {
    112          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    113          
    114          /**
    115            * @brief  This function handles Debug Monitor exception.
    116            * @param  None
    117            * @retval : None
    118            */

   \                                 In section .text, align 2, keep-with-next
    119          void DebugMon_Handler(void)
    120          {
    121          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    122          
    123          /**
    124            * @brief  This function handles PendSVC exception.
    125            * @param  None
    126            * @retval : None
    127            */

   \                                 In section .text, align 2, keep-with-next
    128          void PendSV_Handler(void)
    129          {
    130          }
   \                     PendSV_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    131          
    132          
    133          
    134          /*******************************************************************************
    135          * Function Name  : USB_LP_IRQHandler
    136          * Description    : This function handles USB Low Priority interrupts  requests.
    137          * Input          : None
    138          * Output         : None
    139          * Return         : None
    140          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    141          void USB_LP_IRQHandler(void)
    142          {
    143           // SdkEvalVCIntServRoutine();  /// bzdegluk
    144          
    145          }
   \                     USB_LP_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    146          
    147          
    148          
    149          /******************************************************************************/
    150          /*                 STM32L15x Peripherals Interrupt Handlers                   */
    151          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    152          /*  available peripheral interrupt handler's name please refer to the startup */
    153          /*  file (startup_stm32l1xx_lp.s).                                            */
    154          /******************************************************************************/
    155          
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void USART1_IRQHandler(void)
    158          {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    159          
    160          if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)      //received data available in buffor
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable0  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD024             BEQ.N    ??USART1_IRQHandler_0
    161              {
    162                command_buffer[command_index] = (USART1->DR & (0x0FF));
   \   00000010   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40013804
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x....             LDR.N    R1,??DataTable0_2
   \   00000016   0x....             LDR.N    R2,??DataTable0_3
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x5450             STRB     R0,[R2, R1]
    163                command_index++;
   \   0000001C   0x....             LDR.N    R0,??DataTable0_3
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable0_3
   \   00000024   0x6008             STR      R0,[R1, #+0]
    164                
    165                if(command_buffer[0] == 0xC6)
   \   00000026   0x....             LDR.N    R0,??DataTable0_2
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x28C6             CMP      R0,#+198
   \   0000002C   0xD108             BNE.N    ??USART1_IRQHandler_1
    166                {      
    167                    if(command_index == 4)
   \   0000002E   0x....             LDR.N    R0,??DataTable0_3
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x2804             CMP      R0,#+4
   \   00000034   0xD107             BNE.N    ??USART1_IRQHandler_2
    168                      {
    169                        command_size = command_buffer[3];
   \   00000036   0x....             LDR.N    R0,??DataTable0_2
   \   00000038   0x78C0             LDRB     R0,[R0, #+3]
   \   0000003A   0x....             LDR.N    R1,??DataTable0_4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0xE002             B.N      ??USART1_IRQHandler_2
    170                      }
    171                }else
    172                {
    173                  command_index = 0;
   \                     ??USART1_IRQHandler_1: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable0_3
   \   00000044   0x6008             STR      R0,[R1, #+0]
    174                }
    175                
    176                if(command_index == (command_size-1))
   \                     ??USART1_IRQHandler_2: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable0_3
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x....             LDR.N    R1,??DataTable0_4
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0x1E49             SUBS     R1,R1,#+1
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD102             BNE.N    ??USART1_IRQHandler_0
    177                {
    178                 transfer = 1;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x....             LDR.N    R1,??DataTable0_5
   \   00000058   0x6008             STR      R0,[R1, #+0]
    179                }
    180                
    181             /*   if (ACQ_state == ACQ_waiting_answer)
    182                {
    183                  data_received[count_rec] = (USART1->DR & (0x0FF));
    184                  count_rec++;
    185                  if (count_rec > (size_index - 1))               //check if complet answer received
    186                  {
    187                    count_rec = 0;                                // reset the counter for data received
    188                    ACQ_state = ACQ_waiting_next_window;          // start wait for end of the transmision window
    189                    data_ready_for_parsing = 0;
    190                  }
    191                } */
    192              }
    193          if (USART_GetITStatus(USART1, USART_IT_TXE) !=RESET)         //transmission complete
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000005A   0xF240 0x7127      MOVW     R1,#+1831
   \   0000005E   0x....             LDR.N    R0,??DataTable0  ;; 0x40013800
   \   00000060   0x.... 0x....      BL       USART_GetITStatus
    194              {
    195            /*    if (frame_ind == 0)
    196                  {      
    197                ACQ_state = ACQ_waiting_answer;
    198                ACQ_wait_answ_timer = 1000;
    199                // USART_ClearITPendingBit(USART1, USART_IT_TC);
    200                USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
    201                }
    202                else
    203                {
    204                  USART1->DR = (frame_send_read[frame_ind] & (uint16_t)0x01FF);
    205                  frame_ind++;
    206                  if (frame_ind > (frame_size-1))
    207                    frame_ind = 0;
    208                  
    209                }   */  
    210              }
    211            
    212           
    213            
    214           // USART_ITConfig(USART1, USART_IT_TC, ENABLE);
    215            
    216            
    217          }
   \   00000064   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     command_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     command_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     command_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     transfer
    218          
    219          
    220          /**
    221            * @brief  This function handles PPP interrupt request.
    222            * @param  None
    223            * @retval : None
    224            */
    225          /*void PPP_IRQHandler(void)
    226          {
    227          }*/
    228          
    229          /**
    230            * @}
    231            */
    232          
    233          
    234          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       8   USART1_IRQHandler
         8   -> USART_GetITStatus
       0   USB_LP_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       2  BusFault_Handler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
     102  USART1_IRQHandler
       2  USB_LP_IRQHandler
       2  UsageFault_Handler

 
 144 bytes in section .text
 
 144 bytes of CODE memory

Errors: none
Warnings: none
