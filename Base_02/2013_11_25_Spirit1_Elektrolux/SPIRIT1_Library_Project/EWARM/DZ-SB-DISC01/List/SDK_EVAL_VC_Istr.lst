###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.1.5641/W32 for ARM      22/Feb/2014  21:59:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\S #
#                    ource\src\SDK_EVAL_VC_Istr.c                             #
#    Command line =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\S #
#                    ource\src\SDK_EVAL_VC_Istr.c -D USE_STDPERIPH_DRIVER -D  #
#                    VECT_TAB_FLASH -D STM32L1XX_MD -D IAR_ARM_CM3 -D         #
#                    USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D             #
#                    USE_SYSTICK_DELAY -D SDK -lC                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\List\ -o                              #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_ #
#                    po_poprawie\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Librar #
#                    y_Project\EWARM\.\ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_ #
#                    SYS\Projekt_po_poprawie\2013_11_25_Spirit1_Elektrolux\SP #
#                    IRIT1_Library_Project\EWARM\..\Application\ -I           #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\Application\examples\ -I                        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\Application\runtime\ -I                         #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\ -I        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\SPIRIT1_Library\Source\inc\ -I                  #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\SDK_Eval_Util\Source\inc\ -I                    #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\ #
#                    CM3\DeviceSupport\ST\STM32L1xx\ -I                       #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L #
#                    1xx_StdPeriph_Driver\inc\ -I                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\ -I        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\   #
#                    -On --use_c++_inline -I "C:\Program Files (x86)\IAR      #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\List\SDK_EVAL_VC_Istr.lst             #
#    Object file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\Obj\SDK_EVAL_VC_Istr.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawie\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\Source\src\SDK_EVAL_VC_Istr.c
      1          /**
      2           * @file     SDK_EVAL_VC_Istr.c
      3           * @author   MSH RF/ART Team IMS-Systems Lab
      4           * @version  V1.0.0
      5           * @date     August 4, 2011
      6           * @brief    ISTR events interrupt service routines.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21           *
     22           */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "usb_lib.h"
     26          #include "SDK_EVAL_VC_Prop.h"
     27          #include "SDK_EVAL_VC_Pwr.h"
     28          #include "SDK_EVAL_VC_Istr.h"
     29          
     30          
     31          
     32          /** @addtogroup SDK_EVAL_Virtual_Com
     33           * @{
     34           */
     35          
     36          
     37          /** @addtogroup SDK_EVAL_VC_InterruptStatus
     38           * @{
     39           */
     40          
     41          
     42          /** @defgroup SDK_EVAL_VC_InterruptStatus_Private_TypesDefinitions  SDK EVAL VC InterruptStatus Private TypesDefinitions
     43           * @{
     44           */
     45          
     46          /**
     47           * @}
     48           */
     49          
     50          
     51          /** @defgroup SDK_EVAL_VC_InterruptStatus_Private_Defines   SDK EVAL VC InterruptStatus Private Defines
     52           * @{
     53           */
     54          
     55          /**
     56           * @}
     57           */
     58          
     59          
     60          /** @defgroup SDK_EVAL_VC_InterruptStatus_Private_Macros    SDK EVAL VC InterruptStatus Private Macros
     61           * @{
     62           */
     63          
     64          /**
     65           * @}
     66           */
     67          
     68          
     69          /** @defgroup SDK_EVAL_VC_InterruptStatus_Private_Variables   SDK EVAL VC InterruptStatus Private Variables
     70           * @{
     71           */

   \                                 In section .bss, align 2
     72          __IO uint16_t wIstr;  /*!< ISTR register last read value */
   \                     wIstr:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     73          __IO uint8_t bIntPackSOF = 0;  /*!< SOFs received between 2 consecutive packets */
   \                     bIntPackSOF:
   \   00000000                      DS8 1
     74          
     75          /**
     76           * @}
     77           */
     78          
     79          
     80          /** @defgroup SDK_EVAL_VC_InterruptStatus_Private_FunctionPrototypes    SDK EVAL VC InterruptStatus Private FunctionPrototypes
     81           * @{
     82           */
     83          
     84          /**
     85           * @}
     86           */
     87          
     88          
     89          /** @defgroup SDK_EVAL_VC_InterruptStatus_Private_Functions   SDK EVAL VC InterruptStatus Private Functions
     90           * @{
     91           */
     92          
     93          /**
     94           * @brief  Function pointers to non-control endpoints input service routines.
     95           * @param  None.
     96           * @retval None.
     97           */

   \                                 In section .data, align 4
     98          void (*pEpInt_IN[7])(void) =
   \                     pEpInt_IN:
   \   00000000   0x........         DC32 EP1_IN_Callback, NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
     99          {
    100            EP1_IN_Callback,
    101            EP2_IN_Callback,
    102            EP3_IN_Callback,
    103            EP4_IN_Callback,
    104            EP5_IN_Callback,
    105            EP6_IN_Callback,
    106            EP7_IN_Callback,
    107          };
    108          
    109          
    110          /**
    111           * @brief  Function pointers to non-control endpoints output service routines.
    112           * @param  None.
    113           * @retval None.
    114           */

   \                                 In section .data, align 4
    115          void (*pEpInt_OUT[7])(void) =
   \                     pEpInt_OUT:
   \   00000000   0x........         DC32 NOP_Process, NOP_Process, EP3_OUT_Callback, NOP_Process
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000010   0x........         DC32 NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
    116          {
    117            EP1_OUT_Callback,
    118            EP2_OUT_Callback,
    119            EP3_OUT_Callback,
    120            EP4_OUT_Callback,
    121            EP5_OUT_Callback,
    122            EP6_OUT_Callback,
    123            EP7_OUT_Callback,
    124          };
    125          
    126          
    127          /**
    128           * @brief  STR events interrupt service routine.
    129           * @param  None.
    130           * @retval None.
    131           */

   \                                 In section .text, align 4, keep-with-next
    132          void SdkEvalVCIntServRoutine(void)
    133          {
   \                     SdkEvalVCIntServRoutine: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    134          
    135            wIstr = _GetISTR();
   \   00000002   0x4817             LDR.N    R0,??SdkEvalVCIntServRoutine_0
   \   00000004   0x4917             LDR.N    R1,??SdkEvalVCIntServRoutine_0+0x4  ;; 0x40005c44
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x8001             STRH     R1,[R0, #+0]
    136          
    137          #if (IMR_MSK & ISTR_SOF)
    138            if (wIstr & ISTR_SOF & wInterrupt_Mask)
   \   0000000A   0x4815             LDR.N    R0,??SdkEvalVCIntServRoutine_0
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x4916             LDR.N    R1,??SdkEvalVCIntServRoutine_0+0x8
   \   00000010   0x8809             LDRH     R1,[R1, #+0]
   \   00000012   0x4008             ANDS     R0,R1,R0
   \   00000014   0x0580             LSLS     R0,R0,#+22
   \   00000016   0xD50A             BPL.N    ??SdkEvalVCIntServRoutine_1
    139            {
    140              _SetISTR((uint16_t)CLR_SOF);
   \   00000018   0x4812             LDR.N    R0,??SdkEvalVCIntServRoutine_0+0x4  ;; 0x40005c44
   \   0000001A   0xF64F 0x51FF      MOVW     R1,#+65023
   \   0000001E   0x6001             STR      R1,[R0, #+0]
    141              bIntPackSOF++;
   \   00000020   0x4812             LDR.N    R0,??SdkEvalVCIntServRoutine_0+0xC
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x4911             LDR.N    R1,??SdkEvalVCIntServRoutine_0+0xC
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    142          
    143          #ifdef SOF_CALLBACK
    144              SOF_Callback();
   \   0000002A   0x.... 0x....      BL       SOF_Callback
    145          #endif
    146            }
    147          #endif
    148            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    149          
    150          #if (IMR_MSK & ISTR_CTR)
    151            if (wIstr & ISTR_CTR & wInterrupt_Mask)
   \                     ??SdkEvalVCIntServRoutine_1: (+1)
   \   0000002E   0x480C             LDR.N    R0,??SdkEvalVCIntServRoutine_0
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0x490D             LDR.N    R1,??SdkEvalVCIntServRoutine_0+0x8
   \   00000034   0x8809             LDRH     R1,[R1, #+0]
   \   00000036   0x4008             ANDS     R0,R1,R0
   \   00000038   0x0400             LSLS     R0,R0,#+16
   \   0000003A   0xD501             BPL.N    ??SdkEvalVCIntServRoutine_2
    152            {
    153              /* servicing of the endpoint correct transfer interrupt */
    154              /* clear of the CTR flag into the sub */
    155              CTR_LP();
   \   0000003C   0x.... 0x....      BL       CTR_LP
    156          #ifdef CTR_CALLBACK
    157              CTR_Callback();
    158          #endif
    159            }
    160          #endif
    161            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    162          #if (IMR_MSK & ISTR_RESET)
    163            if (wIstr & ISTR_RESET & wInterrupt_Mask)
   \                     ??SdkEvalVCIntServRoutine_2: (+1)
   \   00000040   0x4807             LDR.N    R0,??SdkEvalVCIntServRoutine_0
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0x4908             LDR.N    R1,??SdkEvalVCIntServRoutine_0+0x8
   \   00000046   0x8809             LDRH     R1,[R1, #+0]
   \   00000048   0x4008             ANDS     R0,R1,R0
   \   0000004A   0x0540             LSLS     R0,R0,#+21
   \   0000004C   0xD506             BPL.N    ??SdkEvalVCIntServRoutine_3
    164            {
    165              _SetISTR((uint16_t)CLR_RESET);
   \   0000004E   0x4805             LDR.N    R0,??SdkEvalVCIntServRoutine_0+0x4  ;; 0x40005c44
   \   00000050   0xF64F 0x31FF      MOVW     R1,#+64511
   \   00000054   0x6001             STR      R1,[R0, #+0]
    166              Device_Property.Reset();
   \   00000056   0x4806             LDR.N    R0,??SdkEvalVCIntServRoutine_0+0x10
   \   00000058   0x6840             LDR      R0,[R0, #+4]
   \   0000005A   0x4780             BLX      R0
    167          #ifdef RESET_CALLBACK
    168              RESET_Callback();
    169          #endif
    170            }
    171          #endif
    172            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    173          #if (IMR_MSK & ISTR_DOVR)
    174            if (wIstr & ISTR_DOVR & wInterrupt_Mask)
    175            {
    176              _SetISTR((uint16_t)CLR_DOVR);
    177          #ifdef DOVR_CALLBACK
    178              DOVR_Callback();
    179          #endif
    180            }
    181          #endif
    182            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    183          #if (IMR_MSK & ISTR_ERR)
    184            if (wIstr & ISTR_ERR & wInterrupt_Mask)
    185            {
    186              _SetISTR((uint16_t)CLR_ERR);
    187          #ifdef ERR_CALLBACK
    188              ERR_Callback();
    189          #endif
    190            }
    191          #endif
    192            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    193          #if (IMR_MSK & ISTR_WKUP)
    194            if (wIstr & ISTR_WKUP & wInterrupt_Mask)
    195            {
    196              _SetISTR((uint16_t)CLR_WKUP);
    197              SdkEvalVCResume(RESUME_EXTERNAL);
    198          #ifdef WKUP_CALLBACK
    199              WKUP_Callback();
    200          #endif
    201            }
    202          #endif
    203            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    204          #if (IMR_MSK & ISTR_SUSP)
    205            if (wIstr & ISTR_SUSP & wInterrupt_Mask)
    206            {
    207          
    208              /* check if SUSPEND is possible */
    209              if (fSuspendEnabled)
    210              {
    211                SdkEvalVCSuspend();
    212              }
    213              else
    214              {
    215                /* if not possible then resume after xx ms */
    216                SdkEvalVCResume(RESUME_LATER);
    217              }
    218              /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    219              _SetISTR((uint16_t)CLR_SUSP);
    220          #ifdef SUSP_CALLBACK
    221              SUSP_Callback();
    222          #endif
    223            }
    224          #endif
    225            /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
    226          
    227          #if (IMR_MSK & ISTR_ESOF)
    228            if (wIstr & ISTR_ESOF & wInterrupt_Mask)
    229            {
    230              _SetISTR((uint16_t)CLR_ESOF);
    231              /* resume handling timing is made with ESOFs */
    232              SdkEvalVCResume(RESUME_ESOF); /* request without change of the machine state */
    233          
    234          #ifdef ESOF_CALLBACK
    235              ESOF_Callback();
    236          #endif
    237            }
    238          #endif
    239          
    240          }
   \                     ??SdkEvalVCIntServRoutine_3: (+1)
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
   \   0000005E   0xBF00             Nop      
   \                     ??SdkEvalVCIntServRoutine_0:
   \   00000060   0x........         DC32     wIstr
   \   00000064   0x40005C44         DC32     0x40005c44
   \   00000068   0x........         DC32     wInterrupt_Mask
   \   0000006C   0x........         DC32     bIntPackSOF
   \   00000070   0x........         DC32     Device_Property
    241          
    242          /**
    243           * @}
    244           */
    245          
    246          
    247          /**
    248           * @}
    249           */
    250          
    251          
    252          /**
    253           * @}
    254           */
    255          
    256          
    257          
    258          
    259          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SdkEvalVCIntServRoutine
         8   -- Indirect call
         8   -> CTR_LP
         8   -> SOF_Callback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     116  SdkEvalVCIntServRoutine
       1  bIntPackSOF
      28  pEpInt_IN
      28  pEpInt_OUT
       2  wIstr

 
   3 bytes in section .bss
  56 bytes in section .data
 116 bytes in section .text
 
 116 bytes of CODE memory
  59 bytes of DATA memory

Errors: none
Warnings: none
