###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.1.5641/W32 for ARM      17/May/2014  17:15:13 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\ACQ\ACQ.c                                    #
#    Command line =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\ACQ\ACQ.c -D USE_STDPERIPH_DRIVER -D         #
#                    VECT_TAB_FLASH -D STM32L1XX_MD -D IAR_ARM_CM3 -D         #
#                    USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D             #
#                    USE_SYSTICK_DELAY -D SDK -lC                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\DZ-SB-DISC01\List\ -o                  #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\DZ-SB-DISC01\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\.\ -I C:\Users\bzdegluk.PLY\Desktop\AC #
#                    Q_SYS\Projekt_po_poprawie_ver01_z_ACQ\2013_11_25_Spirit1 #
#                    _Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application #
#                    \ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_po #
#                    prawie_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1 #
#                    _Library_Project\EWARM\..\Application\examples\ -I       #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\..\Application\runtime\ -I             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\in #
#                    c\ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_p #
#                    oprawie_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT #
#                    1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\   #
#                    -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_popr #
#                    awie_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_L #
#                    ibrary_Project\EWARM\..\SDK_Eval_Util\Source\inc\ -I     #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\S #
#                    ource\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\ -I           #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\S #
#                    ource\STM32L1xx_StdPeriph_Driver\inc\ -I                 #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\in #
#                    c\ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_p #
#                    oprawie_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT #
#                    1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device #
#                    _Lib\Source\inc\ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SY #
#                    S\Projekt_po_poprawie_ver01_z_ACQ\2013_11_25_Spirit1_Ele #
#                    ktrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\ -On        #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\DZ-SB-DISC01\List\ACQ.lst              #
#    Object file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Libr #
#                    ary_Project\EWARM\DZ-SB-DISC01\Obj\ACQ.o                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawie_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ACQ\ACQ.c
      1          #include "ACQ.h"
      2          
      3          #include "SDK_EVAL_Config.h"
      4          #include "SPIRIT_Config.h"
      5          #include "SDK_Configuration_Common.h"
      6          #include "SPIRIT_SDK_Application.h"
      7          #include "SPIRIT_Commands.h"
      8          
      9          #define LED_GREEN     LED2 
     10          #define LED_YELLOW    LED1
     11          extern FlagStatus xTxDoneFlag;
     12          
     13          void daas_manage(void);
     14          uint daas_send_read(uint header, uint length, uint type, uint opcode, long address, uint size); 
     15          void message_to_send(void);
     16          void send_ext_read(int address, char size);
     17          void configure(char FW[]);
     18          
     19          //extern char frame_send_read[8];      // frame buffor for send read command  //header/lentgh/ext_read/address/address/address/size/CRC//

   \                                 In section .bss, align 4
     20          char frame_send_read[8];      // frame buffor for send read command  //header/lentgh/ext_read/address/address/address/size/CRC//
   \                     frame_send_read:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     21          int ACQ_state;
   \                     ACQ_state:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          int comm_status;
   \                     comm_status:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          int loop_state;
   \                     loop_state:
   \   00000000                      DS8 4
     24          //extern int address_table[10];

   \                                 In section .data, align 4
     25          int max_var_ind = 10;
   \                     max_var_ind:
   \   00000000   0x0000000A         DC32 10

   \                                 In section .data, align 4
     26          int address_table[10] = {0x028D,0x028F,0x0291,0x0293,0x0295,0x0297,0x0299,0x029B,0x029D,0x029F};
   \                     address_table:
   \   00000000   0x0000028D         DC32 653, 655, 657, 659, 661, 663, 665, 667, 669, 671
   \              0x0000028F   
   \              0x00000291   
   \              0x00000293   
   \              0x00000295   
   \              0x00000297   
   \              0x00000299   
   \              0x0000029B   
   \              0x0000029D   
   \              0x0000029F   

   \                                 In section .bss, align 4
     27          int var_index;
   \                     var_index:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     28          int size_table[10] = {2,2,2,2,2,2,2,2,2,2};
   \                     size_table:
   \   00000000   0x00000002         DC32 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   

   \                                 In section .bss, align 4
     29          int size_index;
   \                     size_index:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     30          int frame_ind = 1;
   \                     frame_ind:
   \   00000000   0x00000001         DC32 1

   \                                 In section .bss, align 4
     31          int frame_size;
   \                     frame_size:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     32          char data_received[10];
   \                     data_received:
   \   00000000                      DS8 12

   \                                 In section .data, align 4
     33          char dupa[] ={'d','u','p','a','/n'};
                                               ^
Warning[Pe1422]: multicharacter character literal (potential portability
          problem)

  char dupa[] ={'d','u','p','a','/n'};
                                ^
"C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawie_ver01_z_ACQ\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ACQ\ACQ.c",33  Warning[Pe069]: 
          integer conversion resulted in truncation
   \                     dupa:
   \   00000000   0x64 0x75          DC8 100, 117, 112, 97, 110, 0, 0, 0
   \              0x70 0x61    
   \              0x6E 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
     34          int session_number = 5; // how many time to read all var before to sent them
   \                     session_number:
   \   00000000   0x00000005         DC32 5

   \                                 In section .bss, align 4
     35          int session_index;
   \                     session_index:
   \   00000000                      DS8 4
     36          

   \                                 In section .bss, align 4
     37          char FW_ID[8];
   \                     FW_ID:
   \   00000000                      DS8 8
     38          
     39          //extern int ACQ_wait_answ_timer;
     40          //extern int ACQ_in_silent_timer;

   \                                 In section .bss, align 4
     41          int ACQ_wait_answ_timer;
   \                     ACQ_wait_answ_timer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     42          int ACQ_loop_timer;
   \                     ACQ_loop_timer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     43          int ACQ_session_timer;
   \                     ACQ_session_timer:
   \   00000000                      DS8 4
     44          
     45            // for Uart it use

   \                                 In section .bss, align 1
     46          char count_rec = 0;
   \                     count_rec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     47          int data_ready_for_parsing;    // check the answered data
   \                     data_ready_for_parsing:
   \   00000000                      DS8 4
     48          
     49          

   \                                 In section .bss, align 4
     50          int App;                        // status of connection with appliance 
   \                     App:
   \   00000000                      DS8 4
     51          
     52          //////// for SPIRIT connection

   \                                 In section .data, align 4
     53          uint8_t buffer_for_transf[211] = {0xC9, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   \                     buffer_for_transf:
   \   00000000   0xC9 0x00          DC8 201, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x0A    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000072   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000089   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B7   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
     54          //header(1), endpoint_nr(2), variables_number(1), time_stamp(6)

   \                                 In section .data, align 1
     55          uint8_t bft_cnt = 10;
   \                     bft_cnt:
   \   00000000   0x0A               DC8 10

   \                                 In section .bss, align 4
     56          int Spirit_data;
   \                     Spirit_data:
   \   00000000                      DS8 4
     57          
     58          /*
     59          void daas_manage(void)
     60          {
     61              switch (ACQ_state)
     62                
     63                  case ACQ_Idle:          // communication state idle
     64                  message_to send();      //check if message has to be send
     65                    break;
     66                  
     67                  case ACQ_sending_msg:       //sending during progress
     68                    break;
     69                    
     70                  case ACQ_waiting_answer    // waiting for the answer
     71                          if(ACQ_wait_answ_timer == 0)    // check timeout for the answer               
     72                              comm_status = RX_ERR;
     73                   
     74                                switch (comm_status)
     75                                  
     76                                       case RX_ERR:
     77                                       Free_ACQ_buff();
     78                                       ACQ_state = ACQ_Idle;
     79                                       
     80                                       
     81                                       case RX_RDY:
     82                                         Check_ACQ_answ();
     83                   
     84                     break;
     85                   
     86                  case  ACQ_in_silent_time        // waiting for the silent time end
     87                          if (ACQ_silent_timer == 0)
     88                            ACQ_state = ACQ_Idle;
     89                    break;
     90                   
     91            
     92          } */
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void daas_manage(void)
     95          {
   \                     daas_manage: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     96            switch (ACQ_state)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD007             BEQ.N    ??daas_manage_0
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD00D             BEQ.N    ??daas_manage_1
   \   00000010   0xD30B             BCC.N    ??daas_manage_2
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xF000 0x808F      BEQ.W    ??daas_manage_3
   \   00000018   0xD31A             BCC.N    ??daas_manage_4
   \   0000001A   0xE0CC             B.N      ??daas_manage_5
     97            {
     98              //////////////////////////////////////////////////////////////////////////////////////
     99              case ACQ_Idle:              //ready for next ransmission
    100              ACQ_session_timer = 60;     // 60 ms for successful transmission
   \                     ??daas_manage_0: (+1)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   00000020   0x213C             MOVS     R1,#+60
   \   00000022   0x6001             STR      R1,[R0, #+0]
    101              message_to_send();          // start transmisionof the frame (first char - rest by interrupt)
   \   00000024   0x.... 0x....      BL       message_to_send
    102              break;
   \   00000028   0xE0C5             B.N      ??daas_manage_5
    103              ///////////////////////////////////////////////////////////////////////////////////////
    104              case ACQ_sending_msg:       // sending in progress
    105              break;
   \                     ??daas_manage_2: (+1)
   \   0000002A   0xE0C4             B.N      ??daas_manage_5
    106              //////////////////////////////////////////////////////////////////////////////////////
    107              case ACQ_waiting_answer:    // waiting for the answer 
    108              if (ACQ_wait_answ_timer == 0)    // check timeout for the answer
   \                     ??daas_manage_1: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable4_2
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD10B             BNE.N    ??daas_manage_6
    109              {
    110                comm_status = RX_ERR;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable4_3
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    111                // ACQ_state = ACQ_waiting_next_window;
    112                ACQ_state = ACQ_Idle;
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x6001             STR      R1,[R0, #+0]
    113                App = App_disconnected;
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable4_4
   \   0000004A   0x2102             MOVS     R1,#+2
   \   0000004C   0x6001             STR      R1,[R0, #+0]
    114               }
    115               break;
   \                     ??daas_manage_6: (+1)
   \   0000004E   0xE0B2             B.N      ??daas_manage_5
    116              ///////////////////////////////////////////////////////////////////////////////////////
    117              case ACQ_waiting_next_window:       // waiting to finish 60ms to let start next session
    118               if (data_ready_for_parsing == 0)
   \                     ??daas_manage_4: (+1)
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable4_5
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD155             BNE.N    ??daas_manage_7
    119                {
    120                        /*  stara wersja odczytu odebranych danych wszystko co odebrane idzie do wysylki
    121                        for (uint8_t rec_index = 0 ;rec_index < size_index ;rec_index++)
    122                        {
    123                          buffer_for_transf[bft_cnt] = data_received[rec_index];
    124                          bft_cnt++;
    125                        }  */
    126                //  docelowe przepisanie odebranych wartosci
    127                for (uint8_t rec_index = 3; rec_index < (3 + size_table[var_index-1]); rec_index++)
   \   0000005A   0x2003             MOVS     R0,#+3
   \                     ??daas_manage_8: (+1)
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable4_7
   \   00000068   0xEB12 0x0181      ADDS     R1,R2,R1, LSL #+2
   \   0000006C   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000070   0x1CC9             ADDS     R1,R1,#+3
   \   00000072   0x4288             CMP      R0,R1
   \   00000074   0xDA36             BGE.N    ??daas_manage_9
    128                {
    129                  buffer_for_transf[bft_cnt] = data_received[rec_index];
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   0000007A   0x7809             LDRB     R1,[R1, #+0]
   \   0000007C   0x.... 0x....      LDR.W    R2,??DataTable4_9
   \   00000080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable4_10
   \   00000086   0x5CC3             LDRB     R3,[R0, R3]
   \   00000088   0x548B             STRB     R3,[R1, R2]
    130                  bft_cnt++;
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   0000008E   0x7809             LDRB     R1,[R1, #+0]
   \   00000090   0x1C49             ADDS     R1,R1,#+1
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable4_8
   \   00000096   0x7011             STRB     R1,[R2, #+0]
    131                   if (bft_cnt == 0x10)
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   0000009C   0x7809             LDRB     R1,[R1, #+0]
   \   0000009E   0x2910             CMP      R1,#+16
   \   000000A0   0xD103             BNE.N    ??daas_manage_10
    132                  {
    133                    bft_cnt = 0x10;
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000A6   0x2210             MOVS     R2,#+16
   \   000000A8   0x700A             STRB     R2,[R1, #+0]
    134                  }
    135                  if (bft_cnt == 0x13)
   \                     ??daas_manage_10: (+1)
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000AE   0x7809             LDRB     R1,[R1, #+0]
   \   000000B0   0x2913             CMP      R1,#+19
   \   000000B2   0xD103             BNE.N    ??daas_manage_11
    136                  {
    137                    bft_cnt = 0x13;
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000B8   0x2213             MOVS     R2,#+19
   \   000000BA   0x700A             STRB     R2,[R1, #+0]
    138                  }
    139                   if (bft_cnt == 0x16)
   \                     ??daas_manage_11: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000C0   0x7809             LDRB     R1,[R1, #+0]
   \   000000C2   0x2916             CMP      R1,#+22
   \   000000C4   0xD103             BNE.N    ??daas_manage_12
    140                  {
    141                    bft_cnt = 0x16;
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000CA   0x2216             MOVS     R2,#+22
   \   000000CC   0x700A             STRB     R2,[R1, #+0]
    142                  }
    143                   if (bft_cnt == 0xE0)
   \                     ??daas_manage_12: (+1)
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000D2   0x7809             LDRB     R1,[R1, #+0]
   \   000000D4   0x29E0             CMP      R1,#+224
   \   000000D6   0xD103             BNE.N    ??daas_manage_13
    144                  {
    145                    bft_cnt = 0xE0;
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable4_8
   \   000000DC   0x22E0             MOVS     R2,#+224
   \   000000DE   0x700A             STRB     R2,[R1, #+0]
    146                  }
    147                } 
   \                     ??daas_manage_13: (+1)
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0xE7BB             B.N      ??daas_manage_8
    148                
    149                if (var_index > max_var_ind -1)                                     // check if address_table size reached
   \                     ??daas_manage_9: (+1)
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable4_11
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x1E40             SUBS     R0,R0,#+1
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   000000F0   0x6809             LDR      R1,[R1, #+0]
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xDA03             BGE.N    ??daas_manage_14
    150                      {
    151                        var_index = 0;
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable4_6
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0x6001             STR      R1,[R0, #+0]
    152                      }
    153                  data_ready_for_parsing = 1;
   \                     ??daas_manage_14: (+1)
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable4_5
   \   00000102   0x2101             MOVS     R1,#+1
   \   00000104   0x6001             STR      R1,[R0, #+0]
    154                }    
    155                if (ACQ_session_timer == 0)
   \                     ??daas_manage_7: (+1)
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable4_1
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD111             BNE.N    ??daas_manage_15
    156                  {
    157                    if (var_index != 0)
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable4_6
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD004             BEQ.N    ??daas_manage_16
    158                      {
    159                        ACQ_state = ACQ_Idle;
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable4
   \   0000011E   0x2100             MOVS     R1,#+0
   \   00000120   0x6001             STR      R1,[R0, #+0]
   \   00000122   0xE007             B.N      ??daas_manage_15
    160                      }
    161                 else
    162                  {
    163                        ACQ_state = ACQ_waiting_next_loop;
   \                     ??daas_manage_16: (+1)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000128   0x2104             MOVS     R1,#+4
   \   0000012A   0x6001             STR      R1,[R0, #+0]
    164                        Spirit_data = not_transmitted;
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable4_12
   \   00000130   0x2102             MOVS     R1,#+2
   \   00000132   0x6001             STR      R1,[R0, #+0]
    165                   }
    166              }
    167              break;
   \                     ??daas_manage_15: (+1)
   \   00000134   0xE03F             B.N      ??daas_manage_5
    168              ///////////////////////////////////////////////////////////////////////////////////////////
    169              case ACQ_waiting_next_loop:    // waiting to finish 1000ms before start next loop
    170              if (Spirit_data == not_transmitted && session_index == (session_number-1))
   \                     ??daas_manage_3: (+1)
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable4_12
   \   0000013A   0x6800             LDR      R0,[R0, #+0]
   \   0000013C   0x2802             CMP      R0,#+2
   \   0000013E   0xD11E             BNE.N    ??daas_manage_17
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable4_13
   \   00000144   0x6800             LDR      R0,[R0, #+0]
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable4_14
   \   0000014A   0x6809             LDR      R1,[R1, #+0]
   \   0000014C   0x1E49             SUBS     R1,R1,#+1
   \   0000014E   0x4288             CMP      R0,R1
   \   00000150   0xD115             BNE.N    ??daas_manage_17
    171              {
    172                  SdkEvalLedToggle(LED_YELLOW);
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0x.... 0x....      BL       SdkEvalLedToggle
    173                  SpiritCmdStrobeFlushTxFifo();
   \   00000158   0x2072             MOVS     R0,#+114
   \   0000015A   0x.... 0x....      BL       SpiritCmdStrobeCommand
    174                  SpiritSpiWriteLinearFifo(96, buffer_for_transf);
   \   0000015E   0x....             LDR.N    R1,??DataTable4_9
   \   00000160   0x2060             MOVS     R0,#+96
   \   00000162   0x.... 0x....      BL       SdkEvalSpiWriteFifo
    175                  SpiritCmdStrobeTx();
   \   00000166   0x.... 0x....      BL       SpiritManagementWaCmdStrobeTx
   \   0000016A   0x2060             MOVS     R0,#+96
   \   0000016C   0x.... 0x....      BL       SpiritCmdStrobeCommand
    176                  while(!xTxDoneFlag);  // Wait till Transmission is done
   \                     ??daas_manage_18: (+1)
   \   00000170   0x....             LDR.N    R0,??DataTable4_15
   \   00000172   0x7800             LDRB     R0,[R0, #+0]
   \   00000174   0x2800             CMP      R0,#+0
   \   00000176   0xD0FB             BEQ.N    ??daas_manage_18
    177                  Spirit_data = transmitted;
   \   00000178   0x....             LDR.N    R0,??DataTable4_12
   \   0000017A   0x2101             MOVS     R1,#+1
   \   0000017C   0x6001             STR      R1,[R0, #+0]
    178              }
    179              if (ACQ_loop_timer ==0)
   \                     ??daas_manage_17: (+1)
   \   0000017E   0x....             LDR.N    R0,??DataTable4_16
   \   00000180   0x6800             LDR      R0,[R0, #+0]
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD117             BNE.N    ??daas_manage_19
    180              {
    181                    ACQ_state = ACQ_Idle;
   \   00000186   0x....             LDR.N    R0,??DataTable4
   \   00000188   0x2100             MOVS     R1,#+0
   \   0000018A   0x6001             STR      R1,[R0, #+0]
    182                    /*
    183                      if (bft_cnt == sum_data_session * 5)
    184                    */
    185                    session_index++;
   \   0000018C   0x....             LDR.N    R0,??DataTable4_13
   \   0000018E   0x6800             LDR      R0,[R0, #+0]
   \   00000190   0x1C40             ADDS     R0,R0,#+1
   \   00000192   0x....             LDR.N    R1,??DataTable4_13
   \   00000194   0x6008             STR      R0,[R1, #+0]
    186                    if (session_index == session_number)
   \   00000196   0x....             LDR.N    R0,??DataTable4_13
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0x....             LDR.N    R1,??DataTable4_14
   \   0000019C   0x6809             LDR      R1,[R1, #+0]
   \   0000019E   0x4288             CMP      R0,R1
   \   000001A0   0xD105             BNE.N    ??daas_manage_20
    187                    {
    188                      session_index = 0;
   \   000001A2   0x....             LDR.N    R0,??DataTable4_13
   \   000001A4   0x2100             MOVS     R1,#+0
   \   000001A6   0x6001             STR      R1,[R0, #+0]
    189                      bft_cnt = 10;
   \   000001A8   0x....             LDR.N    R0,??DataTable4_8
   \   000001AA   0x210A             MOVS     R1,#+10
   \   000001AC   0x7001             STRB     R1,[R0, #+0]
    190                    }
    191                    
    192                    ACQ_loop_timer = 1000;      // each variable readed one time per second
   \                     ??daas_manage_20: (+1)
   \   000001AE   0x....             LDR.N    R0,??DataTable4_16
   \   000001B0   0xF44F 0x717A      MOV      R1,#+1000
   \   000001B4   0x6001             STR      R1,[R0, #+0]
    193              }
    194              break;
    195              ////////////////////////////////////////////////////////////////////////////////////////////
    196            }
    197          }    
   \                     ??daas_manage_19: (+1)
   \                     ??daas_manage_5: (+1)
   \   000001B6   0xBD01             POP      {R0,PC}          ;; return
    198          

   \                                 In section .text, align 2, keep-with-next
    199          void message_to_send(void)
    200          {
   \                     message_to_send: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    201            if (address_table[var_index] != 0)   // check if next address for read is not empty
   \   00000002   0x....             LDR.N    R0,??DataTable4_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable4_17
   \   00000008   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD01D             BEQ.N    ??message_to_send_0
    202                  {             
    203                       send_ext_read(address_table[var_index], size_table[var_index]);    // send ext read message
   \   00000010   0x....             LDR.N    R0,??DataTable4_6
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x....             LDR.N    R1,??DataTable4_7
   \   00000016   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable4_6
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x....             LDR.N    R2,??DataTable4_17
   \   00000022   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000026   0x.... 0x....      BL       send_ext_read
    204                       ACQ_state = ACQ_sending_msg;                                       //change state of ACQ for sending message
   \   0000002A   0x....             LDR.N    R0,??DataTable4
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x6001             STR      R1,[R0, #+0]
    205                       size_index = size_table[var_index]+4;                                // index of the size for the data to be received
   \   00000030   0x....             LDR.N    R0,??DataTable4_6
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable4_7
   \   00000036   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000003A   0x1D00             ADDS     R0,R0,#+4
   \   0000003C   0x....             LDR.N    R1,??DataTable4_18
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    206             //         if (var_index > max_var_ind -2)                                     // check if address_table size reached
    207             //         {
    208             //           var_index = 0;
    209             //         }
    210             //         else
    211             //         {
    212                       var_index++;                                                       // point next variable
   \   00000040   0x....             LDR.N    R0,??DataTable4_6
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x....             LDR.N    R1,??DataTable4_6
   \   00000048   0x6008             STR      R0,[R1, #+0]
   \   0000004A   0xE002             B.N      ??message_to_send_1
    213             //         }
    214                       
    215                  }
    216            else
    217                  {
    218                       var_index = 0;             //if address empty then go to the first variable 
   \                     ??message_to_send_0: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable4_6
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x6001             STR      R1,[R0, #+0]
    219                  }
    220          }
   \                     ??message_to_send_1: (+1)
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    221          

   \                                 In section .text, align 2, keep-with-next
    222          void send_ext_read(int address, char size)
    223          {
   \                     send_ext_read: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    224            frame_size = 7;
   \   00000006   0x....             LDR.N    R0,??DataTable4_19
   \   00000008   0x2107             MOVS     R1,#+7
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    225            frame_send_read[0] = 0xC6;
   \   0000000C   0x....             LDR.N    R0,??DataTable4_20
   \   0000000E   0x21C6             MOVS     R1,#+198
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    226            frame_send_read[1] = 0x04;
   \   00000012   0x....             LDR.N    R0,??DataTable4_20
   \   00000014   0x2104             MOVS     R1,#+4
   \   00000016   0x7041             STRB     R1,[R0, #+1]
    227            frame_send_read[2] = 0x80;
   \   00000018   0x....             LDR.N    R0,??DataTable4_20
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x7081             STRB     R1,[R0, #+2]
    228          //  frame_send_read[3] = ((address & 0xFF0000) >>16);                            //header/lentgh/ext_read/address/address/address/size/CRC//
    229            frame_send_read[3] = ((address & 0xFF00) >>8);
   \   0000001E   0x1220             ASRS     R0,R4,#+8
   \   00000020   0x....             LDR.N    R1,??DataTable4_20
   \   00000022   0x70C8             STRB     R0,[R1, #+3]
    230            frame_send_read[4] = (address & 0xFF);
   \   00000024   0x....             LDR.N    R0,??DataTable4_20
   \   00000026   0x7104             STRB     R4,[R0, #+4]
    231            frame_send_read[5] = size;
   \   00000028   0x....             LDR.N    R0,??DataTable4_20
   \   0000002A   0x7145             STRB     R5,[R0, #+5]
    232            frame_send_read[6] = frame_send_read[1] ^ frame_send_read[2] ^ frame_send_read[3] ^ frame_send_read[4] ^ frame_send_read[5];
   \   0000002C   0x....             LDR.N    R0,??DataTable4_20
   \   0000002E   0x7840             LDRB     R0,[R0, #+1]
   \   00000030   0x....             LDR.N    R1,??DataTable4_20
   \   00000032   0x7889             LDRB     R1,[R1, #+2]
   \   00000034   0x4048             EORS     R0,R1,R0
   \   00000036   0x....             LDR.N    R1,??DataTable4_20
   \   00000038   0x78C9             LDRB     R1,[R1, #+3]
   \   0000003A   0x4048             EORS     R0,R1,R0
   \   0000003C   0x....             LDR.N    R1,??DataTable4_20
   \   0000003E   0x7909             LDRB     R1,[R1, #+4]
   \   00000040   0x4048             EORS     R0,R1,R0
   \   00000042   0x....             LDR.N    R1,??DataTable4_20
   \   00000044   0x7949             LDRB     R1,[R1, #+5]
   \   00000046   0x4048             EORS     R0,R1,R0
   \   00000048   0x....             LDR.N    R1,??DataTable4_20
   \   0000004A   0x7188             STRB     R0,[R1, #+6]
    233            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   0000004C   0x....             LDR.N    R0,??DataTable4_21  ;; 0x40013804
   \   0000004E   0x....             LDR.N    R1,??DataTable4_20
   \   00000050   0x7809             LDRB     R1,[R1, #+0]
   \   00000052   0x8001             STRH     R1,[R0, #+0]
    234            frame_ind = 1; 
   \   00000054   0x....             LDR.N    R0,??DataTable4_22
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x6001             STR      R1,[R0, #+0]
    235            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0xF240 0x7127      MOVW     R1,#+1831
   \   00000060   0x....             LDR.N    R0,??DataTable4_23  ;; 0x40013800
   \   00000062   0x.... 0x....      BL       USART_ITConfig
    236            //indicate to the TC interupt start of the trasmission
    237             //USART_SendData(USART1, frame_send_read[0]);
    238             //while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    239          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    240          

   \                                 In section .text, align 2, keep-with-next
    241          void configure(char FW[])
    242          {
   \                     configure: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    243            data_ready_for_parsing = 1;
   \   00000004   0x....             LDR.N    R0,??DataTable4_5
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x6001             STR      R1,[R0, #+0]
    244            frame_size = 5;
   \   0000000A   0x....             LDR.N    R0,??DataTable4_19
   \   0000000C   0x2105             MOVS     R1,#+5
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    245            frame_send_read[0] = 0xC6;
   \   00000010   0x....             LDR.N    R0,??DataTable4_20
   \   00000012   0x21C6             MOVS     R1,#+198
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    246            frame_send_read[1] = 0x02;
   \   00000016   0x....             LDR.N    R0,??DataTable4_20
   \   00000018   0x2102             MOVS     R1,#+2
   \   0000001A   0x7041             STRB     R1,[R0, #+1]
    247            frame_send_read[2] = 0xB0;
   \   0000001C   0x....             LDR.N    R0,??DataTable4_20
   \   0000001E   0x21B0             MOVS     R1,#+176
   \   00000020   0x7081             STRB     R1,[R0, #+2]
    248            frame_send_read[3] = 0x00;
   \   00000022   0x....             LDR.N    R0,??DataTable4_20
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x70C1             STRB     R1,[R0, #+3]
    249            frame_send_read[4] = 0xB2;
   \   00000028   0x....             LDR.N    R0,??DataTable4_20
   \   0000002A   0x21B2             MOVS     R1,#+178
   \   0000002C   0x7101             STRB     R1,[R0, #+4]
    250            frame_ind = 1;  
   \   0000002E   0x....             LDR.N    R0,??DataTable4_22
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x6001             STR      R1,[R0, #+0]
    251            size_index = 8;
   \   00000034   0x....             LDR.N    R0,??DataTable4_18
   \   00000036   0x2108             MOVS     R1,#+8
   \   00000038   0x6001             STR      R1,[R0, #+0]
    252            count_rec = 0;
   \   0000003A   0x....             LDR.N    R0,??DataTable4_24
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
    253            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   00000040   0x....             LDR.N    R0,??DataTable4_21  ;; 0x40013804
   \   00000042   0x....             LDR.N    R1,??DataTable4_20
   \   00000044   0x7809             LDRB     R1,[R1, #+0]
   \   00000046   0x8001             STRH     R1,[R0, #+0]
    254            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   00000048   0x2201             MOVS     R2,#+1
   \   0000004A   0xF240 0x7127      MOVW     R1,#+1831
   \   0000004E   0x....             LDR.N    R0,??DataTable4_23  ;; 0x40013800
   \   00000050   0x.... 0x....      BL       USART_ITConfig
    255            
    256          
    257          while (ACQ_state == !ACQ_waiting_answer);
   \                     ??configure_0: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable4
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD0FB             BEQ.N    ??configure_0
    258            while (data_ready_for_parsing > 0)                                          // waiting for the answer
   \                     ??configure_1: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable4_5
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xDB07             BLT.N    ??configure_2
    259            {
    260              if (ACQ_wait_answ_timer == 0)
   \   00000064   0x....             LDR.N    R0,??DataTable4_2
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1F7             BNE.N    ??configure_1
    261              {
    262                ACQ_state = ACQ_Idle;
   \   0000006C   0x....             LDR.N    R0,??DataTable4
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x6001             STR      R1,[R0, #+0]
    263                //break;
    264                return;
   \   00000072   0xE091             B.N      ??configure_3
    265              }
    266            }
    267            FW[0] = data_received[3];
   \                     ??configure_2: (+1)
   \   00000074   0x....             LDR.N    R0,??DataTable4_10
   \   00000076   0x78C0             LDRB     R0,[R0, #+3]
   \   00000078   0x7020             STRB     R0,[R4, #+0]
    268            FW[1] = data_received[4];
   \   0000007A   0x....             LDR.N    R0,??DataTable4_10
   \   0000007C   0x7900             LDRB     R0,[R0, #+4]
   \   0000007E   0x7060             STRB     R0,[R4, #+1]
    269            FW[2] = data_received[5];
   \   00000080   0x....             LDR.N    R0,??DataTable4_10
   \   00000082   0x7940             LDRB     R0,[R0, #+5]
   \   00000084   0x70A0             STRB     R0,[R4, #+2]
    270            FW[3] = data_received[6];
   \   00000086   0x....             LDR.N    R0,??DataTable4_10
   \   00000088   0x7980             LDRB     R0,[R0, #+6]
   \   0000008A   0x70E0             STRB     R0,[R4, #+3]
    271            
    272            
    273            data_ready_for_parsing = 1;
   \   0000008C   0x....             LDR.N    R0,??DataTable4_5
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x6001             STR      R1,[R0, #+0]
    274            frame_size = 5;
   \   00000092   0x....             LDR.N    R0,??DataTable4_19
   \   00000094   0x2105             MOVS     R1,#+5
   \   00000096   0x6001             STR      R1,[R0, #+0]
    275            frame_send_read[0] = 0xC6;
   \   00000098   0x....             LDR.N    R0,??DataTable4_20
   \   0000009A   0x21C6             MOVS     R1,#+198
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    276            frame_send_read[1] = 0x02;
   \   0000009E   0x....             LDR.N    R0,??DataTable4_20
   \   000000A0   0x2102             MOVS     R1,#+2
   \   000000A2   0x7041             STRB     R1,[R0, #+1]
    277            frame_send_read[2] = 0xB6;
   \   000000A4   0x....             LDR.N    R0,??DataTable4_20
   \   000000A6   0x21B6             MOVS     R1,#+182
   \   000000A8   0x7081             STRB     R1,[R0, #+2]
    278            frame_send_read[3] = 0x00;
   \   000000AA   0x....             LDR.N    R0,??DataTable4_20
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x70C1             STRB     R1,[R0, #+3]
    279            frame_send_read[4] = 0xB4;
   \   000000B0   0x....             LDR.N    R0,??DataTable4_20
   \   000000B2   0x21B4             MOVS     R1,#+180
   \   000000B4   0x7101             STRB     R1,[R0, #+4]
    280            frame_ind = 1; 
   \   000000B6   0x....             LDR.N    R0,??DataTable4_22
   \   000000B8   0x2101             MOVS     R1,#+1
   \   000000BA   0x6001             STR      R1,[R0, #+0]
    281            size_index = 8;
   \   000000BC   0x....             LDR.N    R0,??DataTable4_18
   \   000000BE   0x2108             MOVS     R1,#+8
   \   000000C0   0x6001             STR      R1,[R0, #+0]
    282            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   000000C2   0x....             LDR.N    R0,??DataTable4_21  ;; 0x40013804
   \   000000C4   0x....             LDR.N    R1,??DataTable4_20
   \   000000C6   0x7809             LDRB     R1,[R1, #+0]
   \   000000C8   0x8001             STRH     R1,[R0, #+0]
    283            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   000000CA   0x2201             MOVS     R2,#+1
   \   000000CC   0xF240 0x7127      MOVW     R1,#+1831
   \   000000D0   0x....             LDR.N    R0,??DataTable4_23  ;; 0x40013800
   \   000000D2   0x.... 0x....      BL       USART_ITConfig
    284            
    285            while (data_ready_for_parsing > 0)                                          // waiting for the answer
   \                     ??configure_4: (+1)
   \   000000D6   0x....             LDR.N    R0,??DataTable4_5
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x2801             CMP      R0,#+1
   \   000000DC   0xDB07             BLT.N    ??configure_5
    286              {
    287              if (ACQ_wait_answ_timer == 0)
   \   000000DE   0x....             LDR.N    R0,??DataTable4_2
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD1F7             BNE.N    ??configure_4
    288              {
    289                ACQ_state = ACQ_Idle;
   \   000000E6   0x....             LDR.N    R0,??DataTable4
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x6001             STR      R1,[R0, #+0]
    290                //break;
    291                return;
   \   000000EC   0xE054             B.N      ??configure_3
    292              }
    293            }
    294            FW[4] = data_received[3];
   \                     ??configure_5: (+1)
   \   000000EE   0x....             LDR.N    R0,??DataTable4_10
   \   000000F0   0x78C0             LDRB     R0,[R0, #+3]
   \   000000F2   0x7120             STRB     R0,[R4, #+4]
    295            FW[5] = data_received[4];
   \   000000F4   0x....             LDR.N    R0,??DataTable4_10
   \   000000F6   0x7900             LDRB     R0,[R0, #+4]
   \   000000F8   0x7160             STRB     R0,[R4, #+5]
    296            FW[6] = data_received[5];
   \   000000FA   0x....             LDR.N    R0,??DataTable4_10
   \   000000FC   0x7940             LDRB     R0,[R0, #+5]
   \   000000FE   0x71A0             STRB     R0,[R4, #+6]
    297            FW[7] = data_received[6];
   \   00000100   0x....             LDR.N    R0,??DataTable4_10
   \   00000102   0x7980             LDRB     R0,[R0, #+6]
   \   00000104   0x71E0             STRB     R0,[R4, #+7]
    298            
    299            data_ready_for_parsing = 1;
   \   00000106   0x....             LDR.N    R0,??DataTable4_5
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x6001             STR      R1,[R0, #+0]
    300            frame_size = 7;
   \   0000010C   0x....             LDR.N    R0,??DataTable4_19
   \   0000010E   0x2107             MOVS     R1,#+7
   \   00000110   0x6001             STR      R1,[R0, #+0]
    301            frame_send_read[0] = 0xC6;
   \   00000112   0x....             LDR.N    R0,??DataTable4_20
   \   00000114   0x21C6             MOVS     R1,#+198
   \   00000116   0x7001             STRB     R1,[R0, #+0]
    302            frame_send_read[1] = 0x04;
   \   00000118   0x....             LDR.N    R0,??DataTable4_20
   \   0000011A   0x2104             MOVS     R1,#+4
   \   0000011C   0x7041             STRB     R1,[R0, #+1]
    303            frame_send_read[2] = 0xB7;
   \   0000011E   0x....             LDR.N    R0,??DataTable4_20
   \   00000120   0x21B7             MOVS     R1,#+183
   \   00000122   0x7081             STRB     R1,[R0, #+2]
    304            frame_send_read[3] = 0x06;
   \   00000124   0x....             LDR.N    R0,??DataTable4_20
   \   00000126   0x2106             MOVS     R1,#+6
   \   00000128   0x70C1             STRB     R1,[R0, #+3]
    305            frame_send_read[4] = 0x20;
   \   0000012A   0x....             LDR.N    R0,??DataTable4_20
   \   0000012C   0x2120             MOVS     R1,#+32
   \   0000012E   0x7101             STRB     R1,[R0, #+4]
    306            frame_send_read[5] = 0x00;
   \   00000130   0x....             LDR.N    R0,??DataTable4_20
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x7141             STRB     R1,[R0, #+5]
    307            frame_send_read[6] = 0x95;
   \   00000136   0x....             LDR.N    R0,??DataTable4_20
   \   00000138   0x2195             MOVS     R1,#+149
   \   0000013A   0x7181             STRB     R1,[R0, #+6]
    308            frame_ind = 1; 
   \   0000013C   0x....             LDR.N    R0,??DataTable4_22
   \   0000013E   0x2101             MOVS     R1,#+1
   \   00000140   0x6001             STR      R1,[R0, #+0]
    309            size_index = 5;
   \   00000142   0x....             LDR.N    R0,??DataTable4_18
   \   00000144   0x2105             MOVS     R1,#+5
   \   00000146   0x6001             STR      R1,[R0, #+0]
    310            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   00000148   0x....             LDR.N    R0,??DataTable4_21  ;; 0x40013804
   \   0000014A   0x....             LDR.N    R1,??DataTable4_20
   \   0000014C   0x7809             LDRB     R1,[R1, #+0]
   \   0000014E   0x8001             STRH     R1,[R0, #+0]
    311            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   00000150   0x2201             MOVS     R2,#+1
   \   00000152   0xF240 0x7127      MOVW     R1,#+1831
   \   00000156   0x....             LDR.N    R0,??DataTable4_23  ;; 0x40013800
   \   00000158   0x.... 0x....      BL       USART_ITConfig
    312            SdkDelayMs(500);
   \   0000015C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000160   0x.... 0x....      BL       SdkDelayMs
    313            while (data_ready_for_parsing > 0)                                          // waiting for the answer
   \                     ??configure_6: (+1)
   \   00000164   0x....             LDR.N    R0,??DataTable4_5
   \   00000166   0x6800             LDR      R0,[R0, #+0]
   \   00000168   0x2801             CMP      R0,#+1
   \   0000016A   0xDB07             BLT.N    ??configure_7
    314              {
    315              if (ACQ_wait_answ_timer == 0)
   \   0000016C   0x....             LDR.N    R0,??DataTable4_2
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD1F7             BNE.N    ??configure_6
    316              {
    317                ACQ_state = ACQ_Idle;
   \   00000174   0x....             LDR.N    R0,??DataTable4
   \   00000176   0x2100             MOVS     R1,#+0
   \   00000178   0x6001             STR      R1,[R0, #+0]
    318                //break;
    319                return;
   \   0000017A   0xE00D             B.N      ??configure_3
    320              }
    321            }
    322            
    323            if (data_received[2] == 0xF7 && data_received[3] == 0x00)
   \                     ??configure_7: (+1)
   \   0000017C   0x....             LDR.N    R0,??DataTable4_10
   \   0000017E   0x7880             LDRB     R0,[R0, #+2]
   \   00000180   0x28F7             CMP      R0,#+247
   \   00000182   0xD109             BNE.N    ??configure_8
   \   00000184   0x....             LDR.N    R0,??DataTable4_10
   \   00000186   0x78C0             LDRB     R0,[R0, #+3]
   \   00000188   0x2800             CMP      R0,#+0
   \   0000018A   0xD105             BNE.N    ??configure_8
    324            {
    325                  App = App_connected;                                                          //connection successful
   \   0000018C   0x....             LDR.N    R0,??DataTable4_4
   \   0000018E   0x2101             MOVS     R1,#+1
   \   00000190   0x6001             STR      R1,[R0, #+0]
    326                  ACQ_state = ACQ_Idle;                                                           //ready for daas manage
   \   00000192   0x....             LDR.N    R0,??DataTable4
   \   00000194   0x2100             MOVS     R1,#+0
   \   00000196   0x6001             STR      R1,[R0, #+0]
    327            }
    328          }
   \                     ??configure_8: (+1)
   \                     ??configure_3: (+1)
   \   00000198   0xBD10             POP      {R4,PC}          ;; return
    329          

   \                                 In section .text, align 2, keep-with-next
    330          void app_connect()
    331          {
   \                     app_connect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    332            configure(FW_ID);
   \   00000002   0x....             LDR.N    R0,??DataTable4_25
   \   00000004   0x.... 0x....      BL       configure
    333            
    334          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ACQ_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ACQ_session_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ACQ_wait_answ_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     comm_status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     App

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     data_ready_for_parsing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     var_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     size_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     bft_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     buffer_for_transf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     data_received

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     max_var_ind

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     Spirit_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     session_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     session_number

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     xTxDoneFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     ACQ_loop_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     address_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     size_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x........         DC32     frame_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x........         DC32     frame_send_read

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   0x........         DC32     frame_ind

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   0x........         DC32     count_rec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   0x........         DC32     FW_ID
    335          
    336          
    337          
    338          
    339          
    340          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   app_connect
         8   -> configure
       8   configure
         8   -> SdkDelayMs
         8   -> USART_ITConfig
       8   daas_manage
         8   -> SdkEvalLedToggle
         8   -> SdkEvalSpiWriteFifo
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritManagementWaCmdStrobeTx
         8   -> message_to_send
       8   message_to_send
         8   -> send_ext_read
      16   send_ext_read
        16   -> USART_ITConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_22
       4  ??DataTable4_23
       4  ??DataTable4_24
       4  ??DataTable4_25
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ACQ_loop_timer
       4  ACQ_session_timer
       4  ACQ_state
       4  ACQ_wait_answ_timer
       4  App
       8  FW_ID
       4  Spirit_data
      40  address_table
      10  app_connect
       1  bft_cnt
     212  buffer_for_transf
       4  comm_status
     410  configure
       1  count_rec
     440  daas_manage
       4  data_ready_for_parsing
      12  data_received
       8  dupa
       4  frame_ind
       8  frame_send_read
       4  frame_size
       4  loop_state
       4  max_var_ind
      84  message_to_send
     104  send_ext_read
       4  session_index
       4  session_number
       4  size_index
      40  size_table
       4  var_index

 
    81 bytes in section .bss
   313 bytes in section .data
 1 152 bytes in section .text
 
 1 152 bytes of CODE memory
   394 bytes of DATA memory

Errors: none
Warnings: 2
