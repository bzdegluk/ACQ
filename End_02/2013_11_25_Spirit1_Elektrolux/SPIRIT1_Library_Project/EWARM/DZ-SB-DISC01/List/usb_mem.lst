###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        28/Feb/2015  23:12:46
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_mem.c
#    Command line =  
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_mem.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        F:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I F:\IAR\arm\CMSIS\Include\
#    List file    =  
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\usb_mem.lst
#    Object file  =  
#        F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\usb_mem.o
#
###############################################################################

F:\ACQ\Proj_ver06_28022015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32_USB-FS-Device_Lib\Source\src\usb_mem.c
      1          /******************** (C) COPYRIGHT 2011 STMicroelectronics ********************
      2          * File Name          : usb_mem.c
      3          * Author             : MCD Application Team
      4          * Version            : V3.3.0
      5          * Date               : 21-March-2011
      6          * Description        : Utility functions for memory transfers to/from PMA
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #ifndef STM32F10X_CL
     16          
     17          /* Includes ------------------------------------------------------------------*/
     18          #include "usb_lib.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* Private macro -------------------------------------------------------------*/
     23          /* Private variables ---------------------------------------------------------*/
     24          /* Extern variables ----------------------------------------------------------*/
     25          /* Private function prototypes -----------------------------------------------*/
     26          /* Private functions ---------------------------------------------------------*/
     27          /*******************************************************************************
     28          * Function Name  : UserToPMABufferCopy
     29          * Description    : Copy a buffer from user memory area to packet memory area (PMA)
     30          * Input          : - pbUsrBuf: pointer to user memory area.
     31          *                  - wPMABufAddr: address into PMA.
     32          *                  - wNBytes: no. of bytes to be copied.
     33          * Output         : None.
     34          * Return         : None	.
     35          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
     37          {
   \                     UserToPMABufferCopy: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
     38            uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0x1C53             ADDS     R3,R2,#+1
   \   00000006   0x105B             ASRS     R3,R3,#+1
     39            uint32_t i, temp1, temp2;
     40            uint16_t *pdwVal;
     41            pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0xEA5F 0x0C41      LSLS     R12,R1,#+1
   \   0000000E   0xF10C 0x4C80      ADD      R12,R12,#+1073741824
   \   00000012   0xF51C 0x4CC0      ADDS     R12,R12,#+24576
   \   00000016   0x4667             MOV      R7,R12
     42            for (i = n; i != 0; i--)
   \   00000018   0x001C             MOVS     R4,R3
   \                     ??UserToPMABufferCopy_0: (+1)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD00E             BEQ.N    ??UserToPMABufferCopy_1
     43            {
     44              temp1 = (uint16_t) * pbUsrBuf;
   \   0000001E   0xF890 0xC000      LDRB     R12,[R0, #+0]
   \   00000022   0x4665             MOV      R5,R12
     45              pbUsrBuf++;
   \   00000024   0x1C40             ADDS     R0,R0,#+1
     46              temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
   \   00000026   0xF890 0xC000      LDRB     R12,[R0, #+0]
   \   0000002A   0xEA55 0x2C0C      ORRS     R12,R5,R12, LSL #+8
   \   0000002E   0x4666             MOV      R6,R12
     47              *pdwVal++ = temp2;
   \   00000030   0x803E             STRH     R6,[R7, #+0]
   \   00000032   0x1CBF             ADDS     R7,R7,#+2
     48              pdwVal++;
   \   00000034   0x1CBF             ADDS     R7,R7,#+2
     49              pbUsrBuf++;
   \   00000036   0x1C40             ADDS     R0,R0,#+1
     50            }
   \   00000038   0x1E64             SUBS     R4,R4,#+1
   \   0000003A   0xE7EE             B.N      ??UserToPMABufferCopy_0
     51          }
   \                     ??UserToPMABufferCopy_1: (+1)
   \   0000003C   0xBCF0             POP      {R4-R7}
   \   0000003E   0x4770             BX       LR               ;; return
     52          /*******************************************************************************
     53          * Function Name  : PMAToUserBufferCopy
     54          * Description    : Copy a buffer from user memory area to packet memory area (PMA)
     55          * Input          : - pbUsrBuf    = pointer to user memory area.
     56          *                  - wPMABufAddr = address into PMA.
     57          *                  - wNBytes     = no. of bytes to be copied.
     58          * Output         : None.
     59          * Return         : None.
     60          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
     62          {
   \                     PMAToUserBufferCopy: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     63            uint32_t n = (wNBytes + 1) >> 1;/* /2*/
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0x1C53             ADDS     R3,R2,#+1
   \   00000006   0x105B             ASRS     R3,R3,#+1
     64            uint32_t i;
     65            uint32_t *pdwVal;
     66            pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x004E             LSLS     R6,R1,#+1
   \   0000000C   0xF106 0x4680      ADD      R6,R6,#+1073741824
   \   00000010   0xF516 0x46C0      ADDS     R6,R6,#+24576
   \   00000014   0x0035             MOVS     R5,R6
     67            for (i = n; i != 0; i--)
   \   00000016   0x001C             MOVS     R4,R3
   \                     ??PMAToUserBufferCopy_0: (+1)
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD006             BEQ.N    ??PMAToUserBufferCopy_1
     68            {
     69              *(uint16_t*)pbUsrBuf++ = *pdwVal++;
   \   0000001C   0x682E             LDR      R6,[R5, #+0]
   \   0000001E   0x8006             STRH     R6,[R0, #+0]
   \   00000020   0x1D2D             ADDS     R5,R5,#+4
   \   00000022   0x1C40             ADDS     R0,R0,#+1
     70              pbUsrBuf++;
   \   00000024   0x1C40             ADDS     R0,R0,#+1
     71            }
   \   00000026   0x1E64             SUBS     R4,R4,#+1
   \   00000028   0xE7F6             B.N      ??PMAToUserBufferCopy_0
     72          }
   \                     ??PMAToUserBufferCopy_1: (+1)
   \   0000002A   0xBC70             POP      {R4-R6}
   \   0000002C   0x4770             BX       LR               ;; return
     73          
     74          #endif /* STM32F10X_CL */
     75          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   PMAToUserBufferCopy
      16   UserToPMABufferCopy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      46  PMAToUserBufferCopy
      64  UserToPMABufferCopy

 
 110 bytes in section .text
 
 110 bytes of CODE memory

Errors: none
Warnings: none
