###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_wwdg.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_wwdg.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\stm32l1xx_wwdg.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\stm32l1xx_wwdg.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_wwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    31-December-2010
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Window watchdog (WWDG) peripheral:           
      9            *           - Prescaler, Refresh window and Counter configuration
     10            *           - WWDG activation
     11            *           - Interrupts and flags management
     12            *             
     13            *  @verbatim
     14            *    
     15            *          ===================================================================
     16            *                                     WWDG features
     17            *          ===================================================================
     18            *                                        
     19            *          Once enabled the WWDG generates a system reset on expiry of a programmed
     20            *          time period, unless the program refreshes the counter (downcounter) 
     21            *          before to reach 0x3F value (i.e. a reset is generated when the counter
     22            *          value rolls over from 0x40 to 0x3F). 
     23            *          An MCU reset is also generated if the counter value is refreshed
     24            *          before the counter has reached the refresh window value. This 
     25            *          implies that the counter must be refreshed in a limited window.
     26            *            
     27            *          Once enabled the WWDG cannot be disabled except by a system reset.                          
     28            *          
     29            *          WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
     30            *          reset occurs.
     31            *            
     32            *          The WWDG counter input clock is derived from the APB clock divided 
     33            *          by a programmable prescaler.
     34            *              
     35            *          WWDG counter clock = PCLK1 / Prescaler
     36            *          WWDG timeout = (WWDG counter clock) * (counter value)
     37            *                      
     38            *          Min-max timeout value @32MHz (PCLK1): ~128us / ~65.6ms
     39            *                            
     40            *          ===================================================================
     41            *                                 How to use this driver
     42            *          =================================================================== 
     43            *          1. Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
     44            *            
     45            *          2. Configure the WWDG prescaler using WWDG_SetPrescaler() function
     46            *                           
     47            *          3. Configure the WWDG refresh window using WWDG_SetWindowValue() function
     48            *            
     49            *          4. Set the WWDG counter value and start it using WWDG_Enable() function.
     50            *             When the WWDG is enabled the counter value should be configured to 
     51            *             a value greater than 0x40 to prevent generating an immediate reset.     
     52            *            
     53            *          5. Optionally you can enable the Early wakeup interrupt which is 
     54            *             generated when the counter reach 0x40.
     55            *             Once enabled this interrupt cannot be disabled except by a system reset.
     56            *                 
     57            *          6. Then the application program must refresh the WWDG counter at regular
     58            *             intervals during normal operation to prevent an MCU reset, using
     59            *             WWDG_SetCounter() function. This operation must occur only when
     60            *             the counter value is lower than the refresh window value, 
     61            *             programmed using WWDG_SetWindowValue().         
     62            *
     63            *  @endverbatim  
     64            *                             
     65            ******************************************************************************
     66            * @attention
     67            *
     68            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     69            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     70            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     71            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     72            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     73            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     74            *
     75            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     76            ******************************************************************************  
     77            */ 
     78          
     79          /* Includes ------------------------------------------------------------------*/
     80          #include "stm32l1xx_wwdg.h"
     81          #include "stm32l1xx_rcc.h"
     82          
     83          /** @addtogroup STM32L1xx_StdPeriph_Driver
     84            * @{
     85            */
     86          
     87          /** @defgroup WWDG 
     88            * @brief WWDG driver modules
     89            * @{
     90            */
     91          
     92          /* Private typedef -----------------------------------------------------------*/
     93          /* Private define ------------------------------------------------------------*/
     94          
     95          /* ----------- WWDG registers bit address in the alias region ----------- */
     96          #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
     97          
     98          /* Alias word address of EWI bit */
     99          #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
    100          #define EWI_BitNumber     0x09
    101          #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
    102          
    103          /* --------------------- WWDG registers bit mask ------------------------ */
    104          
    105          /* CFR register bit mask */
    106          #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
    107          #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
    108          #define BIT_MASK          ((uint8_t)0x7F)
    109          
    110          /* Private macro -------------------------------------------------------------*/
    111          /* Private variables ---------------------------------------------------------*/
    112          /* Private function prototypes -----------------------------------------------*/
    113          /* Private functions ---------------------------------------------------------*/
    114          
    115          /** @defgroup WWDG_Private_Functions
    116            * @{
    117            */
    118          
    119          /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
    120           *  @brief   Prescaler, Refresh window and Counter configuration functions 
    121           *
    122          @verbatim   
    123           ===============================================================================
    124                    Prescaler, Refresh window and Counter configuration functions
    125           ===============================================================================  
    126          
    127          @endverbatim
    128            * @{
    129            */
    130          
    131          /**
    132            * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
    133            * @param  None
    134            * @retval None
    135            */

   \                                 In section .text, align 2, keep-with-next
    136          void WWDG_DeInit(void)
    137          {
   \                     WWDG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    139            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000012   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    140          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    141          
    142          /**
    143            * @brief  Sets the WWDG Prescaler.
    144            * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
    145            *   This parameter can be one of the following values:
    146            *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
    147            *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
    148            *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
    149            *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
    150            * @retval None
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
    153          {
   \                     WWDG_SetPrescaler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    154            uint32_t tmpreg = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    155            /* Check the parameters */
    156            assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00B             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000000A   0x2C80             CMP      R4,#+128
   \   0000000C   0xD009             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000000E   0xF5B4 0x7F80      CMP      R4,#+256
   \   00000012   0xD006             BEQ.N    ??WWDG_SetPrescaler_0
   \   00000014   0xF5B4 0x7FC0      CMP      R4,#+384
   \   00000018   0xD003             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000001A   0x219C             MOVS     R1,#+156
   \   0000001C   0x....             LDR.N    R0,??DataTable6
   \   0000001E   0x.... 0x....      BL       assert_failed
    157            /* Clear WDGTB[1:0] bits */
    158            tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
   \                     ??WWDG_SetPrescaler_0: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40002c04
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF430 0x70C0      BICS     R0,R0,#0x180
   \   0000002A   0x0005             MOVS     R5,R0
    159            /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
    160            tmpreg |= WWDG_Prescaler;
   \   0000002C   0x4325             ORRS     R5,R4,R5
    161            /* Store the new value */
    162            WWDG->CFR = tmpreg;
   \   0000002E   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40002c04
   \   00000030   0x6005             STR      R5,[R0, #+0]
    163          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    164          
    165          /**
    166            * @brief  Sets the WWDG window value.
    167            * @param  WindowValue: specifies the window value to be compared to the downcounter.
    168            *   This parameter value must be lower than 0x80.
    169            * @retval None
    170            */

   \                                 In section .text, align 2, keep-with-next
    171          void WWDG_SetWindowValue(uint8_t WindowValue)
    172          {
   \                     WWDG_SetWindowValue: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    173            __IO uint32_t tmpreg = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    174          
    175            /* Check the parameters */
    176            assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDB03             BLT.N    ??WWDG_SetWindowValue_0
   \   00000010   0x21B0             MOVS     R1,#+176
   \   00000012   0x....             LDR.N    R0,??DataTable6
   \   00000014   0x.... 0x....      BL       assert_failed
    177            /* Clear W[6:0] bits */
    178          
    179            tmpreg = WWDG->CFR & CFR_W_MASK;
   \                     ??WWDG_SetWindowValue_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40002c04
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x09C0             LSRS     R0,R0,#+7
   \   0000001E   0x01C0             LSLS     R0,R0,#+7
   \   00000020   0x9000             STR      R0,[SP, #+0]
    180          
    181            /* Set W[6:0] bits according to WindowValue value */
    182            tmpreg |= WindowValue & (uint32_t) BIT_MASK;
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0xF014 0x017F      ANDS     R1,R4,#0x7F
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    183          
    184            /* Store the new value */
    185            WWDG->CFR = tmpreg;
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40002c04
   \   00000032   0x6008             STR      R0,[R1, #+0]
    186          }
   \   00000034   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    187          
    188          /**
    189            * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
    190            * @note   Once enabled this interrupt cannot be disabled except by a system reset. 
    191            * @param  None
    192            * @retval None
    193            */

   \                                 In section .text, align 2, keep-with-next
    194          void WWDG_EnableIT(void)
    195          {
    196            *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
   \                     WWDG_EnableIT: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable6_2  ;; 0x420580a4
   \   00000004   0x6008             STR      R0,[R1, #+0]
    197          }
   \   00000006   0x4770             BX       LR               ;; return
    198          
    199          /**
    200            * @brief  Sets the WWDG counter value.
    201            * @param  Counter: specifies the watchdog counter value.
    202            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    203            *   an immediate reset)  
    204            * @retval None
    205            */

   \                                 In section .text, align 2, keep-with-next
    206          void WWDG_SetCounter(uint8_t Counter)
    207          {
   \                     WWDG_SetCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    208            /* Check the parameters */
    209            assert_param(IS_WWDG_COUNTER(Counter));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C40             CMP      R4,#+64
   \   00000008   0xDB02             BLT.N    ??WWDG_SetCounter_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDB03             BLT.N    ??WWDG_SetCounter_1
   \                     ??WWDG_SetCounter_0: (+1)
   \   00000010   0x21D1             MOVS     R1,#+209
   \   00000012   0x....             LDR.N    R0,??DataTable6
   \   00000014   0x.... 0x....      BL       assert_failed
    210            /* Write to T[6:0] bits to configure the counter value, no need to do
    211               a read-modify-write; writing a 0 to WDGA bit does nothing */
    212            WWDG->CR = Counter & BIT_MASK;
   \                     ??WWDG_SetCounter_1: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF014 0x007F      ANDS     R0,R4,#0x7F
   \   0000001E   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40002c00
   \   00000020   0x6008             STR      R0,[R1, #+0]
    213          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    214          
    215          /**
    216            * @}
    217            */
    218          
    219          /** @defgroup WWDG_Group2 WWDG activation functions
    220           *  @brief   WWDG activation functions 
    221           *
    222          @verbatim   
    223           ===============================================================================
    224                                 WWDG activation functions
    225           ===============================================================================  
    226          
    227          @endverbatim
    228            * @{
    229            */
    230          
    231          /**
    232            * @brief  Enables WWDG and load the counter value.                  
    233            * @param  Counter: specifies the watchdog counter value.
    234            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    235            *   an immediate reset)
    236            * @retval None
    237            */

   \                                 In section .text, align 2, keep-with-next
    238          void WWDG_Enable(uint8_t Counter)
    239          {
   \                     WWDG_Enable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    240            /* Check the parameters */
    241            assert_param(IS_WWDG_COUNTER(Counter));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C40             CMP      R4,#+64
   \   00000008   0xDB02             BLT.N    ??WWDG_Enable_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDB03             BLT.N    ??WWDG_Enable_1
   \                     ??WWDG_Enable_0: (+1)
   \   00000010   0x21F1             MOVS     R1,#+241
   \   00000012   0x....             LDR.N    R0,??DataTable6
   \   00000014   0x.... 0x....      BL       assert_failed
    242            WWDG->CR = WWDG_CR_WDGA | Counter;
   \                     ??WWDG_Enable_1: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000001E   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40002c00
   \   00000020   0x6008             STR      R0,[R1, #+0]
    243          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    244          
    245          /**
    246            * @}
    247            */
    248          
    249          /** @defgroup WWDG_Group3 Interrupts and flags management functions
    250           *  @brief   Interrupts and flags management functions 
    251           *
    252          @verbatim   
    253           ===============================================================================
    254                           Interrupts and flags management functions
    255           ===============================================================================  
    256          
    257          @endverbatim
    258            * @{
    259            */
    260          
    261          /**
    262            * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
    263            * @param  None
    264            * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
    265            */

   \                                 In section .text, align 2, keep-with-next
    266          FlagStatus WWDG_GetFlagStatus(void)
    267          {
    268            FlagStatus bitstatus = RESET;
   \                     WWDG_GetFlagStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    269              
    270            if ((WWDG->SR) != (uint32_t)RESET)
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40002c08
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD002             BEQ.N    ??WWDG_GetFlagStatus_0
    271            {
    272              bitstatus = SET;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0xE001             B.N      ??WWDG_GetFlagStatus_1
    273            }
    274            else
    275            {
    276              bitstatus = RESET;
   \                     ??WWDG_GetFlagStatus_0: (+1)
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x0008             MOVS     R0,R1
    277            }
    278            return bitstatus;
   \                     ??WWDG_GetFlagStatus_1: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    279          }
    280          
    281          /**
    282            * @brief  Clears Early Wakeup interrupt flag.
    283            * @param  None
    284            * @retval None
    285            */

   \                                 In section .text, align 2, keep-with-next
    286          void WWDG_ClearFlag(void)
    287          {
    288            WWDG->SR = (uint32_t)RESET;
   \                     WWDG_ClearFlag: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40002c08
   \   00000004   0x6008             STR      R0,[R1, #+0]
    289          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40002C04         DC32     0x40002c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x420580A4         DC32     0x420580a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40002C00         DC32     0x40002c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40002C08         DC32     0x40002c08

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 4CH, 5CH
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x4C 0x5C    
   \   00000048   0x53 0x54          DC8 53H, 54H, 4DH, 33H, 32H, 4CH, 31H, 78H
   \              0x4D 0x33    
   \              0x32 0x4C    
   \              0x31 0x78    
   \   00000050   0x78 0x5F          DC8 78H, 5FH, 53H, 74H, 64H, 50H, 65H, 72H
   \              0x53 0x74    
   \              0x64 0x50    
   \              0x65 0x72    
   \   00000058   0x69 0x70          DC8 69H, 70H, 68H, 5FH, 4CH, 69H, 62H, 5CH
   \              0x68 0x5F    
   \              0x4C 0x69    
   \              0x62 0x5C    
   \   00000060   0x53 0x6F          DC8 53H, 6FH, 75H, 72H, 63H, 65H, 5CH, 53H
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x5C 0x53    
   \   00000068   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 4CH, 31H, 78H, 78H
   \              0x33 0x32    
   \              0x4C 0x31    
   \              0x78 0x78    
   \   00000070   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000078   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000080   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 73H, 74H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x73 0x74    
   \   00000088   0x6D 0x33          DC8 6DH, 33H, 32H, 6CH, 31H, 78H, 78H, 5FH
   \              0x32 0x6C    
   \              0x31 0x78    
   \              0x78 0x5F    
   \   00000090   0x77 0x77          DC8 77H, 77H, 64H, 67H, 2EH, 63H, 0
   \              0x64 0x67    
   \              0x2E 0x63    
   \              0x00         
   \   00000097   0x00               DC8 0
    290          
    291          /**
    292            * @}
    293            */
    294          
    295          /**
    296            * @}
    297            */
    298          
    299          /**
    300            * @}
    301            */
    302          
    303          /**
    304            * @}
    305            */
    306          
    307          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WWDG_ClearFlag
       8   WWDG_DeInit
         8   -> RCC_APB1PeriphResetCmd
       8   WWDG_Enable
         8   -> assert_failed
       0   WWDG_EnableIT
       0   WWDG_GetFlagStatus
       8   WWDG_SetCounter
         8   -> assert_failed
      16   WWDG_SetPrescaler
        16   -> assert_failed
      16   WWDG_SetWindowValue
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
     152  ?_0
       8  WWDG_ClearFlag
      24  WWDG_DeInit
      36  WWDG_Enable
       8  WWDG_EnableIT
      24  WWDG_GetFlagStatus
      36  WWDG_SetCounter
      52  WWDG_SetPrescaler
      54  WWDG_SetWindowValue

 
 152 bytes in section .rodata
 262 bytes in section .text
 
 262 bytes of CODE  memory
 152 bytes of CONST memory

Errors: none
Warnings: none
