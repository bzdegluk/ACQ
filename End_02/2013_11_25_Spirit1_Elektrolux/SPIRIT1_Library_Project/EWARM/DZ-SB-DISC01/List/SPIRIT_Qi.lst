###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:43
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Qi.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Qi.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_Qi.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_Qi.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Qi.c
      1          /**
      2           * @file    SPIRIT_Qi.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT QI.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_Qi.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          
     30          /**
     31           * @addtogroup SPIRIT_Libraries
     32           * @{
     33           */
     34          
     35          
     36          /**
     37           * @addtogroup SPIRIT_Qi
     38           * @{
     39           */
     40          
     41          
     42          /**
     43           * @defgroup Qi_Private_TypesDefinitions        QI Private Types Definitions
     44           * @{
     45           */
     46          
     47          /**
     48           *@}
     49           */
     50          
     51          
     52          /**
     53           * @defgroup Qi_Private_Defines                 QI Private Defines
     54           * @{
     55           */
     56          
     57          /**
     58           *@}
     59           */
     60          
     61          
     62          /**
     63           * @defgroup Qi_Private_Macros                  QI Private Macros
     64           * @{
     65           */
     66          
     67          /**
     68           *@}
     69           */
     70          
     71          
     72          /**
     73           * @defgroup Qi_Private_Variables               QI Private Variables
     74           * @{
     75           */
     76          
     77          /**
     78           *@}
     79           */
     80          
     81          
     82          /**
     83           * @defgroup Qi_Private_FunctionPrototypes      QI Private Function Prototypes
     84           * @{
     85           */
     86          
     87          /**
     88           *@}
     89           */
     90          
     91          
     92          /**
     93           * @defgroup Qi_Private_Functions               QI Private Functions
     94           * @{
     95           */
     96          
     97          /**
     98           * @brief  Enables/Disables the PQI Preamble Quality Indicator check. The running peak PQI is
     99           *         compared to a threshold value and the preamble valid IRQ is asserted as soon as the threshold is passed.
    100           * @param  xNewState new state for PQI check.
    101           *         This parameter can be: S_ENABLE or S_DISABLE.
    102           * @retval None.
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void SpiritQiPqiCheck(SpiritFunctionalState xNewState)
    105          {
   \                     SpiritQiPqiCheck: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    106            uint8_t tempRegValue;
    107          
    108            /* Check the parameters */
    109            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritQiPqiCheck_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritQiPqiCheck_0
   \   00000010   0x216D             MOVS     R1,#+109
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000016   0x.... 0x....      BL       s_assert_failed
    110          
    111            /* Reads the QI register value */
    112            g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
   \                     ??SpiritQiPqiCheck_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x203A             MOVS     R0,#+58
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000002A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    113          
    114            /* Enables or disables the PQI Check bit on the QI_BASE register */
    115            if(xNewState == S_ENABLE)
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD106             BNE.N    ??SpiritQiPqiCheck_1
    116            {
    117              tempRegValue |= QI_PQI_MASK;
   \   00000036   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000042   0xE005             B.N      ??SpiritQiPqiCheck_2
    118            }
    119            else
    120            {
    121              tempRegValue &= ~QI_PQI_MASK;
   \                     ??SpiritQiPqiCheck_1: (+1)
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    122            }
    123          
    124            /* Writes value on the QI register */
    125            g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
   \                     ??SpiritQiPqiCheck_2: (+1)
   \   00000050   0xAA00             ADD      R2,SP,#+0
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x203A             MOVS     R0,#+58
   \   00000056   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000060   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    126          
    127          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    128          
    129          
    130          /**
    131           * @brief  Enables/Disables the Synchronization Quality Indicator check. The running peak SQI is
    132           *         compared to a threshold value and the sync valid IRQ is asserted as soon as the threshold is passed.
    133           * @param  xNewState new state for SQI check.
    134           *         This parameter can be: S_ENABLE or S_DISABLE.
    135           * @retval None.
    136           */

   \                                 In section .text, align 2, keep-with-next
    137          void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
    138          {
   \                     SpiritQiSqiCheck: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    139            uint8_t tempRegValue;
    140          
    141            /* Check the parameters */
    142            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritQiSqiCheck_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritQiSqiCheck_0
   \   00000010   0x218E             MOVS     R1,#+142
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000016   0x.... 0x....      BL       s_assert_failed
    143          
    144            /* Reads the QI register value */
    145            g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSqiCheck_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x203A             MOVS     R0,#+58
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000002A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    146          
    147            /* Enables or disables the SQI Check bit on the QI_BASE register */
    148            if(xNewState == S_ENABLE)
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD106             BNE.N    ??SpiritQiSqiCheck_1
    149            {
    150              tempRegValue |= QI_SQI_MASK;
   \   00000036   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000042   0xE005             B.N      ??SpiritQiSqiCheck_2
    151            }
    152            else
    153            {
    154              tempRegValue &= ~QI_SQI_MASK;
   \                     ??SpiritQiSqiCheck_1: (+1)
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    155            }
    156          
    157            /* Writes value on the QI register */
    158            g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSqiCheck_2: (+1)
   \   00000050   0xAA00             ADD      R2,SP,#+0
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x203A             MOVS     R0,#+58
   \   00000056   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000060   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    159          
    160          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    161          
    162          
    163          /**
    164           * @brief  Sets the PQI threshold. The preamble quality threshold is 4*PQI_TH (PQI_TH = 0..15).
    165           * @param  xPqiThr parameter of the formula above.
    166           * 	   This variable is a @ref PqiThreshold.
    167           * @retval None.
    168           */

   \                                 In section .text, align 2, keep-with-next
    169          void SpiritQiSetPqiThreshold(PqiThreshold xPqiThr)
    170          {
   \                     SpiritQiSetPqiThreshold: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    171            uint8_t tempRegValue;
    172          
    173            /* Check the parameters */
    174            s_assert_param(IS_PQI_THR(xPqiThr));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD031             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C04             CMP      R4,#+4
   \   0000000E   0xD02E             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD02B             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C0C             CMP      R4,#+12
   \   0000001A   0xD028             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C10             CMP      R4,#+16
   \   00000020   0xD025             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C14             CMP      R4,#+20
   \   00000026   0xD022             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C18             CMP      R4,#+24
   \   0000002C   0xD01F             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C1C             CMP      R4,#+28
   \   00000032   0xD01C             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C20             CMP      R4,#+32
   \   00000038   0xD019             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C24             CMP      R4,#+36
   \   0000003E   0xD016             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C28             CMP      R4,#+40
   \   00000044   0xD013             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C2C             CMP      R4,#+44
   \   0000004A   0xD010             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2C30             CMP      R4,#+48
   \   00000050   0xD00D             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2C34             CMP      R4,#+52
   \   00000056   0xD00A             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2C38             CMP      R4,#+56
   \   0000005C   0xD007             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C3C             CMP      R4,#+60
   \   00000062   0xD004             BEQ.N    ??SpiritQiSetPqiThreshold_0
   \   00000064   0x21AE             MOVS     R1,#+174
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000006A   0x.... 0x....      BL       s_assert_failed
    175          
    176            /* Reads the QI register value */
    177            g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSetPqiThreshold_0: (+1)
   \   0000006E   0xAA00             ADD      R2,SP,#+0
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x203A             MOVS     R0,#+58
   \   00000074   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   0000007E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000082   0x8001             STRH     R1,[R0, #+0]
    178          
    179            /* Build the PQI threshold value to be written */
    180            tempRegValue &= 0xC3;
   \   00000084   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000088   0xF010 0x00C3      ANDS     R0,R0,#0xC3
   \   0000008C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    181            tempRegValue |= ((uint8_t)xPqiThr);
   \   00000090   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000094   0x4320             ORRS     R0,R4,R0
   \   00000096   0xF88D 0x0000      STRB     R0,[SP, #+0]
    182          
    183            /* Writes value on the QI register */
    184            g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
   \   0000009A   0xAA00             ADD      R2,SP,#+0
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x203A             MOVS     R0,#+58
   \   000000A0   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000A4   0x9001             STR      R0,[SP, #+4]
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   000000AA   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000AE   0x8001             STRH     R1,[R0, #+0]
    185          
    186          }
   \   000000B0   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    187          
    188          
    189          /**
    190           * @brief  Returns the PQI threshold. The preamble quality threshold is 4*PQI_TH (PQI_TH = 0..15).
    191           * @param  None.
    192           * @retval PqiThreshold PQI threshold (PQI_TH of the formula above).
    193           */

   \                                 In section .text, align 2, keep-with-next
    194          PqiThreshold SpiritQiGetPqiThreshold(void)
    195          {
   \                     SpiritQiGetPqiThreshold: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    196            uint8_t tempRegValue;
    197          
    198            /* Reads the QI register value */
    199            g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x203A             MOVS     R0,#+58
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    200          
    201            /* Rebuild and return the PQI threshold value */
    202            return (PqiThreshold)(tempRegValue & 0x3C);
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF010 0x003C      ANDS     R0,R0,#0x3C
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    203          
    204          }
    205          
    206          
    207          /**
    208           * @brief  Sets the SQI threshold. The synchronization quality
    209           *         threshold is equal to 8 * SYNC_LEN - 2 * SQI_TH with SQI_TH = 0..3. When SQI_TH is 0 perfect match is required; when
    210           *         SQI_TH = 1, 2, 3 then 1, 2, or 3 bit errors are respectively accepted. It is recommended that the SQI check is always
    211           *         enabled.
    212           * @param  xSqiThr parameter of the formula above.
    213           * 	   This parameter is a @ref SqiThreshold.
    214           * @retval None.
    215           */

   \                                 In section .text, align 2, keep-with-next
    216          void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
    217          {
   \                     SpiritQiSetSqiThreshold: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    218            uint8_t tempRegValue;
    219          
    220            /* Check the parameters */
    221            s_assert_param(IS_SQI_THR(xSqiThr));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00D             BEQ.N    ??SpiritQiSetSqiThreshold_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C40             CMP      R4,#+64
   \   0000000E   0xD00A             BEQ.N    ??SpiritQiSetSqiThreshold_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C80             CMP      R4,#+128
   \   00000014   0xD007             BEQ.N    ??SpiritQiSetSqiThreshold_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2CC0             CMP      R4,#+192
   \   0000001A   0xD004             BEQ.N    ??SpiritQiSetSqiThreshold_0
   \   0000001C   0x21DD             MOVS     R1,#+221
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000022   0x.... 0x....      BL       s_assert_failed
    222          
    223            /* Reads the QI register value */
    224            g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSetSqiThreshold_0: (+1)
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x203A             MOVS     R0,#+58
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000036   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000003A   0x8001             STRH     R1,[R0, #+0]
    225          
    226            /* Build the SQI threshold value to be written */
    227            tempRegValue &= 0x3F;
   \   0000003C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000040   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000044   0xF88D 0x0000      STRB     R0,[SP, #+0]
    228            tempRegValue |= ((uint8_t)xSqiThr);
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0x4320             ORRS     R0,R4,R0
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    229          
    230            /* Writes the new value on the QI register */
    231            g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
   \   00000052   0xAA00             ADD      R2,SP,#+0
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x203A             MOVS     R0,#+58
   \   00000058   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000062   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000066   0x8001             STRH     R1,[R0, #+0]
    232          
    233          }
   \   00000068   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    234          
    235          
    236          /**
    237           * @brief  Returns the SQI threshold. The synchronization quality threshold is equal to 8 * SYNC_LEN - 2 * SQI_TH with SQI_TH = 0..3.
    238           * @param  None.
    239           * @retval SqiThreshold SQI threshold (SQI_TH of the formula above).
    240           */

   \                                 In section .text, align 2, keep-with-next
    241          SqiThreshold SpiritQiGetSqiThreshold(void)
    242          {
   \                     SpiritQiGetSqiThreshold: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    243            uint8_t tempRegValue;
    244          
    245            /* Reads the QI register value */
    246            g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x203A             MOVS     R0,#+58
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    247          
    248            /* Rebuild and return the SQI threshold value */
    249            return (SqiThreshold)(tempRegValue & 0xC0);
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    250          
    251          }
    252          
    253          
    254          /**
    255           * @brief  Returns the PQI value.
    256           * @param  None.
    257           * @retval uint8_t PQI value.
    258           */

   \                                 In section .text, align 2, keep-with-next
    259          uint8_t SpiritQiGetPqi(void)
    260          {
   \                     SpiritQiGetPqi: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    261            uint8_t tempRegValue;
    262          
    263            /* Reads the LINK_QUALIF2 register value */
    264            g_xStatus = SpiritSpiReadRegisters(LINK_QUALIF2_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C5             MOVS     R0,#+197
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    265          
    266            /* Returns the PQI value */
    267            return tempRegValue;
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    268          
    269          }
    270          
    271          
    272          /**
    273           * @brief  Returns the SQI value.
    274           * @param  None.
    275           * @retval uint8_t SQI value.
    276           */

   \                                 In section .text, align 2, keep-with-next
    277          uint8_t SpiritQiGetSqi(void)
    278          {
   \                     SpiritQiGetSqi: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    279            uint8_t tempRegValue;
    280          
    281            /* Reads the register LINK_QUALIF1 value */
    282            g_xStatus = SpiritSpiReadRegisters(LINK_QUALIF1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C6             MOVS     R0,#+198
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    283          
    284            /* Rebuild and return the SQI value */
    285            return (tempRegValue & 0x7F);
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    286          
    287          }
    288          
    289          
    290          /**
    291           * @brief  Returns the LQI value.
    292           * @param  None.
    293           * @retval uint8_t LQI value.
    294           */

   \                                 In section .text, align 2, keep-with-next
    295          uint8_t SpiritQiGetLqi(void)
    296          {
   \                     SpiritQiGetLqi: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    297            uint8_t tempRegValue;
    298          
    299            /* Reads the LINK_QUALIF0 register value */
    300            g_xStatus = SpiritSpiReadRegisters(LINK_QUALIF0_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C7             MOVS     R0,#+199
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_1
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    301          
    302            /* Rebuild and return the LQI value */
    303            return ((tempRegValue & 0xF0)>> 4);
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x0900             LSRS     R0,R0,#+4
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    304          
    305          }
    306          
    307          
    308          /**
    309           * @brief  Returns the CS status.
    310           * @param  None.
    311           * @retval SpiritFlagStatus CS value (S_SET or S_RESET).
    312           */

   \                                 In section .text, align 2, keep-with-next
    313          SpiritFlagStatus SpiritQiGetCs(void)
    314          {
   \                     SpiritQiGetCs: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    315            uint8_t tempRegValue;
    316          
    317            /* Reads the LINK_QUALIF1 register value */
    318            g_xStatus = SpiritSpiReadRegisters(LINK_QUALIF1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C6             MOVS     R0,#+198
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable21_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    319          
    320            /* Rebuild and returns the CS status value */
    321            if((tempRegValue & 0x80) == 0)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x0600             LSLS     R0,R0,#+24
   \   0000001E   0xD401             BMI.N    ??SpiritQiGetCs_0
    322            {
    323              return S_RESET;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??SpiritQiGetCs_1
    324            }
    325            else
    326            {
    327              return S_SET;
   \                     ??SpiritQiGetCs_0: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??SpiritQiGetCs_1: (+1)
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    328            }
    329          
    330          }
    331          
    332          
    333          /**
    334           * @brief  Returns the RSSI value. The measured power is reported in steps of half a dB from 0 to 255 and is offset in such a way that -120 dBm corresponds
    335           *         to 20.
    336           * @param  None.
    337           * @retval uint8_t RSSI value.
    338           */

   \                                 In section .text, align 2, keep-with-next
    339          uint8_t SpiritQiGetRssi(void)
    340          {
   \                     SpiritQiGetRssi: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    341            uint8_t tempRegValue;
    342          
    343            /* Reads the RSSI_LEVEL register value */
    344            g_xStatus = SpiritSpiReadRegisters(RSSI_LEVEL_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20C8             MOVS     R0,#+200
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable21_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    345          
    346            /* Returns the RSSI value */
    347            return tempRegValue;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xBD0E             POP      {R1-R3,PC}       ;; return
    348          
    349          }
    350          
    351          
    352          /**
    353           * @brief  Sets the RSSI threshold.
    354           * @param  cRssiThr RSSI threshold reported in steps of half a dBm with a -130 dBm offset.
    355           *         This parameter must be a uint8_t.
    356           * @retval None.
    357           */

   \                                 In section .text, align 2, keep-with-next
    358          void SpiritQiSetRssiThreshold(uint8_t cRssiThr)
    359          {
   \                     SpiritQiSetRssiThreshold: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    360            /* Writes the new value on the RSSI_TH register */
    361            g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &cRssiThr);
   \   00000004   0xAA02             ADD      R2,SP,#+8
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2022             MOVS     R0,#+34
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable21_1
   \   00000012   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    362          
    363          }
   \   00000018   0xBD07             POP      {R0-R2,PC}       ;; return
    364          
    365          
    366          /**
    367           * @brief  Returns the RSSI threshold.
    368           * @param  None.
    369           * @retval uint8_t RSSI threshold.
    370           */

   \                                 In section .text, align 2, keep-with-next
    371          uint8_t SpiritQiGetRssiThreshold(void)
    372          {
   \                     SpiritQiGetRssiThreshold: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    373            uint8_t tempRegValue;
    374          
    375            /* Reads the RSSI_TH register value */
    376            g_xStatus = SpiritSpiReadRegisters(RSSI_TH_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2022             MOVS     R0,#+34
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable21_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    377          
    378            /* Returns RSSI threshold */
    379            return tempRegValue;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xBD0E             POP      {R1-R3,PC}       ;; return
    380          
    381          }
    382          
    383          
    384          /**
    385           * @brief  Computes the RSSI threshold from its dBm value according to the formula: (RSSI[Dbm] + 130)/0.5
    386           * @param  nDbmValue RSSI threshold reported in dBm.
    387           *         This parameter must be a sint16_t.
    388           * @retval uint8_t RSSI threshold corresponding to dBm value.
    389           */

   \                                 In section .text, align 2, keep-with-next
    390          uint8_t SpiritQiComputeRssiThreshold(int nDbmValue)
    391          {
   \                     SpiritQiComputeRssiThreshold: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    392            /* Check the parameters */
    393            s_assert_param(IS_RSSI_THR_DBM(nDbmValue));
   \   00000004   0xF114 0x0F82      CMN      R4,#+130
   \   00000008   0xDB02             BLT.N    ??SpiritQiComputeRssiThreshold_0
   \   0000000A   0xF114 0x0F01      CMN      R4,#+1
   \   0000000E   0xDB04             BLT.N    ??SpiritQiComputeRssiThreshold_1
   \                     ??SpiritQiComputeRssiThreshold_0: (+1)
   \   00000010   0xF240 0x1189      MOVW     R1,#+393
   \   00000014   0x....             LDR.N    R0,??DataTable21
   \   00000016   0x.... 0x....      BL       s_assert_failed
    394          
    395            /* Computes the RSSI threshold for register */
    396            return 2*(nDbmValue+130);
   \                     ??SpiritQiComputeRssiThreshold_1: (+1)
   \   0000001A   0xF1B4 0x007E      SUBS     R0,R4,#+126
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x0040             LSLS     R0,R0,#+1
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    397          
    398          }
    399          
    400          /**
    401           * @brief  Sets the RSSI threshold from its dBm value according to the formula: (RSSI[Dbm] + 130)/0.5.
    402           * @param  nDbmValue RSSI threshold reported in dBm.
    403           *         This parameter must be a sint16_t.
    404           * @retval None.
    405           */

   \                                 In section .text, align 2, keep-with-next
    406          void SpiritQiSetRssiThresholddBm(int nDbmValue)
    407          {
   \                     SpiritQiSetRssiThresholddBm: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    408            uint8_t tempRegValue=2*(nDbmValue+130);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x387E             SUBS     R0,R0,#+126
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    409          
    410            /* Check the parameters */
    411            s_assert_param(IS_RSSI_THR_DBM(nDbmValue));
   \   00000010   0xF114 0x0F82      CMN      R4,#+130
   \   00000014   0xDB02             BLT.N    ??SpiritQiSetRssiThresholddBm_0
   \   00000016   0xF114 0x0F01      CMN      R4,#+1
   \   0000001A   0xDB04             BLT.N    ??SpiritQiSetRssiThresholddBm_1
   \                     ??SpiritQiSetRssiThresholddBm_0: (+1)
   \   0000001C   0xF240 0x119B      MOVW     R1,#+411
   \   00000020   0x....             LDR.N    R0,??DataTable21
   \   00000022   0x.... 0x....      BL       s_assert_failed
    412          
    413            /* Writes the new value on the RSSI_TH register */
    414            g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSetRssiThresholddBm_1: (+1)
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x2022             MOVS     R0,#+34
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x....             LDR.N    R0,??DataTable21_1
   \   00000034   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000038   0x8001             STRH     R1,[R0, #+0]
    415          
    416          }
   \   0000003A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    417          
    418          /**
    419           * @brief  Sets the RSSI filter gain. This parameter sets the bandwidth of a low pass IIR filter (RSSI_FLT register, allowed values 0..15), a
    420           *         lower values gives a faster settling of the measurements but lower precision. The recommended value for such parameter is 14.
    421           * @param  xRssiFg RSSI filter gain value.
    422           *         This parameter can be any value of @ref RssiFilterGain.
    423           * @retval None.
    424           */

   \                                 In section .text, align 2, keep-with-next
    425          void SpiritQiSetRssiFilterGain(RssiFilterGain xRssiFg)
    426          {
   \                     SpiritQiSetRssiFilterGain: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    427            uint8_t tempRegValue;
    428          
    429             /* Check the parameters */
    430            s_assert_param(IS_RSSI_FILTER_GAIN(xRssiFg));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD031             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C10             CMP      R4,#+16
   \   0000000E   0xD02E             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C20             CMP      R4,#+32
   \   00000014   0xD02B             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C30             CMP      R4,#+48
   \   0000001A   0xD028             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C40             CMP      R4,#+64
   \   00000020   0xD025             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C50             CMP      R4,#+80
   \   00000026   0xD022             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C60             CMP      R4,#+96
   \   0000002C   0xD01F             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C70             CMP      R4,#+112
   \   00000032   0xD01C             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C80             CMP      R4,#+128
   \   00000038   0xD019             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C90             CMP      R4,#+144
   \   0000003E   0xD016             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2CA0             CMP      R4,#+160
   \   00000044   0xD013             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2CB0             CMP      R4,#+176
   \   0000004A   0xD010             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2CC0             CMP      R4,#+192
   \   00000050   0xD00D             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2CD0             CMP      R4,#+208
   \   00000056   0xD00A             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x2CE0             CMP      R4,#+224
   \   0000005C   0xD007             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2CF0             CMP      R4,#+240
   \   00000062   0xD004             BEQ.N    ??SpiritQiSetRssiFilterGain_0
   \   00000064   0xF44F 0x71D7      MOV      R1,#+430
   \   00000068   0x....             LDR.N    R0,??DataTable21
   \   0000006A   0x.... 0x....      BL       s_assert_failed
    431          
    432            /* Reads the RSSI_FLT register */
    433            g_xStatus = SpiritSpiReadRegisters(RSSI_FLT_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSetRssiFilterGain_0: (+1)
   \   0000006E   0xAA00             ADD      R2,SP,#+0
   \   00000070   0x2101             MOVS     R1,#+1
   \   00000072   0x2021             MOVS     R0,#+33
   \   00000074   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x....             LDR.N    R0,??DataTable21_1
   \   0000007C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000080   0x8001             STRH     R1,[R0, #+0]
    434          
    435            /* Sets the specified filter gain */
    436            tempRegValue &= 0x0F;
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000008A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    437            tempRegValue |= ((uint8_t)xRssiFg);
   \   0000008E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000092   0x4320             ORRS     R0,R4,R0
   \   00000094   0xF88D 0x0000      STRB     R0,[SP, #+0]
    438          
    439            /* Writes the new value on the RSSI_FLT register */
    440            g_xStatus = SpiritSpiWriteRegisters(RSSI_FLT_BASE, 1, &tempRegValue);
   \   00000098   0xAA00             ADD      R2,SP,#+0
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x2021             MOVS     R0,#+33
   \   0000009E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x....             LDR.N    R0,??DataTable21_1
   \   000000A6   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000AA   0x8001             STRH     R1,[R0, #+0]
    441          
    442          }
   \   000000AC   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    443          
    444          
    445          /**
    446           * @brief  Returns the RSSI filter gain.
    447           * @param  None.
    448           * @retval RssiFilterGain RSSI filter gain.
    449           */

   \                                 In section .text, align 2, keep-with-next
    450          RssiFilterGain SpiritQiGetRssiFilterGain(void)
    451          {
   \                     SpiritQiGetRssiFilterGain: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    452            uint8_t tempRegValue;
    453          
    454            /* Reads the RSSI_FLT register */
    455            g_xStatus = SpiritSpiReadRegisters(RSSI_FLT_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable21_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    456          
    457            /* Rebuild and returns the filter gain value */
    458            return (RssiFilterGain)(tempRegValue & 0xF0);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    459          
    460          }
    461          
    462          
    463          /**
    464           * @brief  Sets the CS Mode. When static carrier sensing is used (cs_mode = 0), the carrier sense signal is asserted when the measured RSSI is above the
    465           *         value specified in the RSSI_TH register and is deasserted when the RSSI falls 3 dB below the same threshold.
    466           *         When dynamic carrier sense is used (cs_mode = 1, 2, 3), the carrier sense signal is asserted if the signal is above the
    467           *         threshold and a fast power increase of 6, 12 or 18 dB is detected; it is deasserted if a power fall of the same amplitude is
    468           *         detected.
    469           * @param  xCsMode CS mode selector.
    470           *         This parameter can be any value of @ref CSMode.
    471           * @retval None.
    472           */

   \                                 In section .text, align 2, keep-with-next
    473          void SpiritQiSetCsMode(CSMode xCsMode)
    474          {
   \                     SpiritQiSetCsMode: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    475            uint8_t tempRegValue;
    476          
    477             /* Check the parameters */
    478            s_assert_param(IS_CS_MODE(xCsMode));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00D             BEQ.N    ??SpiritQiSetCsMode_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C04             CMP      R4,#+4
   \   0000000E   0xD00A             BEQ.N    ??SpiritQiSetCsMode_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD007             BEQ.N    ??SpiritQiSetCsMode_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C0C             CMP      R4,#+12
   \   0000001A   0xD004             BEQ.N    ??SpiritQiSetCsMode_0
   \   0000001C   0xF44F 0x71EF      MOV      R1,#+478
   \   00000020   0x....             LDR.N    R0,??DataTable21
   \   00000022   0x.... 0x....      BL       s_assert_failed
    479          
    480            /* Reads the RSSI_FLT register */
    481            g_xStatus = SpiritSpiReadRegisters(RSSI_FLT_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSetCsMode_0: (+1)
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x2021             MOVS     R0,#+33
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x....             LDR.N    R0,??DataTable21_1
   \   00000034   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000038   0x8001             STRH     R1,[R0, #+0]
    482          
    483            /* Sets bit to select the CS mode */
    484            tempRegValue &= ~0x0C;
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0xF010 0x00F3      ANDS     R0,R0,#0xF3
   \   00000042   0xF88D 0x0000      STRB     R0,[SP, #+0]
    485            tempRegValue |= ((uint8_t)xCsMode);
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0x4320             ORRS     R0,R4,R0
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    486          
    487            /* Writes the new value on the RSSI_FLT register */
    488            g_xStatus = SpiritSpiWriteRegisters(RSSI_FLT_BASE, 1, &tempRegValue);
   \   00000050   0xAA00             ADD      R2,SP,#+0
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x2021             MOVS     R0,#+33
   \   00000056   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x....             LDR.N    R0,??DataTable21_1
   \   0000005E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000062   0x8001             STRH     R1,[R0, #+0]
    489          
    490          }
   \   00000064   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    491          
    492          
    493          /**
    494           * @brief  Returns the CS Mode.
    495           * @param  None.
    496           * @retval CSMode CS mode.
    497           */

   \                                 In section .text, align 2, keep-with-next
    498          CSMode SpiritQiGetCsMode(void)
    499          {
   \                     SpiritQiGetCsMode: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    500            uint8_t tempRegValue;
    501          
    502            /* Reads the RSSI_FLT register */
    503            g_xStatus = SpiritSpiReadRegisters(RSSI_FLT_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable21_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    504          
    505            /* Rebuild and returns the CS mode value */
    506            return (CSMode)(tempRegValue & 0x0C);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    507          
    508          }
    509          
    510          /**
    511           * @brief  Enables/Disables the CS Timeout Mask. If enabled CS value contributes to timeout disabling.
    512           * @param  xNewState new state for CS Timeout Mask.
    513           *         This parameter can be S_ENABLE or S_DISABLE.
    514           * @retval None.
    515           */

   \                                 In section .text, align 2, keep-with-next
    516          void SpiritQiCsTimeoutMask(SpiritFunctionalState xNewState)
    517          {
   \                     SpiritQiCsTimeoutMask: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    518            uint8_t tempRegValue;
    519          
    520            /* Check the parameters */
    521            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritQiCsTimeoutMask_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritQiCsTimeoutMask_0
   \   00000010   0xF240 0x2109      MOVW     R1,#+521
   \   00000014   0x....             LDR.N    R0,??DataTable21
   \   00000016   0x.... 0x....      BL       s_assert_failed
    522          
    523            /* Reads the PROTOCOL2 register value */
    524            g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritQiCsTimeoutMask_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2050             MOVS     R0,#+80
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable21_1
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    525          
    526            /* Enables or disables the CS timeout mask */
    527            if(xNewState == S_ENABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xD106             BNE.N    ??SpiritQiCsTimeoutMask_1
    528            {
    529              tempRegValue |= PROTOCOL2_CS_TIMEOUT_MASK;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritQiCsTimeoutMask_2
    530            }
    531            else
    532            {
    533              tempRegValue &= ~PROTOCOL2_CS_TIMEOUT_MASK;
   \                     ??SpiritQiCsTimeoutMask_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    534            }
    535          
    536            /* Writes the new value on the PROTOCOL2 register */
    537            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritQiCsTimeoutMask_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2050             MOVS     R0,#+80
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable21_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    538          
    539          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    540          
    541          
    542          /**
    543           * @brief  Enables/Disables the PQI Timeout Mask. If enabled PQI value contributes to timeout disabling.
    544           * @param  xNewState new state for PQI Timeout Mask.
    545           *         This parameter can be S_ENABLE or S_DISABLE.
    546           * @retval None.
    547           */

   \                                 In section .text, align 2, keep-with-next
    548          void SpiritQiPqiTimeoutMask(SpiritFunctionalState xNewState)
    549          {
   \                     SpiritQiPqiTimeoutMask: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    550            uint8_t tempRegValue;
    551          
    552            /* Check the parameters */
    553            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritQiPqiTimeoutMask_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritQiPqiTimeoutMask_0
   \   00000010   0xF240 0x2129      MOVW     R1,#+553
   \   00000014   0x....             LDR.N    R0,??DataTable21
   \   00000016   0x.... 0x....      BL       s_assert_failed
    554          
    555            /* Reads the PROTOCOL2 register */
    556            g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritQiPqiTimeoutMask_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2050             MOVS     R0,#+80
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable21_1
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    557          
    558            /* Enables or disables the PQI timeout mask */
    559            if(xNewState == S_ENABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xD106             BNE.N    ??SpiritQiPqiTimeoutMask_1
    560            {
    561              tempRegValue |= PROTOCOL2_PQI_TIMEOUT_MASK;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritQiPqiTimeoutMask_2
    562            }
    563            else
    564            {
    565              tempRegValue &= ~PROTOCOL2_PQI_TIMEOUT_MASK;
   \                     ??SpiritQiPqiTimeoutMask_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    566            }
    567          
    568            /* Writes the new value on the PROTOCOL2 register */
    569            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritQiPqiTimeoutMask_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2050             MOVS     R0,#+80
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable21_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    570          
    571          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    572          
    573          
    574          /**
    575           * @brief  Enables/Disables the SQI Timeout Mask. If enabled SQI value contributes to timeout disabling.
    576           * @param  xNewState new state for SQI Timeout Mask.
    577           *         This parameter can be S_ENABLE or S_DISABLE.
    578           * @retval None.
    579           */

   \                                 In section .text, align 2, keep-with-next
    580          void SpiritQiSqiTimeoutMask(SpiritFunctionalState xNewState)
    581          {
   \                     SpiritQiSqiTimeoutMask: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    582            uint8_t tempRegValue;
    583          
    584            /* Check the parameters */
    585            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritQiSqiTimeoutMask_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritQiSqiTimeoutMask_0
   \   00000010   0xF240 0x2149      MOVW     R1,#+585
   \   00000014   0x....             LDR.N    R0,??DataTable21
   \   00000016   0x.... 0x....      BL       s_assert_failed
    586          
    587            /* Reads the PROTOCOL2 register */
    588            g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSqiTimeoutMask_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2050             MOVS     R0,#+80
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable21_1
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    589          
    590            /* Enables or disables the SQI timeout mask */
    591            if(xNewState == S_ENABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xD106             BNE.N    ??SpiritQiSqiTimeoutMask_1
    592            {
    593              tempRegValue |= PROTOCOL2_SQI_TIMEOUT_MASK;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritQiSqiTimeoutMask_2
    594            }
    595            else
    596            {
    597              tempRegValue &= ~PROTOCOL2_SQI_TIMEOUT_MASK;
   \                     ??SpiritQiSqiTimeoutMask_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    598            }
    599          
    600            /* Writes the new value on the PROTOCOL2 register */
    601            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
   \                     ??SpiritQiSqiTimeoutMask_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2050             MOVS     R0,#+80
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable21_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    602          
    603          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000048   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000050   0x5F 0x50          DC8 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H, 74H
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \   00000058   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000060   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000068   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000070   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 53H, 50H, 49H, 52H
   \              0x63 0x5C    
   \              0x53 0x50    
   \              0x49 0x52    
   \   00000078   0x49 0x54          DC8 49H, 54H, 5FH, 51H, 69H, 2EH, 63H, 0
   \              0x5F 0x51    
   \              0x69 0x2E    
   \              0x63 0x00    
    604          
    605          
    606          /**
    607           *@}
    608           */
    609          
    610          /**
    611           *@}
    612           */
    613          
    614          
    615          /**
    616           *@}
    617           */
    618          
    619          
    620          
    621          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SpiritQiComputeRssiThreshold
         8   -> s_assert_failed
      16   SpiritQiCsTimeoutMask
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiGetCs
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetCsMode
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetLqi
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetPqi
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetPqiThreshold
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetRssi
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetRssiFilterGain
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetRssiThreshold
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetSqi
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiGetSqiThreshold
        16   -> SdkEvalSpiReadRegisters
      16   SpiritQiPqiCheck
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiPqiTimeoutMask
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSetCsMode
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSetPqiThreshold
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSetRssiFilterGain
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSetRssiThreshold
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritQiSetRssiThresholddBm
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSetSqiThreshold
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSqiCheck
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritQiSqiTimeoutMask
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable21
       4  ??DataTable21_1
     128  ?_0
      38  SpiritQiComputeRssiThreshold
     100  SpiritQiCsTimeoutMask
      40  SpiritQiGetCs
      34  SpiritQiGetCsMode
      36  SpiritQiGetLqi
      32  SpiritQiGetPqi
      36  SpiritQiGetPqiThreshold
      30  SpiritQiGetRssi
      34  SpiritQiGetRssiFilterGain
      30  SpiritQiGetRssiThreshold
      36  SpiritQiGetSqi
      36  SpiritQiGetSqiThreshold
     104  SpiritQiPqiCheck
     100  SpiritQiPqiTimeoutMask
     102  SpiritQiSetCsMode
     178  SpiritQiSetPqiThreshold
     174  SpiritQiSetRssiFilterGain
      26  SpiritQiSetRssiThreshold
      60  SpiritQiSetRssiThresholddBm
     106  SpiritQiSetSqiThreshold
     104  SpiritQiSqiCheck
     100  SpiritQiSqiTimeoutMask

 
   128 bytes in section .rodata
 1 544 bytes in section .text
 
 1 544 bytes of CODE  memory
   128 bytes of CONST memory

Errors: none
Warnings: none
