###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.1.5641/W32 for ARM      22/Feb/2014  21:59:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\S #
#                    ource\src\SDK_EVAL_VC_Prop.c                             #
#    Command line =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\S #
#                    ource\src\SDK_EVAL_VC_Prop.c -D USE_STDPERIPH_DRIVER -D  #
#                    VECT_TAB_FLASH -D STM32L1XX_MD -D IAR_ARM_CM3 -D         #
#                    USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D             #
#                    USE_SYSTICK_DELAY -D SDK -lC                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\List\ -o                              #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_ #
#                    po_poprawie\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Librar #
#                    y_Project\EWARM\.\ -I C:\Users\bzdegluk.PLY\Desktop\ACQ_ #
#                    SYS\Projekt_po_poprawie\2013_11_25_Spirit1_Elektrolux\SP #
#                    IRIT1_Library_Project\EWARM\..\Application\ -I           #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\Application\examples\ -I                        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\Application\runtime\ -I                         #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\ -I        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\SPIRIT1_Library\Source\inc\ -I                  #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\SDK_Eval_Util\Source\inc\ -I                    #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\ #
#                    CM3\DeviceSupport\ST\STM32L1xx\ -I                       #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L #
#                    1xx_StdPeriph_Driver\inc\ -I                             #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\ -I        #
#                    C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\   #
#                    -On --use_c++_inline -I "C:\Program Files (x86)\IAR      #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\List\SDK_EVAL_VC_Prop.lst             #
#    Object file  =  C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawi #
#                    e\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ #
#                    EWARM\DZ-SB-DISC01\Obj\SDK_EVAL_VC_Prop.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\bzdegluk.PLY\Desktop\ACQ_SYS\Projekt_po_poprawie\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Virtual_Com\Source\src\SDK_EVAL_VC_Prop.c
      1          /**
      2           * @file     SDK_EVAL_VC_Prop.c
      3           * @author   MSH RF/ART Team IMS-Systems Lab
      4           * @version  V1.0.0
      5           * @date     August 4, 2011
      6           * @brief    Insert here the description.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21           *
     22           */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "usb_lib.h"
     26          #include "usb_conf.h"
     27          #include "SDK_EVAL_VC_Prop.h"
     28          #include "SDK_EVAL_VC_Desc.h"
     29          #include "SDK_EVAL_VC_Pwr.h"
     30          #include "SDK_EVAL_VC_General.h"
     31          
     32          
     33          
     34          /** @addtogroup SDK_EVAL_Virtual_Com
     35           * @{
     36           */
     37          
     38          
     39          /** @addtogroup SDK_EVAL_VC_Properties
     40           * @{
     41           */
     42          
     43          
     44          /** @defgroup SDK_EVAL_VC_Properties_Private_TypesDefinitions   SDK EVAL VC Properties Private TypesDefinitions
     45           * @{
     46           */
     47          
     48          /**
     49           * @}
     50           */
     51          
     52          
     53          /** @defgroup SDK_EVAL_VC_Properties_Private_Defines    SDK EVAL VC Properties Private Defines
     54           * @{
     55           */
     56          
     57          /**
     58           * @}
     59           */
     60          
     61          
     62          /** @defgroup SDK_EVAL_VC_Properties_Private_Macros   SDK EVAL VC Properties Private Macros
     63           * @{
     64           */
     65          
     66          /**
     67           * @}
     68           */
     69          
     70          
     71          /** @defgroup SDK_EVAL_VC_Properties_Private_Variables    SDK EVAL VC Properties Private Variables
     72           * @{
     73           */

   \                                 In section .bss, align 1
     74          uint8_t Request = 0;
   \                     Request:
   \   00000000                      DS8 1
     75          

   \                                 In section .data, align 4
     76          LineCoding xLinecoding =
   \                     xLinecoding:
   \   00000000   0x0001C200         DC32 115200
   \   00000004   0x00 0x00          DC8 0, 0, 8, 0
   \              0x08 0x00    
     77            {
     78              115200, /* baud rate*/
     79              0x00,   /* stop bits-1*/
     80              0x00,   /* parity - none*/
     81              0x08    /* no. of bits 8*/
     82            };
     83          
     84          

   \                                 In section .data, align 4
     85          DEVICE Device_Table =
   \                     Device_Table:
   \   00000000   0x04 0x01          DC8 4, 1, 0, 0
   \              0x00 0x00    
     86            {
     87              EP_NUM,
     88              1
     89            };
     90          

   \                                 In section .data, align 4
     91          DEVICE_PROP Device_Property =
   \                     Device_Property:
   \   00000000   0x........         DC32 SdkEvalVCPortInit, SdkEvalVCPortReset, SdkEvalVCPortStatusIn
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 SdkEvalVCPortStatusOut, SdkEvalVCPortDataSetup
   \              0x........   
   \   00000014   0x........         DC32 SdkEvalVCPortNoDataSetup, SdkEvalVCPortGetInterfaceSetting
   \              0x........   
   \   0000001C   0x........         DC32 SdkEvalVCPortGetDeviceDescriptor, SdkEvalVCPortGetConfigDescriptor
   \              0x........   
   \   00000024   0x........         DC32 SdkEvalVCPortGetStringDescriptor, 0H
   \              0x00000000   
   \   0000002C   0x40 0x00          DC8 64, 0, 0, 0
   \              0x00 0x00    
     92            {
     93              SdkEvalVCPortInit,
     94              SdkEvalVCPortReset,
     95              SdkEvalVCPortStatusIn,
     96              SdkEvalVCPortStatusOut,
     97              SdkEvalVCPortDataSetup,
     98              SdkEvalVCPortNoDataSetup,
     99              SdkEvalVCPortGetInterfaceSetting,
    100              SdkEvalVCPortGetDeviceDescriptor,
    101              SdkEvalVCPortGetConfigDescriptor,
    102              SdkEvalVCPortGetStringDescriptor,
    103              0,
    104              0x40 /*MAX PACKET SIZE*/
    105            };
    106          

   \                                 In section .data, align 4
    107          USER_STANDARD_REQUESTS User_Standard_Requests =
   \                     User_Standard_Requests:
   \   00000000   0x........         DC32 NOP_Process, SdkEvalVCPortSetConfiguration, NOP_Process
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 NOP_Process, NOP_Process, NOP_Process, NOP_Process, NOP_Process
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000020   0x........         DC32 SdkEvalVCPortSetDeviceAddress
    108            {
    109              SdkEvalVCPortGetConfiguration,
    110              SdkEvalVCPortSetConfiguration,
    111              SdkEvalVCPortGetInterface,
    112              SdkEvalVCPortSetInterface,
    113              SdkEvalVCPortGetStatus,
    114              SdkEvalVCPortClearFeature,
    115              SdkEvalVCPortSetEndPointFeature,
    116              SdkEvalVCPortSetDeviceFeature,
    117              SdkEvalVCPortSetDeviceAddress
    118            };
    119          

   \                                 In section .data, align 4
    120          ONE_DESCRIPTOR Device_Descriptor =
   \                     Device_Descriptor:
   \   00000000   0x........         DC32 g_vectcVCPortDeviceDescriptor
   \   00000004   0x0012             DC16 18
   \   00000006   0x00 0x00          DC8 0, 0
    121            {
    122              (uint8_t*)g_vectcVCPortDeviceDescriptor,
    123              VIRTUAL_COM_PORT_SIZ_DEVICE_DESC
    124            };
    125          

   \                                 In section .data, align 4
    126          ONE_DESCRIPTOR Config_Descriptor =
   \                     Config_Descriptor:
   \   00000000   0x........         DC32 g_vectcVCPortConfigDescriptor
   \   00000004   0x0043             DC16 67
   \   00000006   0x00 0x00          DC8 0, 0
    127            {
    128              (uint8_t*)g_vectcVCPortConfigDescriptor,
    129              VIRTUAL_COM_PORT_SIZ_CONFIG_DESC
    130            };
    131          

   \                                 In section .data, align 4
    132          ONE_DESCRIPTOR String_Descriptor[4] =
   \                     String_Descriptor:
   \   00000000   0x........         DC32 g_vectcVCPortStringLangID
   \   00000004   0x0004             DC16 4
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x........         DC32 g_vectcVCPortStringVendor
   \   0000000C   0x0026             DC16 38
   \   0000000E   0x00 0x00          DC8 0, 0
   \   00000010   0x........         DC32 g_vectcVCPortStringProduct
   \   00000014   0x0070             DC16 112
   \   00000016   0x00 0x00          DC8 0, 0
   \   00000018   0x........         DC32 g_vectcVCPortStringSerial
   \   0000001C   0x001A             DC16 26
   \   0000001E   0x00 0x00          DC8 0, 0
    133            {
    134              {(uint8_t*)g_vectcVCPortStringLangID, VIRTUAL_COM_PORT_SIZ_STRING_LANGID},
    135              {(uint8_t*)g_vectcVCPortStringVendor, VIRTUAL_COM_PORT_SIZ_STRING_VENDOR},
    136              {(uint8_t*)g_vectcVCPortStringProduct, VIRTUAL_COM_PORT_SIZ_STRING_PRODUCT},
    137              {(uint8_t*)g_vectcVCPortStringSerial, VIRTUAL_COM_PORT_SIZ_STRING_SERIAL}
    138            };
    139          
    140          /**
    141           * @}
    142           */
    143          
    144          
    145          /** @defgroup SDK_EVAL_VC_Properties_Private_FunctionPrototypes   SDK EVAL VC Properties Private FunctionPrototypes
    146           * @{
    147           */
    148          
    149          /**
    150           * @}
    151           */
    152          
    153          
    154          /** @defgroup SDK_EVAL_VC_Properties_Private_Functions    SDK EVAL VC Properties Private Functions
    155           * @{
    156           */
    157          
    158          /**
    159           * @brief  Virtual Com Port initialization routine at usb level.
    160           * @param  None.
    161           * @retval None.
    162           */

   \                                 In section .text, align 2, keep-with-next
    163          void SdkEvalVCPortInit(void)
    164          {
   \                     SdkEvalVCPortInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    165            /* Update the serial number string descriptor with the data from the unique ID*/
    166            SdkEvalVCGetSerialNum();
   \   00000002   0x.... 0x....      BL       SdkEvalVCGetSerialNum
    167          
    168            pInformation->Current_Configuration = 0;
   \   00000006   0x....             LDR.N    R0,??DataTable11
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7281             STRB     R1,[R0, #+10]
    169          
    170            /* Connect the device */
    171            SdkEvalVCPowerOn();
   \   0000000E   0x.... 0x....      BL       SdkEvalVCPowerOn
    172          
    173            /* Perform basic device initialization operations */
    174            USB_SIL_Init();
   \   00000012   0x.... 0x....      BL       USB_SIL_Init
    175          
    176            bDeviceState = UNCONNECTED;
   \   00000016   0x....             LDR.N    R0,??DataTable11_1
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    177          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    178          
    179          
    180          /**
    181           * @brief  Virtual Com Port reset routine at usb level.
    182           * @param  None.
    183           * @retval None.
    184           */

   \                                 In section .text, align 2, keep-with-next
    185          void SdkEvalVCPortReset(void)
    186          {
   \                     SdkEvalVCPortReset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    187            /* Set Virtual_Com_Port DEVICE as not configured */
    188            pInformation->Current_Configuration = 0;
   \   00000002   0x....             LDR.N    R0,??DataTable11
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7281             STRB     R1,[R0, #+10]
    189          
    190            /* Current Feature initialization */
    191            pInformation->Current_Feature = g_vectcVCPortConfigDescriptor[7];
   \   0000000A   0x....             LDR.N    R0,??DataTable11
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable11_2
   \   00000010   0x79C9             LDRB     R1,[R1, #+7]
   \   00000012   0x7241             STRB     R1,[R0, #+9]
    192          
    193            /* Set Virtual_Com_Port DEVICE with the default Interface*/
    194            pInformation->Current_Interface = 0;
   \   00000014   0x....             LDR.N    R0,??DataTable11
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x72C1             STRB     R1,[R0, #+11]
    195          
    196            SetBTABLE(BTABLE_ADDRESS);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       SetBTABLE
    197          
    198            /* Initialize Endpoint 0 */
    199            SetEPType(ENDP0, EP_CONTROL);
   \   00000022   0xF44F 0x7100      MOV      R1,#+512
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       SetEPType
    200            SetEPTxStatus(ENDP0, EP_TX_STALL);
   \   0000002C   0x2110             MOVS     R1,#+16
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       SetEPTxStatus
    201            SetEPRxAddr(ENDP0, ENDP0_RXADDR);
   \   00000034   0x2140             MOVS     R1,#+64
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       SetEPRxAddr
    202            SetEPTxAddr(ENDP0, ENDP0_TXADDR);
   \   0000003C   0x2180             MOVS     R1,#+128
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       SetEPTxAddr
    203            Clear_Status_Out(ENDP0);
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       Clear_Status_Out
    204            SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
   \   0000004A   0x....             LDR.N    R0,??DataTable11_3
   \   0000004C   0xF890 0x102C      LDRB     R1,[R0, #+44]
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       SetEPRxCount
    205            SetEPRxValid(ENDP0);
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       SetEPRxValid
    206          
    207            /* Initialize Endpoint 1 */
    208            SetEPType(ENDP1, EP_BULK);
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x.... 0x....      BL       SetEPType
    209            SetEPTxAddr(ENDP1, ENDP1_TXADDR);
   \   00000066   0x21C0             MOVS     R1,#+192
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x.... 0x....      BL       SetEPTxAddr
    210            SetEPTxStatus(ENDP1, EP_TX_NAK);
   \   0000006E   0x2120             MOVS     R1,#+32
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x.... 0x....      BL       SetEPTxStatus
    211            SetEPRxStatus(ENDP1, EP_RX_DIS);
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x.... 0x....      BL       SetEPRxStatus
    212          
    213            /* Initialize Endpoint 2 */
    214            SetEPType(ENDP2, EP_INTERRUPT);
   \   0000007E   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000082   0x2002             MOVS     R0,#+2
   \   00000084   0x.... 0x....      BL       SetEPType
    215            SetEPTxAddr(ENDP2, ENDP2_TXADDR);
   \   00000088   0xF44F 0x7180      MOV      R1,#+256
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       SetEPTxAddr
    216            SetEPRxStatus(ENDP2, EP_RX_DIS);
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x2002             MOVS     R0,#+2
   \   00000096   0x.... 0x....      BL       SetEPRxStatus
    217            SetEPTxStatus(ENDP2, EP_TX_NAK);
   \   0000009A   0x2120             MOVS     R1,#+32
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x.... 0x....      BL       SetEPTxStatus
    218          
    219            /* Initialize Endpoint 3 */
    220            SetEPType(ENDP3, EP_BULK);
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0x.... 0x....      BL       SetEPType
    221            SetEPRxAddr(ENDP3, ENDP3_RXADDR);
   \   000000AA   0xF44F 0x7188      MOV      R1,#+272
   \   000000AE   0x2003             MOVS     R0,#+3
   \   000000B0   0x.... 0x....      BL       SetEPRxAddr
    222            SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
   \   000000B4   0x2140             MOVS     R1,#+64
   \   000000B6   0x2003             MOVS     R0,#+3
   \   000000B8   0x.... 0x....      BL       SetEPRxCount
    223            SetEPRxStatus(ENDP3, EP_RX_VALID);
   \   000000BC   0xF44F 0x5140      MOV      R1,#+12288
   \   000000C0   0x2003             MOVS     R0,#+3
   \   000000C2   0x.... 0x....      BL       SetEPRxStatus
    224            SetEPTxStatus(ENDP3, EP_TX_DIS);
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0x.... 0x....      BL       SetEPTxStatus
    225          
    226            /* Set this device to response on default address */
    227            SetDeviceAddress(0);
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x.... 0x....      BL       SetDeviceAddress
    228          
    229            bDeviceState = ATTACHED;
   \   000000D4   0x....             LDR.N    R0,??DataTable11_1
   \   000000D6   0x2101             MOVS     R1,#+1
   \   000000D8   0x6001             STR      R1,[R0, #+0]
    230          }
   \   000000DA   0xBD01             POP      {R0,PC}          ;; return
    231          
    232          
    233          /**
    234           * @brief  Update the device state to configured.
    235           * @param  None.
    236           * @retval None.
    237           */

   \                                 In section .text, align 2, keep-with-next
    238          void SdkEvalVCPortSetConfiguration(void)
    239          {
    240            DEVICE_INFO *pInfo = &Device_Info;
   \                     SdkEvalVCPortSetConfiguration: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_4
    241          
    242            if (pInfo->Current_Configuration != 0)
   \   00000002   0x7A81             LDRB     R1,[R0, #+10]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD002             BEQ.N    ??SdkEvalVCPortSetConfiguration_0
    243            {
    244              /* Device configured */
    245              bDeviceState = CONFIGURED;
   \   00000008   0x....             LDR.N    R1,??DataTable11_1
   \   0000000A   0x2205             MOVS     R2,#+5
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    246            }
    247          }
   \                     ??SdkEvalVCPortSetConfiguration_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    248          
    249          
    250          /**
    251           * @brief  Update the device state to addressed.
    252           * @param  None.
    253           * @retval None.
    254           */

   \                                 In section .text, align 2, keep-with-next
    255          void SdkEvalVCPortSetDeviceAddress (void)
    256          {
    257            bDeviceState = ADDRESSED;
   \                     SdkEvalVCPortSetDeviceAddress: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_1
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x6001             STR      R1,[R0, #+0]
    258          }
   \   00000006   0x4770             BX       LR               ;; return
    259          
    260          
    261          /**
    262           * @brief  Virtual COM Port Status In Routine.
    263           * @param  None.
    264           * @retval None.
    265           */

   \                                 In section .text, align 2, keep-with-next
    266          void SdkEvalVCPortStatusIn(void)
    267          {
    268            if (Request == SET_LINE_CODING)
   \                     SdkEvalVCPortStatusIn: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_5
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2820             CMP      R0,#+32
   \   00000006   0xD102             BNE.N    ??SdkEvalVCPortStatusIn_0
    269            {
    270              Request = 0;
   \   00000008   0x....             LDR.N    R0,??DataTable11_5
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    271            }
    272          }
   \                     ??SdkEvalVCPortStatusIn_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    273          
    274          
    275          /**
    276           * @brief  Virtual COM Port Status OUT Routine.
    277           * @param  None
    278           * @retval None
    279           */

   \                                 In section .text, align 2, keep-with-next
    280          void SdkEvalVCPortStatusOut(void)
    281          {
    282          
    283          }
   \                     SdkEvalVCPortStatusOut: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    284          
    285          
    286          /**
    287           * @brief  Handle the data class specific requests.
    288           * @param  cRequestNo: Number of requests.
    289           * @retval RESULT: USB_UNSUPPORT or USB_SUCCESS.
    290           */

   \                                 In section .text, align 2, keep-with-next
    291          RESULT SdkEvalVCPortDataSetup(uint8_t cRequestNo)
    292          {
   \                     SdkEvalVCPortDataSetup: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    293            uint8_t    *(*CopyRoutine)(uint16_t);
    294          
    295            CopyRoutine = NULL;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
    296          
    297            if (cRequestNo == GET_LINE_CODING)
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C21             CMP      R4,#+33
   \   0000000C   0xD10A             BNE.N    ??SdkEvalVCPortDataSetup_0
    298            {
    299              if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
   \   0000000E   0x....             LDR.N    R0,??DataTable11
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000018   0x2821             CMP      R0,#+33
   \   0000001A   0xD113             BNE.N    ??SdkEvalVCPortDataSetup_1
    300              {
    301                CopyRoutine = SdkEvalVCPortGetLineCoding;
   \   0000001C   0x.... 0x....      ADR.W    R0,SdkEvalVCPortGetLineCoding
   \   00000020   0x0005             MOVS     R5,R0
   \   00000022   0xE00F             B.N      ??SdkEvalVCPortDataSetup_1
    302              }
    303            }
    304            else if (cRequestNo == SET_LINE_CODING)
   \                     ??SdkEvalVCPortDataSetup_0: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C20             CMP      R4,#+32
   \   00000028   0xD10C             BNE.N    ??SdkEvalVCPortDataSetup_1
    305            {
    306              if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
   \   0000002A   0x....             LDR.N    R0,??DataTable11
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000034   0x2821             CMP      R0,#+33
   \   00000036   0xD102             BNE.N    ??SdkEvalVCPortDataSetup_2
    307              {
    308                CopyRoutine = SdkEvalVCPortSetLineCoding;
   \   00000038   0x.... 0x....      ADR.W    R0,SdkEvalVCPortSetLineCoding
   \   0000003C   0x0005             MOVS     R5,R0
    309              }
    310              Request = SET_LINE_CODING;
   \                     ??SdkEvalVCPortDataSetup_2: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable11_5
   \   00000040   0x2120             MOVS     R1,#+32
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    311            }
    312          
    313            if (CopyRoutine == NULL)
   \                     ??SdkEvalVCPortDataSetup_1: (+1)
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD101             BNE.N    ??SdkEvalVCPortDataSetup_3
    314            {
    315              return USB_UNSUPPORT;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0xE009             B.N      ??SdkEvalVCPortDataSetup_4
    316            }
    317          
    318            pInformation->Ctrl_Info.CopyData = CopyRoutine;
   \                     ??SdkEvalVCPortDataSetup_3: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable11
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x6185             STR      R5,[R0, #+24]
    319            pInformation->Ctrl_Info.Usb_wOffset = 0;
   \   00000054   0x....             LDR.N    R0,??DataTable11
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x8241             STRH     R1,[R0, #+18]
    320            (*CopyRoutine)(0);
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x47A8             BLX      R5
    321            return USB_SUCCESS;
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??SdkEvalVCPortDataSetup_4: (+1)
   \   00000062   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    322          
    323          }
    324          
    325          
    326          /**
    327           * @brief  Handle the no data class specific requests.
    328           * @param  cRequestNo: Number of requests.
    329           * @retval RESULT: USB_UNSUPPORT or USB_SUCCESS.
    330           */

   \                                 In section .text, align 2, keep-with-next
    331          RESULT SdkEvalVCPortNoDataSetup(uint8_t cRequestNo)
    332          {
   \                     SdkEvalVCPortNoDataSetup: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    333          
    334            if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
   \   00000002   0x....             LDR.N    R0,??DataTable11
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000000C   0x2821             CMP      R0,#+33
   \   0000000E   0xD109             BNE.N    ??SdkEvalVCPortNoDataSetup_0
    335            {
    336              if (cRequestNo == SET_COMM_FEATURE)
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x2902             CMP      R1,#+2
   \   00000014   0xD101             BNE.N    ??SdkEvalVCPortNoDataSetup_1
    337              {
    338                return USB_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE005             B.N      ??SdkEvalVCPortNoDataSetup_2
    339              }
    340              else if (cRequestNo == SET_CONTROL_LINE_STATE)
   \                     ??SdkEvalVCPortNoDataSetup_1: (+1)
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x2922             CMP      R1,#+34
   \   0000001E   0xD101             BNE.N    ??SdkEvalVCPortNoDataSetup_0
    341              {
    342                return USB_SUCCESS;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??SdkEvalVCPortNoDataSetup_2
    343              }
    344            }
    345          
    346            return USB_UNSUPPORT;
   \                     ??SdkEvalVCPortNoDataSetup_0: (+1)
   \   00000024   0x2002             MOVS     R0,#+2
   \                     ??SdkEvalVCPortNoDataSetup_2: (+1)
   \   00000026   0x4770             BX       LR               ;; return
    347          
    348          }
    349          
    350          
    351          /**
    352           * @brief  Gets the device descriptor.
    353           * @param  nLength: length of the device descriptor.
    354           * @retval uint8_t: the address of the device descriptor.
    355           */

   \                                 In section .text, align 2, keep-with-next
    356          uint8_t* SdkEvalVCPortGetDeviceDescriptor(uint16_t nLength)
    357          {
   \                     SdkEvalVCPortGetDeviceDescriptor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    358            return Standard_GetDescriptorData(nLength, &Device_Descriptor);
   \   00000004   0x....             LDR.N    R1,??DataTable11_6
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       Standard_GetDescriptorData
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    359          
    360          }
    361          
    362          
    363          /**
    364           * @brief  Gets the configuration descriptor.
    365           * @param  nLength: length of the configuration descriptor.
    366           * @retval uint8_t: the address of the configuration descriptor.
    367           */

   \                                 In section .text, align 2, keep-with-next
    368          uint8_t* SdkEvalVCPortGetConfigDescriptor(uint16_t nLength)
    369          {
   \                     SdkEvalVCPortGetConfigDescriptor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    370            return Standard_GetDescriptorData(nLength, &Config_Descriptor);
   \   00000004   0x....             LDR.N    R1,??DataTable11_7
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       Standard_GetDescriptorData
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
    371          
    372          }
    373          
    374          
    375          /**
    376           * @brief  Gets the string descriptors according to the needed index.
    377           * @param  nLength: length of the string descriptor.
    378           * @retval uint8_t: the address of the string descriptor.
    379           */

   \                                 In section .text, align 2, keep-with-next
    380          uint8_t* SdkEvalVCPortGetStringDescriptor(uint16_t nLength)
    381          {
   \                     SdkEvalVCPortGetStringDescriptor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    382            uint8_t wValue0 = pInformation->USBwValue0;
   \   00000004   0x....             LDR.N    R0,??DataTable11
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x78C5             LDRB     R5,[R0, #+3]
    383            if (wValue0 > 4)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D05             CMP      R5,#+5
   \   0000000E   0xDB01             BLT.N    ??SdkEvalVCPortGetStringDescriptor_0
    384            {
    385              return NULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE007             B.N      ??SdkEvalVCPortGetStringDescriptor_1
    386            }
    387            else
    388            {
    389              return Standard_GetDescriptorData(nLength, &String_Descriptor[wValue0]);
   \                     ??SdkEvalVCPortGetStringDescriptor_0: (+1)
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable11_8
   \   00000018   0xEB10 0x01C5      ADDS     R1,R0,R5, LSL #+3
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x.... 0x....      BL       Standard_GetDescriptorData
   \                     ??SdkEvalVCPortGetStringDescriptor_1: (+1)
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    390            }
    391          }
    392          
    393          
    394          /**
    395           * @brief  Test the interface and the alternate setting according to the supported one.
    396           * @param  cInterface: interface number.
    397           * @param  cAlternateSetting: alternate setting number.
    398           * @retval RESULT: USB_UNSUPPORT or USB_SUCCESS.
    399           */

   \                                 In section .text, align 2, keep-with-next
    400          RESULT SdkEvalVCPortGetInterfaceSetting(uint8_t cInterface, uint8_t cAlternateSetting)
    401          {
   \                     SdkEvalVCPortGetInterfaceSetting: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    402            if (cAlternateSetting > 0)
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD001             BEQ.N    ??SdkEvalVCPortGetInterfaceSetting_0
    403            {
    404              return USB_UNSUPPORT;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0xE005             B.N      ??SdkEvalVCPortGetInterfaceSetting_1
    405            }
    406            else if (cInterface > 1)
   \                     ??SdkEvalVCPortGetInterfaceSetting_0: (+1)
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x2A02             CMP      R2,#+2
   \   00000010   0xDB01             BLT.N    ??SdkEvalVCPortGetInterfaceSetting_2
    407            {
    408              return USB_UNSUPPORT;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xE000             B.N      ??SdkEvalVCPortGetInterfaceSetting_1
    409            }
    410            return USB_SUCCESS;
   \                     ??SdkEvalVCPortGetInterfaceSetting_2: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??SdkEvalVCPortGetInterfaceSetting_1: (+1)
   \   00000018   0x4770             BX       LR               ;; return
    411          }
    412          
    413          
    414          /**
    415           * @brief  Send the xLinecoding structure to the PC host.
    416           * @param  nLength: length of the xLinecoding structure.
    417           * @retval uint8_t: xLinecoding structure base address.
    418           */

   \                                 In section .text, align 4, keep-with-next
    419          uint8_t* SdkEvalVCPortGetLineCoding(uint16_t nLength)
    420          {
   \                     SdkEvalVCPortGetLineCoding: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    421            if (nLength == 0)
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD105             BNE.N    ??SdkEvalVCPortGetLineCoding_0
    422            {
    423              pInformation->Ctrl_Info.Usb_wLength = sizeof(xLinecoding);
   \   00000008   0x....             LDR.N    R0,??DataTable11
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2208             MOVS     R2,#+8
   \   0000000E   0x8202             STRH     R2,[R0, #+16]
    424              return NULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??SdkEvalVCPortGetLineCoding_1
    425            }
    426            return(uint8_t *)&xLinecoding;
   \                     ??SdkEvalVCPortGetLineCoding_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable11_9
   \                     ??SdkEvalVCPortGetLineCoding_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    427          }
    428          
    429          
    430          /**
    431           * @brief  Set the xLinecoding structure fields.
    432           * @param  nLength: length of the xLinecoding structure.
    433           * @retval uint8_t: xLinecoding structure base address.
    434           */

   \                                 In section .text, align 4, keep-with-next
    435          uint8_t* SdkEvalVCPortSetLineCoding(uint16_t nLength)
    436          {
   \                     SdkEvalVCPortSetLineCoding: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    437            if (nLength == 0)
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD105             BNE.N    ??SdkEvalVCPortSetLineCoding_0
    438            {
    439              pInformation->Ctrl_Info.Usb_wLength = sizeof(xLinecoding);
   \   00000008   0x....             LDR.N    R0,??DataTable11
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2208             MOVS     R2,#+8
   \   0000000E   0x8202             STRH     R2,[R0, #+16]
    440              return NULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??SdkEvalVCPortSetLineCoding_1
    441            }
    442            return(uint8_t *)&xLinecoding;
   \                     ??SdkEvalVCPortSetLineCoding_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable11_9
   \                     ??SdkEvalVCPortSetLineCoding_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    443          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     pInformation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     bDeviceState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     g_vectcVCPortConfigDescriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     Device_Property

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     Device_Info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     Request

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     Device_Descriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     Config_Descriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     String_Descriptor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     xLinecoding
    444          
    445          /**
    446           * @}
    447           */
    448          
    449          
    450          /**
    451           * @}
    452           */
    453          
    454          
    455          /**
    456           * @}
    457           */
    458          
    459          
    460          
    461          
    462          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SdkEvalVCPortDataSetup
        16   -- Indirect call
       8   SdkEvalVCPortGetConfigDescriptor
         8   -> Standard_GetDescriptorData
       8   SdkEvalVCPortGetDeviceDescriptor
         8   -> Standard_GetDescriptorData
       0   SdkEvalVCPortGetInterfaceSetting
       0   SdkEvalVCPortGetLineCoding
      16   SdkEvalVCPortGetStringDescriptor
        16   -> Standard_GetDescriptorData
       8   SdkEvalVCPortInit
         8   -> SdkEvalVCGetSerialNum
         8   -> SdkEvalVCPowerOn
         8   -> USB_SIL_Init
       0   SdkEvalVCPortNoDataSetup
       8   SdkEvalVCPortReset
         8   -> Clear_Status_Out
         8   -> SetBTABLE
         8   -> SetDeviceAddress
         8   -> SetEPRxAddr
         8   -> SetEPRxCount
         8   -> SetEPRxStatus
         8   -> SetEPRxValid
         8   -> SetEPTxAddr
         8   -> SetEPTxStatus
         8   -> SetEPType
       0   SdkEvalVCPortSetConfiguration
       0   SdkEvalVCPortSetDeviceAddress
       0   SdkEvalVCPortSetLineCoding
       0   SdkEvalVCPortStatusIn
       0   SdkEvalVCPortStatusOut


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       8  Config_Descriptor
       8  Device_Descriptor
      48  Device_Property
       4  Device_Table
       1  Request
     100  SdkEvalVCPortDataSetup
      16  SdkEvalVCPortGetConfigDescriptor
      16  SdkEvalVCPortGetDeviceDescriptor
      26  SdkEvalVCPortGetInterfaceSetting
      24  SdkEvalVCPortGetLineCoding
      38  SdkEvalVCPortGetStringDescriptor
      30  SdkEvalVCPortInit
      40  SdkEvalVCPortNoDataSetup
     220  SdkEvalVCPortReset
      16  SdkEvalVCPortSetConfiguration
       8  SdkEvalVCPortSetDeviceAddress
      24  SdkEvalVCPortSetLineCoding
      16  SdkEvalVCPortStatusIn
       2  SdkEvalVCPortStatusOut
      32  String_Descriptor
      36  User_Standard_Requests
       8  xLinecoding

 
   1 byte  in section .bss
 144 bytes in section .data
 616 bytes in section .text
 
 616 bytes of CODE memory
 145 bytes of DATA memory

Errors: none
Warnings: none
