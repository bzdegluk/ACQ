###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_LinearFifo.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_LinearFifo.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_LinearFifo.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_LinearFifo.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_LinearFifo.c
      1          /**
      2           * @file    SPIRIT_LinearFifo.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT Fifo.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_LinearFifo.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          /**
     30           * @addtogroup SPIRIT_Libraries
     31           * @{
     32           */
     33          
     34          
     35          /**
     36           * @addtogroup SPIRIT_LinearFifo
     37           * @{
     38           */
     39          
     40          
     41          /**
     42           * @defgroup LinearFifo_Private_TypesDefinitions        Linear FIFO Private Types Definitions
     43           * @{
     44           */
     45          
     46          /**
     47           *@}
     48           */
     49          
     50          
     51          /**
     52           * @defgroup LinearFifo_Private_Defines                 Linear FIFO Private Defines
     53           * @{
     54           */
     55          
     56          /**
     57           *@}
     58           */
     59          
     60          
     61          /**
     62           * @defgroup LinearFifo_Private_Macros                  Linear FIFO Private Macros
     63           * @{
     64           */
     65          
     66          /**
     67           *@}
     68           */
     69          
     70          
     71          /**
     72           * @defgroup LinearFifo_Private_Variables               Linear FIFO Private Variables
     73           * @{
     74           */
     75          
     76          /**
     77           *@}
     78           */
     79          
     80          
     81          /**
     82           * @defgroup LinearFifo_Private_FunctionPrototypes      Linear FIFO Private Function Prototypes
     83           * @{
     84           */
     85          
     86          /**
     87           *@}
     88           */
     89          
     90          
     91          /**
     92           * @defgroup LinearFifo_Private_Functions               Linear FIFO Private Functions
     93           * @{
     94           */
     95          
     96          /**
     97           * @brief  Returns the number of elements in the Rx FIFO.
     98           * @param  None.
     99           * @retval uint8_t Number of elements in the Rx FIFO.
    100           */

   \                                 In section .text, align 2, keep-with-next
    101          uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
    102          {
   \                     SpiritLinearFifoReadNumElementsRxFifo: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    103            uint8_t tempRegValue;
    104          
    105            /* Reads the register value */
    106            g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20E7             MOVS     R0,#+231
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable9
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    107          
    108            /* Build and return value */
    109            return (tempRegValue & 0x7F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    110          
    111          }
    112          
    113          
    114          /**
    115           * @brief  Returns the number of elements in the Tx FIFO.
    116           * @param  None.
    117           * @retval uint8_t Number of elements in the Tx FIFO.
    118           */

   \                                 In section .text, align 2, keep-with-next
    119          uint8_t SpiritLinearFifoReadNumElementsTxFifo(void)
    120          {
   \                     SpiritLinearFifoReadNumElementsTxFifo: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    121            uint8_t tempRegValue;
    122          
    123            /* Reads the number of elements in TX FIFO and return the value */
    124            g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x20E6             MOVS     R0,#+230
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable9
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    125          
    126            /* Build and return value */
    127            return (tempRegValue & 0x7F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    128          
    129          }
    130          
    131          
    132          /**
    133           * @brief  Sets the almost full threshold for the Rx FIFO. When the number of elements in RX FIFO reaches this value an interrupt can be generated to the MCU.
    134           * @note   The almost full threshold is encountered from the top of the FIFO. For example, if it is set to 7 the almost
    135           *         full FIFO irq will be raised when the number of elements is equals to 96-7 = 89.
    136           * @param  cThrRxFifo almost full threshold.
    137           * 	   This parameter is an uint8_t.
    138           * @retval None.
    139           */

   \                                 In section .text, align 2, keep-with-next
    140          void SpiritLinearFifoSetAlmostFullThresholdRx(uint8_t cThrRxFifo)
    141          {
   \                     SpiritLinearFifoSetAlmostFullThresholdRx: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    142            uint8_t tempRegValue;
    143          
    144            /* Check the parameters */
    145            s_assert_param(IS_FIFO_THR(cThrRxFifo));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C61             CMP      R4,#+97
   \   00000008   0xDB03             BLT.N    ??SpiritLinearFifoSetAlmostFullThresholdRx_0
   \   0000000A   0x2191             MOVS     R1,#+145
   \   0000000C   0x....             LDR.N    R0,??DataTable9_1
   \   0000000E   0x.... 0x....      BL       s_assert_failed
    146          
    147            /* Reads the register value */
    148            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG3_RXAFTHR_BASE, 1, &tempRegValue);
   \                     ??SpiritLinearFifoSetAlmostFullThresholdRx_0: (+1)
   \   00000012   0xAA00             ADD      R2,SP,#+0
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x203E             MOVS     R0,#+62
   \   00000018   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x....             LDR.N    R0,??DataTable9
   \   00000020   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000024   0x8001             STRH     R1,[R0, #+0]
    149          
    150            /* Build the register value */
    151            tempRegValue &= 0x80;
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    152            tempRegValue |= cThrRxFifo;
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x4320             ORRS     R0,R4,R0
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    153          
    154            /* Writes the Almost Full threshold for RX in the corresponding register */
    155            g_xStatus = SpiritSpiWriteRegisters(FIFO_CONFIG3_RXAFTHR_BASE, 1, &tempRegValue);
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x203E             MOVS     R0,#+62
   \   00000042   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0x....             LDR.N    R0,??DataTable9
   \   0000004A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
    156          
    157          }
   \   00000050   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    158          
    159          
    160          /**
    161           * @brief  Returns the almost full threshold for RX FIFO.
    162           * @note   The almost full threshold is encountered from the top of the FIFO. For example, if it is 7 the almost
    163           *         full FIFO irq will be raised when the number of elements is equals to 96-7 = 89.
    164           * @param  None.
    165           * @retval uint8_t Almost full threshold for Rx FIFO.
    166           */

   \                                 In section .text, align 2, keep-with-next
    167          uint8_t SpiritLinearFifoGetAlmostFullThresholdRx(void)
    168          {
   \                     SpiritLinearFifoGetAlmostFullThresholdRx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    169            uint8_t tempRegValue;
    170          
    171            /* Reads the almost full threshold for RX FIFO and return the value */
    172            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG3_RXAFTHR_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x203E             MOVS     R0,#+62
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable9
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    173          
    174            /* Build and return value */
    175            return (tempRegValue & 0x7F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    176          
    177          }
    178          
    179          
    180          /**
    181           * @brief  Sets the almost empty threshold for the Rx FIFO. When the number of elements in RX FIFO reaches this value an interrupt can be generated to the MCU.
    182           * @param  cThrRxFifo almost empty threshold.
    183           * 	   This parameter is an uint8_t.
    184           * @retval None.
    185           */

   \                                 In section .text, align 2, keep-with-next
    186          void SpiritLinearFifoSetAlmostEmptyThresholdRx(uint8_t cThrRxFifo)
    187          {
   \                     SpiritLinearFifoSetAlmostEmptyThresholdRx: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    188            uint8_t tempRegValue;
    189          
    190            /* Check the parameters */
    191            s_assert_param(IS_FIFO_THR(cThrRxFifo));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C61             CMP      R4,#+97
   \   00000008   0xDB03             BLT.N    ??SpiritLinearFifoSetAlmostEmptyThresholdRx_0
   \   0000000A   0x21BF             MOVS     R1,#+191
   \   0000000C   0x....             LDR.N    R0,??DataTable9_1
   \   0000000E   0x.... 0x....      BL       s_assert_failed
    192          
    193            /* Reads the register value */
    194            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG2_RXAETHR_BASE, 1, &tempRegValue);
   \                     ??SpiritLinearFifoSetAlmostEmptyThresholdRx_0: (+1)
   \   00000012   0xAA00             ADD      R2,SP,#+0
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x203F             MOVS     R0,#+63
   \   00000018   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x....             LDR.N    R0,??DataTable9
   \   00000020   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000024   0x8001             STRH     R1,[R0, #+0]
    195          
    196            /* Build the register value */
    197            tempRegValue &= 0x80;
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    198            tempRegValue |= cThrRxFifo;
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x4320             ORRS     R0,R4,R0
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    199          
    200            /* Writes the Almost Empty threshold for RX in the corresponding register */
    201            g_xStatus = SpiritSpiWriteRegisters(FIFO_CONFIG2_RXAETHR_BASE, 1, &tempRegValue);
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x203F             MOVS     R0,#+63
   \   00000042   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0x....             LDR.N    R0,??DataTable9
   \   0000004A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
    202          
    203          }
   \   00000050   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    204          
    205          
    206          /**
    207           * @brief  Returns the almost empty threshold for Rx FIFO.
    208           * @param  None.
    209           * @retval uint8_t Almost empty threshold for Rx FIFO.
    210           */

   \                                 In section .text, align 2, keep-with-next
    211          uint8_t SpiritLinearFifoGetAlmostEmptyThresholdRx(void)
    212          {
   \                     SpiritLinearFifoGetAlmostEmptyThresholdRx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    213            uint8_t tempRegValue;
    214          
    215            /* Reads the almost empty threshold for RX FIFO and returns the value */
    216            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG2_RXAETHR_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x203F             MOVS     R0,#+63
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable9
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    217          
    218            /* Build and return value */
    219            return (tempRegValue & 0x7F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    220          
    221          }
    222          
    223          
    224          /**
    225           * @brief  Sets the almost full threshold for the Tx FIFO. When the number of elements in TX FIFO reaches this value an interrupt can be generated to the MCU.
    226           * @note   The almost full threshold is encountered from the top of the FIFO. For example, if it is set to 7 the almost
    227           *         full FIFO irq will be raised when the number of elements is equals to 96-7 = 89.
    228           * @param  cThrTxFifo almost full threshold.
    229           * 	   This parameter is an uint8_t.
    230           * @retval None.
    231           */

   \                                 In section .text, align 2, keep-with-next
    232          void SpiritLinearFifoSetAlmostFullThresholdTx(uint8_t cThrTxFifo)
    233          {
   \                     SpiritLinearFifoSetAlmostFullThresholdTx: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    234            uint8_t tempRegValue;
    235          
    236            /* Check the parameters */
    237            s_assert_param(IS_FIFO_THR(cThrTxFifo));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C61             CMP      R4,#+97
   \   00000008   0xDB03             BLT.N    ??SpiritLinearFifoSetAlmostFullThresholdTx_0
   \   0000000A   0x21ED             MOVS     R1,#+237
   \   0000000C   0x....             LDR.N    R0,??DataTable9_1
   \   0000000E   0x.... 0x....      BL       s_assert_failed
    238          
    239            /* Reads the register value */
    240            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG1_TXAFTHR_BASE, 1, &tempRegValue);
   \                     ??SpiritLinearFifoSetAlmostFullThresholdTx_0: (+1)
   \   00000012   0xAA00             ADD      R2,SP,#+0
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2040             MOVS     R0,#+64
   \   00000018   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x....             LDR.N    R0,??DataTable9
   \   00000020   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000024   0x8001             STRH     R1,[R0, #+0]
    241          
    242            /* Build the register value */
    243            tempRegValue &= 0x80;
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    244            tempRegValue |= cThrTxFifo;
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x4320             ORRS     R0,R4,R0
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    245          
    246            /* Writes the Almost Full threshold for Tx in the corresponding register */
    247            g_xStatus = SpiritSpiWriteRegisters(FIFO_CONFIG1_TXAFTHR_BASE, 1, &tempRegValue);
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x2040             MOVS     R0,#+64
   \   00000042   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0x....             LDR.N    R0,??DataTable9
   \   0000004A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000004E   0x8001             STRH     R1,[R0, #+0]
    248          
    249          }
   \   00000050   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    250          
    251          
    252          /**
    253           * @brief  Returns the almost full threshold for Tx FIFO.
    254           * @note   The almost full threshold is encountered from the top of the FIFO. For example, if it is set to 7 the almost
    255           *         full FIFO irq will be raised when the number of elements is equals to 96-7 = 89.
    256           * @param  None.
    257           * @retval uint8_t Almost full threshold for Tx FIFO.
    258           */

   \                                 In section .text, align 2, keep-with-next
    259          uint8_t SpiritLinearFifoGetAlmostFullThresholdTx(void)
    260          {
   \                     SpiritLinearFifoGetAlmostFullThresholdTx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    261            uint8_t tempRegValue;
    262          
    263            /* Reads the almost full threshold for Tx FIFO and returns the value */
    264            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG1_TXAFTHR_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2040             MOVS     R0,#+64
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable9
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    265          
    266            /* Build and returns value */
    267            return (tempRegValue & 0x7F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    268          
    269          }
    270          
    271          
    272          /**
    273           * @brief  Sets the almost empty threshold for the Tx FIFO. When the number of elements in Tx FIFO reaches this value an interrupt can can be generated to the MCU.
    274           * @param  cThrTxFifo: almost empty threshold.
    275           *         This parameter is an uint8_t.
    276           * @retval None.
    277           */

   \                                 In section .text, align 2, keep-with-next
    278          void SpiritLinearFifoSetAlmostEmptyThresholdTx(uint8_t cThrTxFifo)
    279          {
   \                     SpiritLinearFifoSetAlmostEmptyThresholdTx: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    280            uint8_t tempRegValue;
    281          
    282            /* Check the parameters */
    283            s_assert_param(IS_FIFO_THR(cThrTxFifo));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C61             CMP      R4,#+97
   \   00000008   0xDB04             BLT.N    ??SpiritLinearFifoSetAlmostEmptyThresholdTx_0
   \   0000000A   0xF240 0x111B      MOVW     R1,#+283
   \   0000000E   0x....             LDR.N    R0,??DataTable9_1
   \   00000010   0x.... 0x....      BL       s_assert_failed
    284          
    285            /* Reads the register value */
    286            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG0_TXAETHR_BASE, 1, &tempRegValue);
   \                     ??SpiritLinearFifoSetAlmostEmptyThresholdTx_0: (+1)
   \   00000014   0xAA00             ADD      R2,SP,#+0
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2041             MOVS     R0,#+65
   \   0000001A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0x....             LDR.N    R0,??DataTable9
   \   00000022   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000026   0x8001             STRH     R1,[R0, #+0]
    287          
    288            /* Build the register value */
    289            tempRegValue &= 0x80;
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
    290            tempRegValue |= cThrTxFifo;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0x4320             ORRS     R0,R4,R0
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    291          
    292            /* Writes the Almost Empty threshold for Tx in the corresponding register */
    293            g_xStatus = SpiritSpiWriteRegisters(FIFO_CONFIG0_TXAETHR_BASE, 1, &tempRegValue);
   \   0000003E   0xAA00             ADD      R2,SP,#+0
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2041             MOVS     R0,#+65
   \   00000044   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0x....             LDR.N    R0,??DataTable9
   \   0000004C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    294          
    295          }
   \   00000052   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    296          
    297          
    298          /**
    299           * @brief  Returns the almost empty threshold for Tx FIFO.
    300           * @param  None.
    301           * @retval uint8_t Almost empty threshold for Tx FIFO.
    302           */

   \                                 In section .text, align 2, keep-with-next
    303          uint8_t SpiritLinearFifoGetAlmostEmptyThresholdTx(void)
    304          {
   \                     SpiritLinearFifoGetAlmostEmptyThresholdTx: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    305            uint8_t tempRegValue;
    306          
    307            /* Reads the almost empty threshold for TX FIFO and returns the value */
    308            g_xStatus = SpiritSpiReadRegisters(FIFO_CONFIG0_TXAETHR_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2041             MOVS     R0,#+65
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable9
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    309          
    310            /* Build and return value */
    311            return (tempRegValue & 0x7F);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    312          
    313          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000048   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000050   0x5F 0x50          DC8 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H, 74H
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \   00000058   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000060   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000068   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000070   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 53H, 50H, 49H, 52H
   \              0x63 0x5C    
   \              0x53 0x50    
   \              0x49 0x52    
   \   00000078   0x49 0x54          DC8 49H, 54H, 5FH, 4CH, 69H, 6EH, 65H, 61H
   \              0x5F 0x4C    
   \              0x69 0x6E    
   \              0x65 0x61    
   \   00000080   0x72 0x46          DC8 72H, 46H, 69H, 66H, 6FH, 2EH, 63H, 0
   \              0x69 0x66    
   \              0x6F 0x2E    
   \              0x63 0x00    
    314          
    315          
    316          /**
    317           *@}
    318           */
    319          
    320          /**
    321           *@}
    322           */
    323          
    324          
    325          /**
    326           *@}
    327           */
    328          
    329          
    330          
    331          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SpiritLinearFifoGetAlmostEmptyThresholdRx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritLinearFifoGetAlmostEmptyThresholdTx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritLinearFifoGetAlmostFullThresholdRx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritLinearFifoGetAlmostFullThresholdTx
        16   -> SdkEvalSpiReadRegisters
      16   SpiritLinearFifoReadNumElementsRxFifo
        16   -> SdkEvalSpiReadRegisters
      16   SpiritLinearFifoReadNumElementsTxFifo
        16   -> SdkEvalSpiReadRegisters
      16   SpiritLinearFifoSetAlmostEmptyThresholdRx
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritLinearFifoSetAlmostEmptyThresholdTx
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritLinearFifoSetAlmostFullThresholdRx
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritLinearFifoSetAlmostFullThresholdTx
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
     136  ?_0
      34  SpiritLinearFifoGetAlmostEmptyThresholdRx
      34  SpiritLinearFifoGetAlmostEmptyThresholdTx
      34  SpiritLinearFifoGetAlmostFullThresholdRx
      34  SpiritLinearFifoGetAlmostFullThresholdTx
      34  SpiritLinearFifoReadNumElementsRxFifo
      34  SpiritLinearFifoReadNumElementsTxFifo
      82  SpiritLinearFifoSetAlmostEmptyThresholdRx
      84  SpiritLinearFifoSetAlmostEmptyThresholdTx
      82  SpiritLinearFifoSetAlmostFullThresholdRx
      82  SpiritLinearFifoSetAlmostFullThresholdTx

 
 136 bytes in section .rodata
 542 bytes in section .text
 
 542 bytes of CODE  memory
 136 bytes of CONST memory

Errors: none
Warnings: none
