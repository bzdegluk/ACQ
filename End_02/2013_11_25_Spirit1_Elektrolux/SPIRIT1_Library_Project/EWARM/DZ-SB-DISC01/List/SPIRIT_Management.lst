###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Management.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Management.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_Management.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_Management.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_Management.c
      1          /**
      2          * @file    SPIRIT_Management.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   The management layer for SPIRIT1 library.
      7          * @details
      8          *
      9          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15          *
     16          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19          *
     20          * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21          */  
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_Management.h"
     26          
     27          /**
     28           * @addtogroup SPIRIT_Libraries
     29           * @{
     30           */
     31          
     32          
     33          /**
     34          * @defgroup SPIRIT_MANAGEMENT              SPIRIT Management
     35          * @{
     36          */
     37          
     38          /**
     39          * @brief  BS value to write in the SYNT0 register according to the selected band
     40          */

   \                                 In section .rodata, align 4
     41          static const uint8_t s_vectcBandRegValue[4]={SYNT0_BS_6, SYNT0_BS_12, SYNT0_BS_16, SYNT0_BS_32};
   \                     s_vectcBandRegValue:
   \   00000000   0x01 0x03          DC8 1, 3, 4, 5
   \              0x04 0x05    
     42          
     43          #define COMMUNICATION_STATE_TX          0
     44          #define COMMUNICATION_STATE_RX          1
     45          #define COMMUNICATION_STATE_NONE        2
     46          

   \                                 In section .bss, align 4
     47          static uint32_t s_nDesiredFrequency;
   \                     s_nDesiredFrequency:
   \   00000000                      DS8 4
     48          

   \                                 In section .data, align 1
     49          volatile static uint8_t s_cCommunicationState = COMMUNICATION_STATE_NONE;
   \                     s_cCommunicationState:
   \   00000000   0x02               DC8 2
     50          
     51          
     52          /**
     53          * @brief  Factor is: B/2 used in the formula for SYNTH word calculation
     54          */

   \                                 In section .rodata, align 4
     55          static const uint8_t s_vectcBHalfFactor[4]={(HIGH_BAND_FACTOR/2), (MIDDLE_BAND_FACTOR/2), (LOW_BAND_FACTOR/2), (VERY_LOW_BAND_FACTOR/2)};
   \                     s_vectcBHalfFactor:
   \   00000000   0x03 0x06          DC8 3, 6, 8, 16
   \              0x08 0x10    
     56          
     57          
     58          /**
     59          * @defgroup SPIRIT_MANAGEMENT_FUNCTIONS    SPIRIT Management Functions
     60          * @{
     61          */
     62          
     63          
     64          /**
     65          * @defgroup WORKAROUND_FUNCTIONS              SPIRIT Management Workaround Functions
     66          * @{
     67          */
     68          
     69          /**
     70          * @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
     71          * @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
     72          * @retval None.
     73          */

   \                                 In section .text, align 2, keep-with-next
     74          void SpiritManagementSetFrequencyBase(uint32_t lFBase)
     75          {
   \                     SpiritManagementSetFrequencyBase: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
     76            uint32_t synthWord, Fc;
     77            uint8_t band, anaRadioRegArray[4], wcp;
     78            
     79            /* Check the parameter */
     80            s_assert_param(IS_FREQUENCY_BAND(lFBase));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x2e5f5680
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD303             BCC.N    ??SpiritManagementSetFrequencyBase_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x390c2fe1
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD31C             BCC.N    ??SpiritManagementSetFrequencyBase_1
   \                     ??SpiritManagementSetFrequencyBase_0: (+1)
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x1701e480
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD303             BCC.N    ??SpiritManagementSetFrequencyBase_2
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x1c146a61
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD314             BCC.N    ??SpiritManagementSetFrequencyBase_1
   \                     ??SpiritManagementSetFrequencyBase_2: (+1)
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x11d260c0
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD303             BCC.N    ??SpiritManagementSetFrequencyBase_3
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x14ced7e1
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD30C             BCC.N    ??SpiritManagementSetFrequencyBase_1
   \                     ??SpiritManagementSetFrequencyBase_3: (+1)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x8e18f40
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD303             BCC.N    ??SpiritManagementSetFrequencyBase_4
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable6_7  ;; 0xa6fd061
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD304             BCC.N    ??SpiritManagementSetFrequencyBase_1
   \                     ??SpiritManagementSetFrequencyBase_4: (+1)
   \   00000048   0x2150             MOVS     R1,#+80
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable6_8
   \   0000004E   0x.... 0x....      BL       s_assert_failed
     81            
     82            /* Search the operating band */
     83            if(IS_FREQUENCY_BAND_HIGH(lFBase))
   \                     ??SpiritManagementSetFrequencyBase_1: (+1)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x2e5f5680
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD306             BCC.N    ??SpiritManagementSetFrequencyBase_5
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x390c2fe1
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD202             BCS.N    ??SpiritManagementSetFrequencyBase_5
     84            {
     85              band = HIGH_BAND;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x4681             MOV      R9,R0
   \   00000066   0xE01F             B.N      ??SpiritManagementSetFrequencyBase_6
     86            }
     87            else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
   \                     ??SpiritManagementSetFrequencyBase_5: (+1)
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x1701e480
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD306             BCC.N    ??SpiritManagementSetFrequencyBase_7
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x1c146a61
   \   00000074   0x4284             CMP      R4,R0
   \   00000076   0xD202             BCS.N    ??SpiritManagementSetFrequencyBase_7
     88            {
     89              band = MIDDLE_BAND;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x4681             MOV      R9,R0
   \   0000007C   0xE014             B.N      ??SpiritManagementSetFrequencyBase_6
     90            }
     91            else if(IS_FREQUENCY_BAND_LOW(lFBase))
   \                     ??SpiritManagementSetFrequencyBase_7: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x11d260c0
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD306             BCC.N    ??SpiritManagementSetFrequencyBase_8
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x14ced7e1
   \   0000008A   0x4284             CMP      R4,R0
   \   0000008C   0xD202             BCS.N    ??SpiritManagementSetFrequencyBase_8
     92            {
     93              band = LOW_BAND;
   \   0000008E   0x2002             MOVS     R0,#+2
   \   00000090   0x4681             MOV      R9,R0
   \   00000092   0xE009             B.N      ??SpiritManagementSetFrequencyBase_6
     94            }
     95            else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
   \                     ??SpiritManagementSetFrequencyBase_8: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x8e18f40
   \   00000098   0x4284             CMP      R4,R0
   \   0000009A   0xD305             BCC.N    ??SpiritManagementSetFrequencyBase_6
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable6_7  ;; 0xa6fd061
   \   000000A0   0x4284             CMP      R4,R0
   \   000000A2   0xD201             BCS.N    ??SpiritManagementSetFrequencyBase_6
     96            {
     97              band = VERY_LOW_BAND;
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0x4681             MOV      R9,R0
     98            }
     99            
    100            int32_t FOffset  = SpiritRadioGetFrequencyOffset();
   \                     ??SpiritManagementSetFrequencyBase_6: (+1)
   \   000000A8   0x.... 0x....      BL       SpiritRadioGetFrequencyOffset
   \   000000AC   0x4680             MOV      R8,R0
    101            uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
   \   000000AE   0x.... 0x....      BL       SpiritRadioGetChannelSpace
   \   000000B2   0x0005             MOVS     R5,R0
    102            uint8_t cChannelNum = SpiritRadioGetChannel();
   \   000000B4   0x.... 0x....      BL       SpiritRadioGetChannel
   \   000000B8   0x0006             MOVS     R6,R0
    103            
    104            /* Calculates the channel center frequency */
    105            Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
   \   000000BA   0xEB18 0x0004      ADDS     R0,R8,R4
   \   000000BE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C0   0xFB06 0x0005      MLA      R0,R6,R5,R0
   \   000000C4   0x4683             MOV      R11,R0
    106            
    107            /* Reads the reference divider */
    108            uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
   \   000000C6   0x.... 0x....      BL       SpiritRadioGetRefDiv
   \   000000CA   0x1C47             ADDS     R7,R0,#+1
    109            
    110            if(SpiritGeneralGetSpiritVersion() != SPIRIT_VERSION_2_0) 
   \   000000CC   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD03A             BEQ.N    ??SpiritManagementSetFrequencyBase_9
    111            {
    112              switch(band)
   \   000000D4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000D8   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000DC   0xD02A             BEQ.N    ??SpiritManagementSetFrequencyBase_10
   \   000000DE   0xF1B9 0x0F02      CMP      R9,#+2
   \   000000E2   0xD00F             BEQ.N    ??SpiritManagementSetFrequencyBase_11
   \   000000E4   0xD31A             BCC.N    ??SpiritManagementSetFrequencyBase_12
   \   000000E6   0xF1B9 0x0F03      CMP      R9,#+3
   \   000000EA   0xD12E             BNE.N    ??SpiritManagementSetFrequencyBase_9
    113              {
    114              case VERY_LOW_BAND:
    115                if(Fc<161281250)
   \                     ??SpiritManagementSetFrequencyBase_13: (+1)
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable6_9  ;; 0x99cf4e2
   \   000000F0   0x4583             CMP      R11,R0
   \   000000F2   0xD203             BCS.N    ??SpiritManagementSetFrequencyBase_14
    116                {
    117                  SpiritCalibrationSelectVco(VCO_L);
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x.... 0x....      BL       SpiritCalibrationSelectVco
   \   000000FA   0xE002             B.N      ??SpiritManagementSetFrequencyBase_15
    118                }
    119                else
    120                {
    121                  SpiritCalibrationSelectVco(VCO_H);
   \                     ??SpiritManagementSetFrequencyBase_14: (+1)
   \   000000FC   0x2001             MOVS     R0,#+1
   \   000000FE   0x.... 0x....      BL       SpiritCalibrationSelectVco
    122                }
    123                break;
   \                     ??SpiritManagementSetFrequencyBase_15: (+1)
   \   00000102   0xE022             B.N      ??SpiritManagementSetFrequencyBase_9
    124                
    125              case LOW_BAND:
    126                if(Fc<322562500)
   \                     ??SpiritManagementSetFrequencyBase_11: (+1)
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable6_10  ;; 0x1339e9c4
   \   00000108   0x4583             CMP      R11,R0
   \   0000010A   0xD203             BCS.N    ??SpiritManagementSetFrequencyBase_16
    127                {
    128                  SpiritCalibrationSelectVco(VCO_L);
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x.... 0x....      BL       SpiritCalibrationSelectVco
   \   00000112   0xE002             B.N      ??SpiritManagementSetFrequencyBase_17
    129                }
    130                else
    131                {
    132                  SpiritCalibrationSelectVco(VCO_H);
   \                     ??SpiritManagementSetFrequencyBase_16: (+1)
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0x.... 0x....      BL       SpiritCalibrationSelectVco
    133                }
    134                break;
   \                     ??SpiritManagementSetFrequencyBase_17: (+1)
   \   0000011A   0xE016             B.N      ??SpiritManagementSetFrequencyBase_9
    135                
    136              case MIDDLE_BAND:
    137                if(Fc<430083334)
   \                     ??SpiritManagementSetFrequencyBase_12: (+1)
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable6_11  ;; 0x19a28d06
   \   00000120   0x4583             CMP      R11,R0
   \   00000122   0xD203             BCS.N    ??SpiritManagementSetFrequencyBase_18
    138                {
    139                  SpiritCalibrationSelectVco(VCO_L);
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x.... 0x....      BL       SpiritCalibrationSelectVco
   \   0000012A   0xE002             B.N      ??SpiritManagementSetFrequencyBase_19
    140                }
    141                else
    142                {
    143                  SpiritCalibrationSelectVco(VCO_H);
   \                     ??SpiritManagementSetFrequencyBase_18: (+1)
   \   0000012C   0x2001             MOVS     R0,#+1
   \   0000012E   0x.... 0x....      BL       SpiritCalibrationSelectVco
    144                }
    145                break;
   \                     ??SpiritManagementSetFrequencyBase_19: (+1)
   \   00000132   0xE00A             B.N      ??SpiritManagementSetFrequencyBase_9
    146                
    147              case HIGH_BAND:
    148                if(Fc<860166667)
   \                     ??SpiritManagementSetFrequencyBase_10: (+1)
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable6_12  ;; 0x33451a0b
   \   00000138   0x4583             CMP      R11,R0
   \   0000013A   0xD203             BCS.N    ??SpiritManagementSetFrequencyBase_20
    149                {
    150                  SpiritCalibrationSelectVco(VCO_L);
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x.... 0x....      BL       SpiritCalibrationSelectVco
   \   00000142   0xE002             B.N      ??SpiritManagementSetFrequencyBase_21
    151                }
    152                else
    153                {
    154                  SpiritCalibrationSelectVco(VCO_H);
   \                     ??SpiritManagementSetFrequencyBase_20: (+1)
   \   00000144   0x2001             MOVS     R0,#+1
   \   00000146   0x.... 0x....      BL       SpiritCalibrationSelectVco
    155                }
    156              }
    157            }
    158          
    159            /* Search the VCO charge pump word and set the corresponding register */
    160            wcp = SpiritRadioSearchWCP(Fc);
   \                     ??SpiritManagementSetFrequencyBase_21: (+1)
   \                     ??SpiritManagementSetFrequencyBase_9: (+1)
   \   0000014A   0x4658             MOV      R0,R11
   \   0000014C   0x.... 0x....      BL       SpiritRadioSearchWCP
   \   00000150   0xF88D 0x0010      STRB     R0,[SP, #+16]
    161          
    162            synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
   \   00000154   0x.... 0x....      BL       SpiritRadioGetXtalFrequency
   \   00000158   0x4682             MOV      R10,R0
   \   0000015A   0x0020             MOVS     R0,R4
   \   0000015C   0x.... 0x....      BL       __aeabi_ui2d
   \   00000160   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00000164   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable6_13
   \   0000016A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000016E   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000172   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000176   0xF45F 0x2180      MOVS     R1,#+262144
   \   0000017A   0x4348             MULS     R0,R1,R0
   \   0000017C   0x.... 0x....      BL       __aeabi_i2d
   \   00000180   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000184   0x4650             MOV      R0,R10
   \   00000186   0x.... 0x....      BL       __aeabi_ui2d
   \   0000018A   0x0002             MOVS     R2,R0
   \   0000018C   0x000B             MOVS     R3,R1
   \   0000018E   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000192   0x.... 0x....      BL       __aeabi_ddiv
   \   00000196   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   0000019A   0x.... 0x....      BL       __aeabi_dmul
   \   0000019E   0x.... 0x....      BL       __aeabi_d2uiz
   \   000001A2   0x9006             STR      R0,[SP, #+24]
    163            
    164            /* Build the array of registers values for the analog part */
    165            anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
   \   000001A4   0x9806             LDR      R0,[SP, #+24]
   \   000001A6   0x0D40             LSRS     R0,R0,#+21
   \   000001A8   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   000001AC   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   000001B0   0x0149             LSLS     R1,R1,#+5
   \   000001B2   0x4308             ORRS     R0,R1,R0
   \   000001B4   0xF88D 0x0014      STRB     R0,[SP, #+20]
    166            anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
   \   000001B8   0x9806             LDR      R0,[SP, #+24]
   \   000001BA   0x0B40             LSRS     R0,R0,#+13
   \   000001BC   0xF88D 0x0015      STRB     R0,[SP, #+21]
    167            anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
   \   000001C0   0x9806             LDR      R0,[SP, #+24]
   \   000001C2   0x0940             LSRS     R0,R0,#+5
   \   000001C4   0xF88D 0x0016      STRB     R0,[SP, #+22]
    168            anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
   \   000001C8   0x9806             LDR      R0,[SP, #+24]
   \   000001CA   0x.... 0x....      LDR.W    R1,??DataTable6_14
   \   000001CE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001D2   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   000001D6   0xEA51 0x00C0      ORRS     R0,R1,R0, LSL #+3
   \   000001DA   0xF88D 0x0017      STRB     R0,[SP, #+23]
    169            
    170            /* Configures the needed Analog Radio registers */
    171            g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
   \   000001DE   0xAA05             ADD      R2,SP,#+20
   \   000001E0   0x2104             MOVS     R1,#+4
   \   000001E2   0x2008             MOVS     R0,#+8
   \   000001E4   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000001E8   0x9000             STR      R0,[SP, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R0,??DataTable6_15
   \   000001EE   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001F2   0x8001             STRH     R1,[R0, #+0]
    172          }
   \   000001F4   0xB007             ADD      SP,SP,#+28
   \   000001F6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void SpiritManagementWaVcoCalibration(void)
    175          {
   \                     SpiritManagementWaVcoCalibration: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    176            uint8_t s_cVcoWordRx;
    177            uint8_t s_cVcoWordTx;
    178            uint32_t nFreq;
    179            uint8_t cRestore = 0;
   \   00000006   0x2700             MOVS     R7,#+0
    180            uint8_t cStandby = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
    181            uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
   \   0000000C   0x.... 0x....      BL       SpiritRadioGetXtalFrequency
   \   00000010   0x4681             MOV      R9,R0
    182            SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000012   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   00000016   0x4682             MOV      R10,R0
    183            
    184            /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
    185            if(xtal_frequency>26000000)
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0x18cba81
   \   0000001C   0x4581             CMP      R9,R0
   \   0000001E   0xD30E             BCC.N    ??SpiritManagementWaVcoCalibration_0
    186            {
    187              if(!SpiritRadioGetRefDiv())
   \   00000020   0x.... 0x....      BL       SpiritRadioGetRefDiv
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD10A             BNE.N    ??SpiritManagementWaVcoCalibration_0
    188              {
    189                cRestore = 1;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x0007             MOVS     R7,R0
    190                nFreq = SpiritRadioGetFrequencyBase();
   \   0000002C   0x.... 0x....      BL       SpiritRadioGetFrequencyBase
   \   00000030   0x0006             MOVS     R6,R0
    191                SpiritRadioSetRefDiv(S_ENABLE);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       SpiritRadioSetRefDiv
    192                SpiritManagementSetFrequencyBase(nFreq);
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x.... 0x....      BL       SpiritManagementSetFrequencyBase
    193              }
    194            }
    195            nFreq = SpiritRadioGetFrequencyBase();
   \                     ??SpiritManagementWaVcoCalibration_0: (+1)
   \   0000003E   0x.... 0x....      BL       SpiritRadioGetFrequencyBase
   \   00000042   0x0006             MOVS     R6,R0
    196            
    197            /* Increase the VCO current */
    198            uint8_t tmp = 0x19; SpiritSpiWriteRegisters(0xA1,1,&tmp);
   \   00000044   0x2019             MOVS     R0,#+25
   \   00000046   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000004A   0xAA00             ADD      R2,SP,#+0
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x20A1             MOVS     R0,#+161
   \   00000050   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    199            
    200            SpiritCalibrationVco(S_ENABLE);
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       SpiritCalibrationVco
    201            
    202            SpiritRefreshStatus();
   \   0000005A   0x.... 0x....      BL       SpiritRefreshStatus
    203            if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable6_15
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x0840             LSRS     R0,R0,#+1
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x2840             CMP      R0,#+64
   \   0000006C   0xD10D             BNE.N    ??SpiritManagementWaVcoCalibration_1
    204            {
    205              cStandby = 1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x4680             MOV      R8,R0
    206              SpiritCmdStrobeReady();
   \   00000072   0x2062             MOVS     R0,#+98
   \   00000074   0x.... 0x....      BL       SpiritCmdStrobeCommand
    207              do{
    208                SpiritRefreshStatus();
   \                     ??SpiritManagementWaVcoCalibration_2: (+1)
   \   00000078   0x.... 0x....      BL       SpiritRefreshStatus
    209              }while(g_xStatus.MC_STATE != MC_STATE_READY); 
   \   0000007C   0x....             LDR.N    R0,??DataTable6_15
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0x0840             LSRS     R0,R0,#+1
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x2803             CMP      R0,#+3
   \   00000088   0xD1F6             BNE.N    ??SpiritManagementWaVcoCalibration_2
    210            }
    211            
    212            SpiritCmdStrobeLockTx();
   \                     ??SpiritManagementWaVcoCalibration_1: (+1)
   \   0000008A   0x2066             MOVS     R0,#+102
   \   0000008C   0x.... 0x....      BL       SpiritCmdStrobeCommand
    213            
    214            do{
    215              SpiritRefreshStatus();
   \                     ??SpiritManagementWaVcoCalibration_3: (+1)
   \   00000090   0x.... 0x....      BL       SpiritRefreshStatus
    216            }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
   \   00000094   0x....             LDR.N    R0,??DataTable6_15
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x0840             LSRS     R0,R0,#+1
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0x280F             CMP      R0,#+15
   \   000000A0   0xD1F6             BNE.N    ??SpiritManagementWaVcoCalibration_3
    217            
    218            s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
   \   000000A2   0x.... 0x....      BL       SpiritCalibrationGetVcoCalData
   \   000000A6   0x0005             MOVS     R5,R0
    219            
    220            SpiritCmdStrobeReady();
   \   000000A8   0x2062             MOVS     R0,#+98
   \   000000AA   0x.... 0x....      BL       SpiritCmdStrobeCommand
    221            
    222            do{
    223              SpiritRefreshStatus();
   \                     ??SpiritManagementWaVcoCalibration_4: (+1)
   \   000000AE   0x.... 0x....      BL       SpiritRefreshStatus
    224            }while(g_xStatus.MC_STATE != MC_STATE_READY); 
   \   000000B2   0x....             LDR.N    R0,??DataTable6_15
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x0840             LSRS     R0,R0,#+1
   \   000000BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BC   0x2803             CMP      R0,#+3
   \   000000BE   0xD1F6             BNE.N    ??SpiritManagementWaVcoCalibration_4
    225            
    226            
    227            /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
    228            if(xtal_frequency>26000000 && spirit_version == SPIRIT_VERSION_2_1)
   \   000000C0   0x....             LDR.N    R0,??DataTable6_16  ;; 0x18cba81
   \   000000C2   0x4581             CMP      R9,R0
   \   000000C4   0xD308             BCC.N    ??SpiritManagementWaVcoCalibration_5
   \   000000C6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000CA   0xF1BA 0x0F01      CMP      R10,#+1
   \   000000CE   0xD103             BNE.N    ??SpiritManagementWaVcoCalibration_5
    229            {
    230              SpiritManagementSetFrequencyBase(nFreq+480300);
   \   000000D0   0x....             LDR.N    R0,??DataTable6_17  ;; 0x7542c
   \   000000D2   0x1980             ADDS     R0,R0,R6
   \   000000D4   0x.... 0x....      BL       SpiritManagementSetFrequencyBase
    231            }
    232            
    233            SpiritCmdStrobeLockRx();
   \                     ??SpiritManagementWaVcoCalibration_5: (+1)
   \   000000D8   0x2065             MOVS     R0,#+101
   \   000000DA   0x.... 0x....      BL       SpiritCmdStrobeCommand
    234            
    235            do{
    236              SpiritRefreshStatus();
   \                     ??SpiritManagementWaVcoCalibration_6: (+1)
   \   000000DE   0x.... 0x....      BL       SpiritRefreshStatus
    237            }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
   \   000000E2   0x....             LDR.N    R0,??DataTable6_15
   \   000000E4   0x7800             LDRB     R0,[R0, #+0]
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x0840             LSRS     R0,R0,#+1
   \   000000EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EC   0x280F             CMP      R0,#+15
   \   000000EE   0xD1F6             BNE.N    ??SpiritManagementWaVcoCalibration_6
    238            
    239            s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
   \   000000F0   0x.... 0x....      BL       SpiritCalibrationGetVcoCalData
   \   000000F4   0x0004             MOVS     R4,R0
    240            
    241            SpiritCmdStrobeReady();
   \   000000F6   0x2062             MOVS     R0,#+98
   \   000000F8   0x.... 0x....      BL       SpiritCmdStrobeCommand
    242            
    243            do{
    244              SpiritRefreshStatus();
   \                     ??SpiritManagementWaVcoCalibration_7: (+1)
   \   000000FC   0x.... 0x....      BL       SpiritRefreshStatus
    245            }while(g_xStatus.MC_STATE != MC_STATE_READY);
   \   00000100   0x....             LDR.N    R0,??DataTable6_15
   \   00000102   0x7800             LDRB     R0,[R0, #+0]
   \   00000104   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000106   0x0840             LSRS     R0,R0,#+1
   \   00000108   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010A   0x2803             CMP      R0,#+3
   \   0000010C   0xD1F6             BNE.N    ??SpiritManagementWaVcoCalibration_7
    246            
    247            if(cStandby == 1)
   \   0000010E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000112   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000116   0xD102             BNE.N    ??SpiritManagementWaVcoCalibration_8
    248            {
    249              SpiritCmdStrobeStandby();    
   \   00000118   0x2063             MOVS     R0,#+99
   \   0000011A   0x.... 0x....      BL       SpiritCmdStrobeCommand
    250            }
    251            SpiritCalibrationVco(S_DISABLE);
   \                     ??SpiritManagementWaVcoCalibration_8: (+1)
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x.... 0x....      BL       SpiritCalibrationVco
    252            
    253            /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
    254            if(cRestore || (xtal_frequency>26000000 && spirit_version == SPIRIT_VERSION_2_1))
   \   00000124   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000126   0x2F00             CMP      R7,#+0
   \   00000128   0xD107             BNE.N    ??SpiritManagementWaVcoCalibration_9
   \   0000012A   0x....             LDR.N    R0,??DataTable6_16  ;; 0x18cba81
   \   0000012C   0x4581             CMP      R9,R0
   \   0000012E   0xD30A             BCC.N    ??SpiritManagementWaVcoCalibration_10
   \   00000130   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000134   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000138   0xD105             BNE.N    ??SpiritManagementWaVcoCalibration_10
    255            {
    256              SpiritRadioSetRefDiv(S_DISABLE);    
   \                     ??SpiritManagementWaVcoCalibration_9: (+1)
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      BL       SpiritRadioSetRefDiv
    257              SpiritManagementSetFrequencyBase(nFreq);
   \   00000140   0x0030             MOVS     R0,R6
   \   00000142   0x.... 0x....      BL       SpiritManagementSetFrequencyBase
    258            }
    259            
    260            /* Restore the VCO current */
    261            tmp = 0x11; SpiritSpiWriteRegisters(0xA1,1,&tmp);
   \                     ??SpiritManagementWaVcoCalibration_10: (+1)
   \   00000146   0x2011             MOVS     R0,#+17
   \   00000148   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000014C   0xAA00             ADD      R2,SP,#+0
   \   0000014E   0x2101             MOVS     R1,#+1
   \   00000150   0x20A1             MOVS     R0,#+161
   \   00000152   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    262            
    263            SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
   \   00000156   0x0028             MOVS     R0,R5
   \   00000158   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015A   0x.... 0x....      BL       SpiritCalibrationSetVcoCalDataTx
    264            SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
   \   0000015E   0x0020             MOVS     R0,R4
   \   00000160   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000162   0x.... 0x....      BL       SpiritCalibrationSetVcoCalDataRx
    265          }
   \   00000166   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    266          

   \                                 In section .text, align 2, keep-with-next
    267          void SpiritManagementWaRcoCalibration(void)
    268          {
   \                     SpiritManagementWaRcoCalibration: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    269            uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
   \   00000002   0x.... 0x....      BL       SpiritRadioGetXtalFrequency
   \   00000006   0x0004             MOVS     R4,R0
    270            SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000008   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   0000000C   0x0005             MOVS     R5,R0
    271            
    272            if(spirit_version == SPIRIT_VERSION_2_1 && xtal_frequency<48000000)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xD120             BNE.N    ??SpiritManagementWaRcoCalibration_0
   \   00000014   0x....             LDR.N    R0,??DataTable6_18  ;; 0x2dc6c00
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD21D             BCS.N    ??SpiritManagementWaRcoCalibration_0
    273            {
    274              uint8_t tmp= 0x02;SpiritSpiWriteRegisters(0x50, 1, &tmp); 
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000020   0xAA00             ADD      R2,SP,#+0
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2050             MOVS     R0,#+80
   \   00000026   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    275              SpiritCmdStrobeStandby(); 
   \   0000002A   0x2063             MOVS     R0,#+99
   \   0000002C   0x.... 0x....      BL       SpiritCmdStrobeCommand
    276              tmp= 0x29;SpiritSpiWriteRegisters(0xB4, 1, &tmp); 
   \   00000030   0x2029             MOVS     R0,#+41
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x20B4             MOVS     R0,#+180
   \   0000003C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    277              tmp= 0x06;SpiritSpiWriteRegisters(0x50, 1, &tmp); 
   \   00000040   0x2006             MOVS     R0,#+6
   \   00000042   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000046   0xAA00             ADD      R2,SP,#+0
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2050             MOVS     R0,#+80
   \   0000004C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    278              SpiritCmdStrobeReady();
   \   00000050   0x2062             MOVS     R0,#+98
   \   00000052   0x.... 0x....      BL       SpiritCmdStrobeCommand
    279            }
    280          }
   \                     ??SpiritManagementWaRcoCalibration_0: (+1)
   \   00000056   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    281          
    282          

   \                                 In section .text, align 2, keep-with-next
    283          void SpiritManagementWaRxStartup(void)
    284          {
   \                     SpiritManagementWaRxStartup: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    285            SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000002   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   00000006   0x0004             MOVS     R4,R0
    286          
    287            if(spirit_version == SPIRIT_VERSION_2_1)
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C01             CMP      R4,#+1
   \   0000000C   0xD118             BNE.N    ??SpiritManagementWaRxStartup_0
    288            {
    289              for(volatile uint32_t i=0;i<0xFF;i++);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \                     ??SpiritManagementWaRxStartup_1: (+1)
   \   00000012   0x9801             LDR      R0,[SP, #+4]
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xD203             BCS.N    ??SpiritManagementWaRxStartup_2
   \   00000018   0x9801             LDR      R0,[SP, #+4]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0xE7F8             B.N      ??SpiritManagementWaRxStartup_1
    290              uint8_t tmp = 0x10; SpiritSpiWriteRegisters(0xa8, 1, &tmp);
   \                     ??SpiritManagementWaRxStartup_2: (+1)
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x20A8             MOVS     R0,#+168
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    291              tmp = 0x00; SpiritSpiWriteRegisters(0xa8, 1, &tmp);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x20A8             MOVS     R0,#+168
   \   0000003C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    292              {
    293                //      uint8_t tmp1,tmp2 = 0x5F; SpiritSpiReadRegisters(0x9E, 1, &tmp1);
    294                //      SpiritCmdStrobeCommand(CMD_RX); 
    295                //      SpiritSpiWriteRegisters(0x9E, 1, &tmp2);
    296                //      for(volatile uint32_t i=0;i<0x3F;i++);
    297                //      SpiritSpiWriteRegisters(0x9E, 1, &tmp1);
    298              }
    299            }  
    300          }
   \                     ??SpiritManagementWaRxStartup_0: (+1)
   \   00000040   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    301          
    302          

   \                                 In section .text, align 2, keep-with-next
    303          void SpiritManagementWaRxStartupInit(void)
    304          {
   \                     SpiritManagementWaRxStartupInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    305            SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000004   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   00000008   0x0004             MOVS     R4,R0
    306            
    307           if(spirit_version == SPIRIT_VERSION_2_1)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD117             BNE.N    ??SpiritManagementWaRxStartupInit_0
    308            {
    309                uint8_t tmp = 0xA8; SpiritSpiWriteRegisters(0xa9, 1, &tmp);
   \   00000010   0x20A8             MOVS     R0,#+168
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000016   0xAA00             ADD      R2,SP,#+0
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x20A9             MOVS     R0,#+169
   \   0000001C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    310                tmp = 0x4B; SpiritSpiWriteRegisters(0xaa, 1, &tmp);
   \   00000020   0x204B             MOVS     R0,#+75
   \   00000022   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x20AA             MOVS     R0,#+170
   \   0000002C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    311                tmp = 0xFC; SpiritSpiWriteRegisters(0xab, 1, &tmp);
   \   00000030   0x20FC             MOVS     R0,#+252
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x20AB             MOVS     R0,#+171
   \   0000003C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    312            }  
    313          }
   \                     ??SpiritManagementWaRxStartupInit_0: (+1)
   \   00000040   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    314          
    315          

   \                                 In section .text, align 2, keep-with-next
    316          void SpiritManagementWaCmdStrobeTx(void)
    317          {
   \                     SpiritManagementWaCmdStrobeTx: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    318            if(s_cCommunicationState != COMMUNICATION_STATE_TX)
   \   00000002   0x....             LDR.N    R0,??DataTable6_19
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD044             BEQ.N    ??SpiritManagementWaCmdStrobeTx_0
    319            {
    320              uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
   \   0000000A   0x.... 0x....      BL       SpiritRadioGetXtalFrequency
   \   0000000E   0x0004             MOVS     R4,R0
    321              SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000010   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   00000014   0x0005             MOVS     R5,R0
    322              
    323              if(spirit_version == SPIRIT_VERSION_2_1  && xtal_frequency>26000000)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xD106             BNE.N    ??SpiritManagementWaCmdStrobeTx_1
   \   0000001C   0x....             LDR.N    R0,??DataTable6_16  ;; 0x18cba81
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD303             BCC.N    ??SpiritManagementWaCmdStrobeTx_1
    324              {
    325                SpiritManagementSetFrequencyBase(s_nDesiredFrequency);      
   \   00000022   0x....             LDR.N    R0,??DataTable6_20
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       SpiritManagementSetFrequencyBase
    326              }
    327              /* To achive the max output power */
    328              if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
   \                     ??SpiritManagementWaCmdStrobeTx_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable6_20
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x....             LDR.N    R1,??DataTable6_21  ;; 0x8f0d180
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD308             BCC.N    ??SpiritManagementWaCmdStrobeTx_2
   \   00000034   0x....             LDR.N    R0,??DataTable6_20
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x....             LDR.N    R1,??DataTable6_22  ;; 0x1c03a181
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD203             BCS.N    ??SpiritManagementWaCmdStrobeTx_2
    329              {
    330                /* Optimal setting for Tx mode only */
    331                SpiritRadioSetPACwc(LOAD_3_6_PF);
   \   0000003E   0x20C0             MOVS     R0,#+192
   \   00000040   0x.... 0x....      BL       SpiritRadioSetPACwc
   \   00000044   0xE013             B.N      ??SpiritManagementWaCmdStrobeTx_3
    332              }
    333              else
    334              {
    335                if(spirit_version == SPIRIT_VERSION_3_0_D1 && s_nDesiredFrequency>=863000000 && s_nDesiredFrequency<=870000000) {
   \                     ??SpiritManagementWaCmdStrobeTx_2: (+1)
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2D03             CMP      R5,#+3
   \   0000004A   0xD10D             BNE.N    ??SpiritManagementWaCmdStrobeTx_4
   \   0000004C   0x....             LDR.N    R0,??DataTable6_20
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x....             LDR.N    R1,??DataTable6_23  ;; 0x337055c0
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD308             BCC.N    ??SpiritManagementWaCmdStrobeTx_4
   \   00000056   0x....             LDR.N    R0,??DataTable6_20
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x....             LDR.N    R1,??DataTable6_24  ;; 0x33db2581
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD203             BCS.N    ??SpiritManagementWaCmdStrobeTx_4
    336                  /* Optimal setting for Tx mode only */
    337                  SpiritRadioSetPACwc(LOAD_2_4_PF);
   \   00000060   0x2080             MOVS     R0,#+128
   \   00000062   0x.... 0x....      BL       SpiritRadioSetPACwc
   \   00000066   0xE002             B.N      ??SpiritManagementWaCmdStrobeTx_3
    338                }
    339                else {
    340                  /* Optimal setting for Tx mode only */
    341                  SpiritRadioSetPACwc(LOAD_0_PF);
   \                     ??SpiritManagementWaCmdStrobeTx_4: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       SpiritRadioSetPACwc
    342                }
    343              }
    344              
    345              uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
   \                     ??SpiritManagementWaCmdStrobeTx_3: (+1)
   \   0000006E   0x2011             MOVS     R0,#+17
   \   00000070   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000074   0xAA00             ADD      R2,SP,#+0
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x20A9             MOVS     R0,#+169
   \   0000007A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    346              tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
   \   0000007E   0x2020             MOVS     R0,#+32
   \   00000080   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000084   0xAA00             ADD      R2,SP,#+0
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x20A5             MOVS     R0,#+165
   \   0000008A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    347              
    348              s_cCommunicationState = COMMUNICATION_STATE_TX;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x....             LDR.N    R1,??DataTable6_19
   \   00000092   0x7008             STRB     R0,[R1, #+0]
    349            }
    350          }
   \                     ??SpiritManagementWaCmdStrobeTx_0: (+1)
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    351          
    352          

   \                                 In section .text, align 2, keep-with-next
    353          void SpiritManagementWaCmdStrobeRx(void)
    354          {
   \                     SpiritManagementWaCmdStrobeRx: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    355            if(s_cCommunicationState != COMMUNICATION_STATE_RX)
   \   00000002   0x....             LDR.N    R0,??DataTable6_19
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD021             BEQ.N    ??SpiritManagementWaCmdStrobeRx_0
    356            {
    357              uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
   \   0000000A   0x.... 0x....      BL       SpiritRadioGetXtalFrequency
   \   0000000E   0x0004             MOVS     R4,R0
    358              SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000010   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   00000014   0x0005             MOVS     R5,R0
    359              
    360              if(spirit_version == SPIRIT_VERSION_2_1 && xtal_frequency>26000000)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D01             CMP      R5,#+1
   \   0000001A   0xD10A             BNE.N    ??SpiritManagementWaCmdStrobeRx_1
   \   0000001C   0x....             LDR.N    R0,??DataTable6_16  ;; 0x18cba81
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD307             BCC.N    ??SpiritManagementWaCmdStrobeRx_1
    361              {
    362                SpiritManagementSetFrequencyBase(s_nDesiredFrequency+480300);
   \   00000022   0x....             LDR.N    R0,??DataTable6_20
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable6_17  ;; 0x7542c
   \   00000028   0x1808             ADDS     R0,R1,R0
   \   0000002A   0x.... 0x....      BL       SpiritManagementSetFrequencyBase
    363                SpiritManagementWaRxStartupInit();
   \   0000002E   0x.... 0x....      BL       SpiritManagementWaRxStartupInit
    364              }
    365              
    366              uint8_t tmp = 0x90; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
   \                     ??SpiritManagementWaCmdStrobeRx_1: (+1)
   \   00000032   0x2090             MOVS     R0,#+144
   \   00000034   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000038   0xAA00             ADD      R2,SP,#+0
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x20A5             MOVS     R0,#+165
   \   0000003E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    367              SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       SpiritRadioSetPACwc
    368              
    369              s_cCommunicationState = COMMUNICATION_STATE_RX;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable6_19
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    370            }
    371          }
   \                     ??SpiritManagementWaCmdStrobeRx_0: (+1)
   \   0000004E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    372          

   \                                 In section .text, align 2, keep-with-next
    373          void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
    374          {
    375            s_cCommunicationState = COMMUNICATION_STATE_NONE;
   \                     SpiritManagementWaTRxFcMem: (+1)
   \   00000000   0x2102             MOVS     R1,#+2
   \   00000002   0x....             LDR.N    R2,??DataTable6_19
   \   00000004   0x7011             STRB     R1,[R2, #+0]
    376            s_nDesiredFrequency = nDesiredFreq;
   \   00000006   0x....             LDR.N    R1,??DataTable6_20
   \   00000008   0x6008             STR      R0,[R1, #+0]
    377          }
   \   0000000A   0x4770             BX       LR               ;; return
    378          
    379          
    380          

   \                                 In section .text, align 2, keep-with-next
    381          void SpiritManagementWaRcoRangeExtCalibration(void)
    382          {
   \                     SpiritManagementWaRcoRangeExtCalibration: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    383            uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
   \   00000002   0x.... 0x....      BL       SpiritRadioGetXtalFrequency
   \   00000006   0x0004             MOVS     R4,R0
    384            SpiritVersion spirit_version = SpiritGeneralGetSpiritVersion();
   \   00000008   0x.... 0x....      BL       SpiritGeneralGetSpiritVersion
   \   0000000C   0x0005             MOVS     R5,R0
    385            
    386            if(spirit_version == SPIRIT_VERSION_2_1 && xtal_frequency<48000000)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xD120             BNE.N    ??SpiritManagementWaRcoRangeExtCalibration_0
   \   00000014   0x....             LDR.N    R0,??DataTable6_18  ;; 0x2dc6c00
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD21D             BCS.N    ??SpiritManagementWaRcoRangeExtCalibration_0
    387            {
    388              uint8_t tmp= 0x02;SpiritSpiWriteRegisters(0x50, 1, &tmp); 
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000020   0xAA00             ADD      R2,SP,#+0
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2050             MOVS     R0,#+80
   \   00000026   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    389              SpiritCmdStrobeStandby(); 
   \   0000002A   0x2063             MOVS     R0,#+99
   \   0000002C   0x.... 0x....      BL       SpiritCmdStrobeCommand
    390              tmp= 0x29;SpiritSpiWriteRegisters(0xB4, 1, &tmp); 
   \   00000030   0x2029             MOVS     R0,#+41
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x20B4             MOVS     R0,#+180
   \   0000003C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    391              tmp= 0x06;SpiritSpiWriteRegisters(0x50, 1, &tmp); 
   \   00000040   0x2006             MOVS     R0,#+6
   \   00000042   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000046   0xAA00             ADD      R2,SP,#+0
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2050             MOVS     R0,#+80
   \   0000004C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    392              SpiritCmdStrobeReady();
   \   00000050   0x2062             MOVS     R0,#+98
   \   00000052   0x.... 0x....      BL       SpiritCmdStrobeCommand
    393            }
    394          }
   \                     ??SpiritManagementWaRcoRangeExtCalibration_0: (+1)
   \   00000056   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x2E5F5680         DC32     0x2e5f5680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x390C2FE1         DC32     0x390c2fe1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x1701E480         DC32     0x1701e480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x1C146A61         DC32     0x1c146a61

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x11D260C0         DC32     0x11d260c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x14CED7E1         DC32     0x14ced7e1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x08E18F40         DC32     0x8e18f40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x0A6FD061         DC32     0xa6fd061

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x099CF4E2         DC32     0x99cf4e2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x1339E9C4         DC32     0x1339e9c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x19A28D06         DC32     0x19a28d06

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x33451A0B         DC32     0x33451a0b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     s_vectcBHalfFactor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x........         DC32     s_vectcBandRegValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x018CBA81         DC32     0x18cba81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x0007542C         DC32     0x7542c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x02DC6C00         DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     s_cCommunicationState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x........         DC32     s_nDesiredFrequency

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x08F0D180         DC32     0x8f0d180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x1C03A181         DC32     0x1c03a181

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x337055C0         DC32     0x337055c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x33DB2581         DC32     0x33db2581

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000048   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000050   0x5F 0x50          DC8 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H, 74H
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \   00000058   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000060   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000068   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000070   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 53H, 50H, 49H, 52H
   \              0x63 0x5C    
   \              0x53 0x50    
   \              0x49 0x52    
   \   00000078   0x49 0x54          DC8 49H, 54H, 5FH, 4DH, 61H, 6EH, 61H, 67H
   \              0x5F 0x4D    
   \              0x61 0x6E    
   \              0x61 0x67    
   \   00000080   0x65 0x6D          DC8 65H, 6DH, 65H, 6EH, 74H, 2EH, 63H, 0
   \              0x65 0x6E    
   \              0x74 0x2E    
   \              0x63 0x00    
    395          
    396          /**
    397          * @}
    398          */
    399          
    400          
    401          
    402          /**
    403          * @}
    404          */
    405          
    406          
    407          /**
    408          * @}
    409          */
    410          
    411          /**
    412          * @}
    413          */
    414          
    415          
    416          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   SpiritManagementSetFrequencyBase
        64   -> SdkEvalSpiWriteRegisters
        64   -> SpiritCalibrationSelectVco
        64   -> SpiritGeneralGetSpiritVersion
        64   -> SpiritRadioGetChannel
        64   -> SpiritRadioGetChannelSpace
        64   -> SpiritRadioGetFrequencyOffset
        64   -> SpiritRadioGetRefDiv
        64   -> SpiritRadioGetXtalFrequency
        64   -> SpiritRadioSearchWCP
        64   -> __aeabi_d2uiz
        64   -> __aeabi_ddiv
        64   -> __aeabi_dmul
        64   -> __aeabi_i2d
        64   -> __aeabi_ui2d
        64   -> s_assert_failed
      16   SpiritManagementWaCmdStrobeRx
        16   -> SdkEvalSpiWriteRegisters
        16   -> SpiritGeneralGetSpiritVersion
        16   -> SpiritManagementSetFrequencyBase
        16   -> SpiritManagementWaRxStartupInit
        16   -> SpiritRadioGetXtalFrequency
        16   -> SpiritRadioSetPACwc
      16   SpiritManagementWaCmdStrobeTx
        16   -> SdkEvalSpiWriteRegisters
        16   -> SpiritGeneralGetSpiritVersion
        16   -> SpiritManagementSetFrequencyBase
        16   -> SpiritRadioGetXtalFrequency
        16   -> SpiritRadioSetPACwc
      16   SpiritManagementWaRcoCalibration
        16   -> SdkEvalSpiWriteRegisters
        16   -> SpiritCmdStrobeCommand
        16   -> SpiritGeneralGetSpiritVersion
        16   -> SpiritRadioGetXtalFrequency
      16   SpiritManagementWaRcoRangeExtCalibration
        16   -> SdkEvalSpiWriteRegisters
        16   -> SpiritCmdStrobeCommand
        16   -> SpiritGeneralGetSpiritVersion
        16   -> SpiritRadioGetXtalFrequency
      16   SpiritManagementWaRxStartup
        16   -> SdkEvalSpiWriteRegisters
        16   -> SpiritGeneralGetSpiritVersion
      16   SpiritManagementWaRxStartupInit
        16   -> SdkEvalSpiWriteRegisters
        16   -> SpiritGeneralGetSpiritVersion
       0   SpiritManagementWaTRxFcMem
      40   SpiritManagementWaVcoCalibration
        40   -> SdkEvalSpiWriteRegisters
        40   -> SpiritCalibrationGetVcoCalData
        40   -> SpiritCalibrationSetVcoCalDataRx
        40   -> SpiritCalibrationSetVcoCalDataTx
        40   -> SpiritCalibrationVco
        40   -> SpiritCmdStrobeCommand
        40   -> SpiritGeneralGetSpiritVersion
        40   -> SpiritManagementSetFrequencyBase
        40   -> SpiritRadioGetFrequencyBase
        40   -> SpiritRadioGetRefDiv
        40   -> SpiritRadioGetXtalFrequency
        40   -> SpiritRadioSetRefDiv
        40   -> SpiritRefreshStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     136  ?_0
     506  SpiritManagementSetFrequencyBase
      80  SpiritManagementWaCmdStrobeRx
     150  SpiritManagementWaCmdStrobeTx
      88  SpiritManagementWaRcoCalibration
      88  SpiritManagementWaRcoRangeExtCalibration
      66  SpiritManagementWaRxStartup
      66  SpiritManagementWaRxStartupInit
      12  SpiritManagementWaTRxFcMem
     362  SpiritManagementWaVcoCalibration
       1  s_cCommunicationState
       4  s_nDesiredFrequency
       4  s_vectcBHalfFactor
       4  s_vectcBandRegValue

 
     4 bytes in section .bss
     1 byte  in section .data
   144 bytes in section .rodata
 1 518 bytes in section .text
 
 1 518 bytes of CODE  memory
   144 bytes of CONST memory
     5 bytes of DATA  memory

Errors: none
Warnings: none
