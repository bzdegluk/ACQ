###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:41
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktBasic.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktBasic.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_PktBasic.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_PktBasic.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktBasic.c
      1          /**
      2           * @file    SPIRIT_PktBasic.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT Basic packets.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_PktBasic.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          /**
     30           * @addtogroup SPIRIT_Libraries
     31           * @{
     32           */
     33          
     34          
     35          /**
     36           * @addtogroup SPIRIT_PktBasic
     37           * @{
     38           */
     39          
     40          
     41          /**
     42           * @defgroup PktBasic_Private_TypesDefinitions  Pkt Basic Private Types Definitions
     43           * @{
     44           */
     45          
     46          /**
     47           *@}
     48           */
     49          
     50          
     51          /**
     52           * @defgroup PktBasic_Private_Defines           Pkt Basic Private Defines
     53           * @{
     54           */
     55          
     56          /**
     57           *@}
     58           */
     59          
     60          
     61          /**
     62           * @defgroup PktBasic_Private_Macros            Pkt Basic Private Macros
     63           * @{
     64           */
     65          
     66          /**
     67           *@}
     68           */
     69          
     70          
     71          /**
     72           * @defgroup PktBasic_Private_Variables          Pkt Basic Private Variables
     73           * @{
     74           */
     75          
     76          /**
     77           *@}
     78           */
     79          
     80          
     81          
     82          /**
     83           * @defgroup PktBasic_Private_FunctionPrototypes        Pkt Basic Private Function Prototypes
     84           * @{
     85           */
     86          
     87          /**
     88           *@}
     89           */
     90          
     91          
     92          /**
     93           * @defgroup PktBasic_Private_Functions                 Pkt Basic Private Functions
     94           * @{
     95           */
     96          
     97          /**
     98           * @brief  Initializes the SPIRIT Basic packet according to the specified parameters in the PktBasicInit struct.
     99           *         Notice that this function sets the autofiltering option on CRC if it is set to any value different from BASIC_NO_CRC.
    100           * @param  pxPktBasicInit Basic packet init structure.
    101           *         This parameter is a pointer to @ref PktBasicInit.
    102           * @retval None.
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
    105          {
   \                     SpiritPktBasicInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    106            uint8_t tempRegValue[4], i;
    107          
    108            /* Check the parameters */
    109            s_assert_param(IS_BASIC_PREAMBLE_LENGTH(pxPktBasicInit->xPreambleLength));
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD061             BEQ.N    ??SpiritPktBasicInit_0
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2808             CMP      R0,#+8
   \   00000010   0xD05E             BEQ.N    ??SpiritPktBasicInit_0
   \   00000012   0x7820             LDRB     R0,[R4, #+0]
   \   00000014   0x2810             CMP      R0,#+16
   \   00000016   0xD05B             BEQ.N    ??SpiritPktBasicInit_0
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x2818             CMP      R0,#+24
   \   0000001C   0xD058             BEQ.N    ??SpiritPktBasicInit_0
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x2820             CMP      R0,#+32
   \   00000022   0xD055             BEQ.N    ??SpiritPktBasicInit_0
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD052             BEQ.N    ??SpiritPktBasicInit_0
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x2830             CMP      R0,#+48
   \   0000002E   0xD04F             BEQ.N    ??SpiritPktBasicInit_0
   \   00000030   0x7820             LDRB     R0,[R4, #+0]
   \   00000032   0x2838             CMP      R0,#+56
   \   00000034   0xD04C             BEQ.N    ??SpiritPktBasicInit_0
   \   00000036   0x7820             LDRB     R0,[R4, #+0]
   \   00000038   0x2840             CMP      R0,#+64
   \   0000003A   0xD049             BEQ.N    ??SpiritPktBasicInit_0
   \   0000003C   0x7820             LDRB     R0,[R4, #+0]
   \   0000003E   0x2848             CMP      R0,#+72
   \   00000040   0xD046             BEQ.N    ??SpiritPktBasicInit_0
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0x2850             CMP      R0,#+80
   \   00000046   0xD043             BEQ.N    ??SpiritPktBasicInit_0
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x2858             CMP      R0,#+88
   \   0000004C   0xD040             BEQ.N    ??SpiritPktBasicInit_0
   \   0000004E   0x7820             LDRB     R0,[R4, #+0]
   \   00000050   0x2860             CMP      R0,#+96
   \   00000052   0xD03D             BEQ.N    ??SpiritPktBasicInit_0
   \   00000054   0x7820             LDRB     R0,[R4, #+0]
   \   00000056   0x2868             CMP      R0,#+104
   \   00000058   0xD03A             BEQ.N    ??SpiritPktBasicInit_0
   \   0000005A   0x7820             LDRB     R0,[R4, #+0]
   \   0000005C   0x2870             CMP      R0,#+112
   \   0000005E   0xD037             BEQ.N    ??SpiritPktBasicInit_0
   \   00000060   0x7820             LDRB     R0,[R4, #+0]
   \   00000062   0x2878             CMP      R0,#+120
   \   00000064   0xD034             BEQ.N    ??SpiritPktBasicInit_0
   \   00000066   0x7820             LDRB     R0,[R4, #+0]
   \   00000068   0x2880             CMP      R0,#+128
   \   0000006A   0xD031             BEQ.N    ??SpiritPktBasicInit_0
   \   0000006C   0x7820             LDRB     R0,[R4, #+0]
   \   0000006E   0x2888             CMP      R0,#+136
   \   00000070   0xD02E             BEQ.N    ??SpiritPktBasicInit_0
   \   00000072   0x7820             LDRB     R0,[R4, #+0]
   \   00000074   0x2890             CMP      R0,#+144
   \   00000076   0xD02B             BEQ.N    ??SpiritPktBasicInit_0
   \   00000078   0x7820             LDRB     R0,[R4, #+0]
   \   0000007A   0x2898             CMP      R0,#+152
   \   0000007C   0xD028             BEQ.N    ??SpiritPktBasicInit_0
   \   0000007E   0x7820             LDRB     R0,[R4, #+0]
   \   00000080   0x28A0             CMP      R0,#+160
   \   00000082   0xD025             BEQ.N    ??SpiritPktBasicInit_0
   \   00000084   0x7820             LDRB     R0,[R4, #+0]
   \   00000086   0x28A8             CMP      R0,#+168
   \   00000088   0xD022             BEQ.N    ??SpiritPktBasicInit_0
   \   0000008A   0x7820             LDRB     R0,[R4, #+0]
   \   0000008C   0x28B0             CMP      R0,#+176
   \   0000008E   0xD01F             BEQ.N    ??SpiritPktBasicInit_0
   \   00000090   0x7820             LDRB     R0,[R4, #+0]
   \   00000092   0x28B8             CMP      R0,#+184
   \   00000094   0xD01C             BEQ.N    ??SpiritPktBasicInit_0
   \   00000096   0x7820             LDRB     R0,[R4, #+0]
   \   00000098   0x28C0             CMP      R0,#+192
   \   0000009A   0xD019             BEQ.N    ??SpiritPktBasicInit_0
   \   0000009C   0x7820             LDRB     R0,[R4, #+0]
   \   0000009E   0x28C8             CMP      R0,#+200
   \   000000A0   0xD016             BEQ.N    ??SpiritPktBasicInit_0
   \   000000A2   0x7820             LDRB     R0,[R4, #+0]
   \   000000A4   0x28D0             CMP      R0,#+208
   \   000000A6   0xD013             BEQ.N    ??SpiritPktBasicInit_0
   \   000000A8   0x7820             LDRB     R0,[R4, #+0]
   \   000000AA   0x28D8             CMP      R0,#+216
   \   000000AC   0xD010             BEQ.N    ??SpiritPktBasicInit_0
   \   000000AE   0x7820             LDRB     R0,[R4, #+0]
   \   000000B0   0x28E0             CMP      R0,#+224
   \   000000B2   0xD00D             BEQ.N    ??SpiritPktBasicInit_0
   \   000000B4   0x7820             LDRB     R0,[R4, #+0]
   \   000000B6   0x28E8             CMP      R0,#+232
   \   000000B8   0xD00A             BEQ.N    ??SpiritPktBasicInit_0
   \   000000BA   0x7820             LDRB     R0,[R4, #+0]
   \   000000BC   0x28F0             CMP      R0,#+240
   \   000000BE   0xD007             BEQ.N    ??SpiritPktBasicInit_0
   \   000000C0   0x7820             LDRB     R0,[R4, #+0]
   \   000000C2   0x28F8             CMP      R0,#+248
   \   000000C4   0xD004             BEQ.N    ??SpiritPktBasicInit_0
   \   000000C6   0x216D             MOVS     R1,#+109
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable10
   \   000000CC   0x.... 0x....      BL       s_assert_failed
    110            s_assert_param(IS_BASIC_SYNC_LENGTH(pxPktBasicInit->xSyncLength));
   \                     ??SpiritPktBasicInit_0: (+1)
   \   000000D0   0x7860             LDRB     R0,[R4, #+1]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD00D             BEQ.N    ??SpiritPktBasicInit_1
   \   000000D6   0x7860             LDRB     R0,[R4, #+1]
   \   000000D8   0x2802             CMP      R0,#+2
   \   000000DA   0xD00A             BEQ.N    ??SpiritPktBasicInit_1
   \   000000DC   0x7860             LDRB     R0,[R4, #+1]
   \   000000DE   0x2804             CMP      R0,#+4
   \   000000E0   0xD007             BEQ.N    ??SpiritPktBasicInit_1
   \   000000E2   0x7860             LDRB     R0,[R4, #+1]
   \   000000E4   0x2806             CMP      R0,#+6
   \   000000E6   0xD004             BEQ.N    ??SpiritPktBasicInit_1
   \   000000E8   0x216E             MOVS     R1,#+110
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable10
   \   000000EE   0x.... 0x....      BL       s_assert_failed
    111            s_assert_param(IS_BASIC_CRC_MODE(pxPktBasicInit->xCrcMode));
   \                     ??SpiritPktBasicInit_1: (+1)
   \   000000F2   0x7AA0             LDRB     R0,[R4, #+10]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD010             BEQ.N    ??SpiritPktBasicInit_2
   \   000000F8   0x7AA0             LDRB     R0,[R4, #+10]
   \   000000FA   0x2820             CMP      R0,#+32
   \   000000FC   0xD00D             BEQ.N    ??SpiritPktBasicInit_2
   \   000000FE   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000100   0x2840             CMP      R0,#+64
   \   00000102   0xD00A             BEQ.N    ??SpiritPktBasicInit_2
   \   00000104   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000106   0x2860             CMP      R0,#+96
   \   00000108   0xD007             BEQ.N    ??SpiritPktBasicInit_2
   \   0000010A   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000010C   0x2880             CMP      R0,#+128
   \   0000010E   0xD004             BEQ.N    ??SpiritPktBasicInit_2
   \   00000110   0x216F             MOVS     R1,#+111
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000116   0x.... 0x....      BL       s_assert_failed
    112            s_assert_param(IS_BASIC_LENGTH_WIDTH_BITS(pxPktBasicInit->cPktLengthWidth));
   \                     ??SpiritPktBasicInit_2: (+1)
   \   0000011A   0x7A60             LDRB     R0,[R4, #+9]
   \   0000011C   0x2811             CMP      R0,#+17
   \   0000011E   0xDB04             BLT.N    ??SpiritPktBasicInit_3
   \   00000120   0x2170             MOVS     R1,#+112
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000126   0x.... 0x....      BL       s_assert_failed
    113            s_assert_param(IS_BASIC_FIX_VAR_LENGTH(pxPktBasicInit->xFixVarLength));
   \                     ??SpiritPktBasicInit_3: (+1)
   \   0000012A   0x7A20             LDRB     R0,[R4, #+8]
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD007             BEQ.N    ??SpiritPktBasicInit_4
   \   00000130   0x7A20             LDRB     R0,[R4, #+8]
   \   00000132   0x2801             CMP      R0,#+1
   \   00000134   0xD004             BEQ.N    ??SpiritPktBasicInit_4
   \   00000136   0x2171             MOVS     R1,#+113
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable10
   \   0000013C   0x.... 0x....      BL       s_assert_failed
    114            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xAddressField));
   \                     ??SpiritPktBasicInit_4: (+1)
   \   00000140   0x7B20             LDRB     R0,[R4, #+12]
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD007             BEQ.N    ??SpiritPktBasicInit_5
   \   00000146   0x7B20             LDRB     R0,[R4, #+12]
   \   00000148   0x2801             CMP      R0,#+1
   \   0000014A   0xD004             BEQ.N    ??SpiritPktBasicInit_5
   \   0000014C   0x2172             MOVS     R1,#+114
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000152   0x.... 0x....      BL       s_assert_failed
    115            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
   \                     ??SpiritPktBasicInit_5: (+1)
   \   00000156   0x7B60             LDRB     R0,[R4, #+13]
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD007             BEQ.N    ??SpiritPktBasicInit_6
   \   0000015C   0x7B60             LDRB     R0,[R4, #+13]
   \   0000015E   0x2801             CMP      R0,#+1
   \   00000160   0xD004             BEQ.N    ??SpiritPktBasicInit_6
   \   00000162   0x2173             MOVS     R1,#+115
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000168   0x.... 0x....      BL       s_assert_failed
    116            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
   \                     ??SpiritPktBasicInit_6: (+1)
   \   0000016C   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD007             BEQ.N    ??SpiritPktBasicInit_7
   \   00000172   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000174   0x2801             CMP      R0,#+1
   \   00000176   0xD004             BEQ.N    ??SpiritPktBasicInit_7
   \   00000178   0x2174             MOVS     R1,#+116
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable10
   \   0000017E   0x.... 0x....      BL       s_assert_failed
    117            s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));
   \                     ??SpiritPktBasicInit_7: (+1)
   \   00000182   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD010             BEQ.N    ??SpiritPktBasicInit_8
   \   00000188   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000018A   0x2801             CMP      R0,#+1
   \   0000018C   0xD00D             BEQ.N    ??SpiritPktBasicInit_8
   \   0000018E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000190   0x2802             CMP      R0,#+2
   \   00000192   0xD00A             BEQ.N    ??SpiritPktBasicInit_8
   \   00000194   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000196   0x2803             CMP      R0,#+3
   \   00000198   0xD007             BEQ.N    ??SpiritPktBasicInit_8
   \   0000019A   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000019C   0x2804             CMP      R0,#+4
   \   0000019E   0xD004             BEQ.N    ??SpiritPktBasicInit_8
   \   000001A0   0x2175             MOVS     R1,#+117
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable10
   \   000001A6   0x.... 0x....      BL       s_assert_failed
    118          
    119            /* Reads the PROTOCOL1 register */
    120            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
   \                     ??SpiritPktBasicInit_8: (+1)
   \   000001AA   0xAA00             ADD      R2,SP,#+0
   \   000001AC   0x2101             MOVS     R1,#+1
   \   000001AE   0x2051             MOVS     R0,#+81
   \   000001B0   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000001B4   0x9001             STR      R0,[SP, #+4]
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   000001BA   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000001BE   0x8001             STRH     R1,[R0, #+0]
    121          
    122            /* Mask a reserved bit */
    123            tempRegValue[0] &= ~0x20;
   \   000001C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001C4   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000001C8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    124          
    125            /* Always set the automatic packet filtering */
    126            tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
   \   000001CC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001D0   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001D4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    127          
    128            /* Writes the value on register */
    129            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
   \   000001D8   0xAA00             ADD      R2,SP,#+0
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0x2051             MOVS     R0,#+81
   \   000001DE   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000001E2   0x9001             STR      R0,[SP, #+4]
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   000001E8   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000001EC   0x8001             STRH     R1,[R0, #+0]
    130          
    131            /* Reads the PCKT_FLT_OPTIONS register */
    132            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \   000001EE   0xAA00             ADD      R2,SP,#+0
   \   000001F0   0x2101             MOVS     R1,#+1
   \   000001F2   0x204F             MOVS     R0,#+79
   \   000001F4   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000001F8   0x9001             STR      R0,[SP, #+4]
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   000001FE   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000202   0x8001             STRH     R1,[R0, #+0]
    133          
    134            /* Always reset the control and source filtering (also if it is not present in basic) */
    135            tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
   \   00000204   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000208   0xF010 0x00CF      ANDS     R0,R0,#0xCF
   \   0000020C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    136          
    137            /* Writes the value on register */
    138            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \   00000210   0xAA00             ADD      R2,SP,#+0
   \   00000212   0x2101             MOVS     R1,#+1
   \   00000214   0x204F             MOVS     R0,#+79
   \   00000216   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000021A   0x9001             STR      R0,[SP, #+4]
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000220   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000224   0x8001             STRH     R1,[R0, #+0]
    139          
    140            if(pxPktBasicInit->xAddressField == S_ENABLE)
   \   00000226   0x7B20             LDRB     R0,[R4, #+12]
   \   00000228   0x2801             CMP      R0,#+1
   \   0000022A   0xD103             BNE.N    ??SpiritPktBasicInit_9
    141            {
    142              tempRegValue[0]=0x08;
   \   0000022C   0x2008             MOVS     R0,#+8
   \   0000022E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000232   0xE002             B.N      ??SpiritPktBasicInit_10
    143            }
    144            else
    145            {
    146              tempRegValue[0]=0x00;
   \                     ??SpiritPktBasicInit_9: (+1)
   \   00000234   0x2000             MOVS     R0,#+0
   \   00000236   0xF88D 0x0000      STRB     R0,[SP, #+0]
    147            }
    148            /* Address and control length setting */
    149            tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
   \                     ??SpiritPktBasicInit_10: (+1)
   \   0000023A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000023E   0x7AE1             LDRB     R1,[R4, #+11]
   \   00000240   0x4308             ORRS     R0,R1,R0
   \   00000242   0xF88D 0x0000      STRB     R0,[SP, #+0]
    150          
    151            /* Packet format and width length setting */
    152            pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
   \   00000246   0x7A60             LDRB     R0,[R4, #+9]
   \   00000248   0x2800             CMP      R0,#+0
   \   0000024A   0xD103             BNE.N    ??SpiritPktBasicInit_11
   \   0000024C   0x2001             MOVS     R0,#+1
   \   0000024E   0x7260             STRB     R0,[R4, #+9]
   \   00000250   0x7A60             LDRB     R0,[R4, #+9]
   \   00000252   0xE000             B.N      ??SpiritPktBasicInit_12
   \                     ??SpiritPktBasicInit_11: (+1)
   \   00000254   0x7A60             LDRB     R0,[R4, #+9]
    153            tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
   \                     ??SpiritPktBasicInit_12: (+1)
   \   00000256   0x7A60             LDRB     R0,[R4, #+9]
   \   00000258   0x1E40             SUBS     R0,R0,#+1
   \   0000025A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    154          
    155            /* Preamble, sync and fixed or variable length setting */
    156            tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
    157                              ((uint8_t) pxPktBasicInit->xFixVarLength);
   \   0000025E   0x7820             LDRB     R0,[R4, #+0]
   \   00000260   0x7861             LDRB     R1,[R4, #+1]
   \   00000262   0x4308             ORRS     R0,R1,R0
   \   00000264   0x7A21             LDRB     R1,[R4, #+8]
   \   00000266   0x4308             ORRS     R0,R1,R0
   \   00000268   0xF88D 0x0002      STRB     R0,[SP, #+2]
    158          
    159            /* CRC length, whitening and FEC setting */
    160            tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
   \   0000026C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000026E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    161          
    162            if(pxPktBasicInit->xDataWhitening == S_ENABLE)
   \   00000272   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000274   0x2801             CMP      R0,#+1
   \   00000276   0xD105             BNE.N    ??SpiritPktBasicInit_13
    163            {
    164               tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
   \   00000278   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000027C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000280   0xF88D 0x0003      STRB     R0,[SP, #+3]
    165            }
    166          
    167            if(pxPktBasicInit->xFec == S_ENABLE)
   \                     ??SpiritPktBasicInit_13: (+1)
   \   00000284   0x7B60             LDRB     R0,[R4, #+13]
   \   00000286   0x2801             CMP      R0,#+1
   \   00000288   0xD105             BNE.N    ??SpiritPktBasicInit_14
    168            {
    169               tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
   \   0000028A   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000028E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000292   0xF88D 0x0003      STRB     R0,[SP, #+3]
    170            }
    171          
    172            /* Writes registers */
    173            SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
   \                     ??SpiritPktBasicInit_14: (+1)
   \   00000296   0xAA00             ADD      R2,SP,#+0
   \   00000298   0x2104             MOVS     R1,#+4
   \   0000029A   0x2030             MOVS     R0,#+48
   \   0000029C   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    174          
    175            /* Sync words setting */
    176            for(i=0;i<4;i++)
   \   000002A0   0x2000             MOVS     R0,#+0
   \   000002A2   0x0005             MOVS     R5,R0
   \                     ??SpiritPktBasicInit_15: (+1)
   \   000002A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002A6   0x2D04             CMP      R5,#+4
   \   000002A8   0xDA17             BGE.N    ??SpiritPktBasicInit_16
    177            {
    178              if(i<3-(pxPktBasicInit->xSyncLength >>1))
   \   000002AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002AC   0x7860             LDRB     R0,[R4, #+1]
   \   000002AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002B0   0x0840             LSRS     R0,R0,#+1
   \   000002B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002B4   0xF1D0 0x0003      RSBS     R0,R0,#+3
   \   000002B8   0x4285             CMP      R5,R0
   \   000002BA   0xDA04             BGE.N    ??SpiritPktBasicInit_17
    179              {
    180                tempRegValue[i]=0;
   \   000002BC   0x2000             MOVS     R0,#+0
   \   000002BE   0xA900             ADD      R1,SP,#+0
   \   000002C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002C2   0x5468             STRB     R0,[R5, R1]
   \   000002C4   0xE007             B.N      ??SpiritPktBasicInit_18
    181              }
    182              else
    183              {
    184                tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
   \                     ??SpiritPktBasicInit_17: (+1)
   \   000002C6   0x6860             LDR      R0,[R4, #+4]
   \   000002C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002CA   0x00E9             LSLS     R1,R5,#+3
   \   000002CC   0x0002             MOVS     R2,R0
   \   000002CE   0x40CA             LSRS     R2,R2,R1
   \   000002D0   0xA800             ADD      R0,SP,#+0
   \   000002D2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002D4   0x542A             STRB     R2,[R5, R0]
    185              }
    186            }
   \                     ??SpiritPktBasicInit_18: (+1)
   \   000002D6   0x1C6D             ADDS     R5,R5,#+1
   \   000002D8   0xE7E4             B.N      ??SpiritPktBasicInit_15
    187          
    188            /* Sets CRC check bit */
    189            if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
   \                     ??SpiritPktBasicInit_16: (+1)
   \   000002DA   0x7AA0             LDRB     R0,[R4, #+10]
   \   000002DC   0x2800             CMP      R0,#+0
   \   000002DE   0xD103             BNE.N    ??SpiritPktBasicInit_19
    190            {
    191              SpiritPktBasicFilterOnCrc(S_DISABLE);
   \   000002E0   0x2000             MOVS     R0,#+0
   \   000002E2   0x.... 0x....      BL       SpiritPktCommonFilterOnCrc
   \   000002E6   0xE002             B.N      ??SpiritPktBasicInit_20
    192            }
    193            else
    194            {
    195              SpiritPktBasicFilterOnCrc(S_ENABLE);
   \                     ??SpiritPktBasicInit_19: (+1)
   \   000002E8   0x2001             MOVS     R0,#+1
   \   000002EA   0x.... 0x....      BL       SpiritPktCommonFilterOnCrc
    196            }
    197          
    198            
    199            g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
   \                     ??SpiritPktBasicInit_20: (+1)
   \   000002EE   0xAA00             ADD      R2,SP,#+0
   \   000002F0   0x2104             MOVS     R1,#+4
   \   000002F2   0x2036             MOVS     R0,#+54
   \   000002F4   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000002F8   0x9001             STR      R0,[SP, #+4]
   \   000002FA   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   000002FE   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000302   0x8001             STRH     R1,[R0, #+0]
    200          
    201          }
   \   00000304   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    202          
    203          
    204          /**
    205           * @brief  Returns the SPIRIT Basic packet structure according to the specified parameters in the registers.
    206           * @param  pxPktBasicInit Basic packet init structure.
    207           *         This parameter is a pointer to @ref PktBasicInit.
    208           * @retval None.
    209           */

   \                                 In section .text, align 2, keep-with-next
    210          void SpiritPktBasicGetInfo(PktBasicInit* pxPktBasicInit)
    211          {
   \                     SpiritPktBasicGetInfo: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    212            uint8_t tempRegValue[10];
    213          
    214            /* Reads registers */
    215            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 10, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x210A             MOVS     R1,#+10
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9003             STR      R0,[SP, #+12]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00000014   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    216          
    217            /* Length width */
    218            pxPktBasicInit->cPktLengthWidth=(tempRegValue[1] & 0x0F)+1;
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x7260             STRB     R0,[R4, #+9]
    219          
    220            /* Address field */
    221            pxPktBasicInit->xAddressField=(SpiritFunctionalState)((tempRegValue[0]>>3) & 0x01);
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   0000002E   0x7320             STRB     R0,[R4, #+12]
    222          
    223            /* Control length */
    224            pxPktBasicInit->xControlLength=(BasicControlLength)(tempRegValue[0] & 0x07);
   \   00000030   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000034   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000038   0x72E0             STRB     R0,[R4, #+11]
    225          
    226            /* CRC mode */
    227            pxPktBasicInit->xCrcMode=(BasicCrcMode)(tempRegValue[3] & 0xE0);
   \   0000003A   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000003E   0xF010 0x00E0      ANDS     R0,R0,#0xE0
   \   00000042   0x72A0             STRB     R0,[R4, #+10]
    228          
    229            /* Whitening */
    230            pxPktBasicInit->xDataWhitening=(SpiritFunctionalState)((tempRegValue[3] >> 4) & 0x01);
   \   00000044   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000048   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   0000004C   0x73A0             STRB     R0,[R4, #+14]
    231          
    232            /* FEC */
    233            pxPktBasicInit->xFec=(SpiritFunctionalState)(tempRegValue[3] & 0x01);
   \   0000004E   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000052   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000056   0x7360             STRB     R0,[R4, #+13]
    234          
    235            /* FIX or VAR bit */
    236            pxPktBasicInit->xFixVarLength=(BasicFixVarLength)(tempRegValue[2] & 0x01);
   \   00000058   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000005C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000060   0x7220             STRB     R0,[R4, #+8]
    237          
    238            /* Preamble length */
    239            pxPktBasicInit->xPreambleLength=(BasicPreambleLength)(tempRegValue[2] & 0xF8);
   \   00000062   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000066   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000006A   0x7020             STRB     R0,[R4, #+0]
    240          
    241            /* Sync length */
    242            pxPktBasicInit->xSyncLength=(BasicSyncLength)(tempRegValue[2] & 0x06);
   \   0000006C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000070   0xF010 0x0006      ANDS     R0,R0,#0x6
   \   00000074   0x7060             STRB     R0,[R4, #+1]
    243          
    244            /* sync Words */
    245            pxPktBasicInit->lSyncWords=0;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x6060             STR      R0,[R4, #+4]
    246            for(uint8_t i=0 ; i<4 ; i++)
   \   0000007A   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktBasicGetInfo_0: (+1)
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x2804             CMP      R0,#+4
   \   00000080   0xDA14             BGE.N    ??SpiritPktBasicGetInfo_1
    247            {
    248                if(i>2-(pxPktBasicInit->xSyncLength >>1))
   \   00000082   0x7861             LDRB     R1,[R4, #+1]
   \   00000084   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000086   0x0849             LSRS     R1,R1,#+1
   \   00000088   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008A   0xF1D1 0x0102      RSBS     R1,R1,#+2
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x4281             CMP      R1,R0
   \   00000092   0xDA09             BGE.N    ??SpiritPktBasicGetInfo_2
    249                {
    250                  pxPktBasicInit->lSyncWords |= (uint32_t)(tempRegValue[i+6])<<(8*i);
   \   00000094   0x6861             LDR      R1,[R4, #+4]
   \   00000096   0xAA00             ADD      R2,SP,#+0
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x1882             ADDS     R2,R0,R2
   \   0000009C   0x7992             LDRB     R2,[R2, #+6]
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0x00C3             LSLS     R3,R0,#+3
   \   000000A2   0x409A             LSLS     R2,R2,R3
   \   000000A4   0x4311             ORRS     R1,R2,R1
   \   000000A6   0x6061             STR      R1,[R4, #+4]
    251                }
    252            }
   \                     ??SpiritPktBasicGetInfo_2: (+1)
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0xE7E7             B.N      ??SpiritPktBasicGetInfo_0
    253          
    254          }
   \                     ??SpiritPktBasicGetInfo_1: (+1)
   \   000000AC   0xBD1F             POP      {R0-R4,PC}       ;; return
    255          
    256          
    257          /**
    258           * @brief  Initializes the SPIRIT Basic packet addresses according to the specified
    259           *         parameters in the PktBasicAddressesInit struct.
    260           * @param  pxPktBasicAddresses Basic packet addresses init structure.
    261           *         This parameter is a pointer to @ref PktBasicAddresses.
    262           * @retval None.
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
    265          {
   \                     SpiritPktBasicAddressesInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    266            uint8_t tempRegValue[3];
    267          
    268            /* Check the parameters */
    269            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMyAddress));
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktBasicAddressesInit_0
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktBasicAddressesInit_0
   \   00000010   0xF240 0x110D      MOVW     R1,#+269
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000018   0x.... 0x....      BL       s_assert_failed
    270            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
   \                     ??SpiritPktBasicAddressesInit_0: (+1)
   \   0000001C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD008             BEQ.N    ??SpiritPktBasicAddressesInit_1
   \   00000022   0x78A0             LDRB     R0,[R4, #+2]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD005             BEQ.N    ??SpiritPktBasicAddressesInit_1
   \   00000028   0xF44F 0x7187      MOV      R1,#+270
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000030   0x.... 0x....      BL       s_assert_failed
    271            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));
   \                     ??SpiritPktBasicAddressesInit_1: (+1)
   \   00000034   0x7920             LDRB     R0,[R4, #+4]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD008             BEQ.N    ??SpiritPktBasicAddressesInit_2
   \   0000003A   0x7920             LDRB     R0,[R4, #+4]
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD005             BEQ.N    ??SpiritPktBasicAddressesInit_2
   \   00000040   0xF240 0x110F      MOVW     R1,#+271
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable10
   \   00000048   0x.... 0x....      BL       s_assert_failed
    272          
    273          
    274            /* Reads the PCKT_FLT_OPTIONS ragister */
    275            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \                     ??SpiritPktBasicAddressesInit_2: (+1)
   \   0000004C   0xAA00             ADD      R2,SP,#+0
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x204F             MOVS     R0,#+79
   \   00000052   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    276            
    277            /* Enables or disables filtering on my address */
    278            if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
   \   00000062   0x7820             LDRB     R0,[R4, #+0]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD106             BNE.N    ??SpiritPktBasicAddressesInit_3
    279            {
    280              tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
   \   00000068   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000070   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000074   0xE005             B.N      ??SpiritPktBasicAddressesInit_4
    281            }
    282            else
    283            {
    284              tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
   \                     ??SpiritPktBasicAddressesInit_3: (+1)
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000007E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    285            }
    286            
    287            /* Enables or disables filtering on multicast address */
    288            if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
   \                     ??SpiritPktBasicAddressesInit_4: (+1)
   \   00000082   0x78A0             LDRB     R0,[R4, #+2]
   \   00000084   0x2801             CMP      R0,#+1
   \   00000086   0xD106             BNE.N    ??SpiritPktBasicAddressesInit_5
    289            {
    290              tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
   \   00000088   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000090   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000094   0xE005             B.N      ??SpiritPktBasicAddressesInit_6
    291            }
    292            else
    293            {
    294              tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
   \                     ??SpiritPktBasicAddressesInit_5: (+1)
   \   00000096   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009A   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000009E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    295            }
    296            
    297            /* Enables or disables filtering on broadcast address */
    298            if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
   \                     ??SpiritPktBasicAddressesInit_6: (+1)
   \   000000A2   0x7920             LDRB     R0,[R4, #+4]
   \   000000A4   0x2801             CMP      R0,#+1
   \   000000A6   0xD106             BNE.N    ??SpiritPktBasicAddressesInit_7
    299            {
    300              tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
   \   000000A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AC   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000B0   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000B4   0xE005             B.N      ??SpiritPktBasicAddressesInit_8
    301            }
    302            else
    303            {
    304              tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
   \                     ??SpiritPktBasicAddressesInit_7: (+1)
   \   000000B6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000BA   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000BE   0xF88D 0x0000      STRB     R0,[SP, #+0]
    305            }
    306            
    307            /* Writes the new value on the PCKT_FLT_OPTIONS register */
    308            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \                     ??SpiritPktBasicAddressesInit_8: (+1)
   \   000000C2   0xAA00             ADD      R2,SP,#+0
   \   000000C4   0x2101             MOVS     R1,#+1
   \   000000C6   0x204F             MOVS     R0,#+79
   \   000000C8   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000CC   0x9001             STR      R0,[SP, #+4]
   \   000000CE   0x....             LDR.N    R0,??DataTable10_1
   \   000000D0   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000D4   0x8001             STRH     R1,[R0, #+0]
    309            
    310            /* Fills the array with the addresses passed in the structure */
    311            tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
   \   000000D6   0x7960             LDRB     R0,[R4, #+5]
   \   000000D8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    312            tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
   \   000000DC   0x78E0             LDRB     R0,[R4, #+3]
   \   000000DE   0xF88D 0x0001      STRB     R0,[SP, #+1]
    313            tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
   \   000000E2   0x7860             LDRB     R0,[R4, #+1]
   \   000000E4   0xF88D 0x0002      STRB     R0,[SP, #+2]
    314            
    315            /* Writes values on the PCKT_FLT_GOALS registers */
    316            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
   \   000000E8   0xAA00             ADD      R2,SP,#+0
   \   000000EA   0x2103             MOVS     R1,#+3
   \   000000EC   0x204C             MOVS     R0,#+76
   \   000000EE   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000F2   0x9001             STR      R0,[SP, #+4]
   \   000000F4   0x....             LDR.N    R0,??DataTable10_1
   \   000000F6   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000FA   0x8001             STRH     R1,[R0, #+0]
    317            
    318            
    319          }
   \   000000FC   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    320          
    321          
    322          /**
    323           * @brief  Returns the SPIRIT Basic packet addresses structure according to the specified
    324           *         parameters in the registers.
    325           * @param  pxPktBasicAddresses Basic packet addresses init structure.
    326           *         This parameter is a pointer to @ref PktBasicAddresses.
    327           * @retval None.
    328           */

   \                                 In section .text, align 2, keep-with-next
    329          void SpiritPktBasicGetAddressesInfo(PktBasicAddressesInit* pxPktBasicAddresses)
    330          {
   \                     SpiritPktBasicGetAddressesInfo: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    331            uint8_t tempRegValue[3];
    332          
    333            /* Reads values on the PCKT_FLT_GOALS registers */
    334            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2103             MOVS     R1,#+3
   \   00000008   0x204C             MOVS     R0,#+76
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable10_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    335          
    336            /* Fit the structure with the read addresses */
    337            pxPktBasicAddresses->cBroadcastAddress = tempRegValue[0];
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x7160             STRB     R0,[R4, #+5]
    338            pxPktBasicAddresses->cMulticastAddress = tempRegValue[1];
   \   0000001E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000022   0x70E0             STRB     R0,[R4, #+3]
    339            pxPktBasicAddresses->cMyAddress = tempRegValue[2];
   \   00000024   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000028   0x7060             STRB     R0,[R4, #+1]
    340          
    341            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \   0000002A   0xAA00             ADD      R2,SP,#+0
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x204F             MOVS     R0,#+79
   \   00000030   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x....             LDR.N    R0,??DataTable10_1
   \   00000038   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000003C   0x8001             STRH     R1,[R0, #+0]
    342          
    343            /* Fit the structure with the read filtering bits */
    344            pxPktBasicAddresses->xFilterOnBroadcastAddress = (SpiritFunctionalState)((tempRegValue[0] >> 1) & 0x01);
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   00000046   0x7120             STRB     R0,[R4, #+4]
    345            pxPktBasicAddresses->xFilterOnMulticastAddress = (SpiritFunctionalState)((tempRegValue[0] >> 2) & 0x01);
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000050   0x70A0             STRB     R0,[R4, #+2]
    346            pxPktBasicAddresses->xFilterOnMyAddress = (SpiritFunctionalState)((tempRegValue[0] >> 3) & 0x01);
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   0000005A   0x7020             STRB     R0,[R4, #+0]
    347          
    348          }
   \   0000005C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    349          
    350          
    351          /**
    352           * @brief  Configures the Basic packet format as packet used by SPIRIT.
    353           * @param  None.
    354           * @retval None.
    355           */

   \                                 In section .text, align 2, keep-with-next
    356          void SpiritPktBasicSetFormat(void)
    357          {
   \                     SpiritPktBasicSetFormat: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    358            uint8_t tempRegValue;
    359          
    360            /* Reads the register value */
    361            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable10_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    362          
    363            /* Build the new value. Also set to 0 the direct RX mode bits */
    364            tempRegValue &= 0x0F;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
    365            tempRegValue |= (uint8_t)PCKTCTRL3_PCKT_FRMT_BASIC;
   \   00000024   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    366          
    367            /* Writes the  value on the PCKTCTRL3 register */
    368            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x2031             MOVS     R0,#+49
   \   00000032   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0x....             LDR.N    R0,??DataTable10_1
   \   0000003A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000003E   0x8001             STRH     R1,[R0, #+0]
    369          
    370            /* Reads the PCKTCTRL1_BASE register */
    371            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000040   0xAA00             ADD      R2,SP,#+0
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x2033             MOVS     R0,#+51
   \   00000046   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x....             LDR.N    R0,??DataTable10_1
   \   0000004E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000052   0x8001             STRH     R1,[R0, #+0]
    372          
    373            /* Build the new value. Set to 0 the direct TX mode bits */
    374            tempRegValue &= 0xF3;
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xF010 0x00F3      ANDS     R0,R0,#0xF3
   \   0000005C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    375          
    376            /* Writes the value on the PCKTCTRL1 register */
    377            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000060   0xAA00             ADD      R2,SP,#+0
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x2033             MOVS     R0,#+51
   \   00000066   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x....             LDR.N    R0,??DataTable10_1
   \   0000006E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000072   0x8001             STRH     R1,[R0, #+0]
    378          
    379            /* Reads the PROTOCOL1 register */
    380            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
   \   00000074   0xAA00             ADD      R2,SP,#+0
   \   00000076   0x2101             MOVS     R1,#+1
   \   00000078   0x2051             MOVS     R0,#+81
   \   0000007A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x....             LDR.N    R0,??DataTable10_1
   \   00000082   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000086   0x8001             STRH     R1,[R0, #+0]
    381          
    382            /* Mask a reserved bit */
    383            tempRegValue &= ~0x20;
   \   00000088   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008C   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000090   0xF88D 0x0000      STRB     R0,[SP, #+0]
    384          
    385            /* Writes the value on register */
    386            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
   \   00000094   0xAA00             ADD      R2,SP,#+0
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x2051             MOVS     R0,#+81
   \   0000009A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000009E   0x9001             STR      R0,[SP, #+4]
   \   000000A0   0x....             LDR.N    R0,??DataTable10_1
   \   000000A2   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000A6   0x8001             STRH     R1,[R0, #+0]
    387          }
   \   000000A8   0xBD07             POP      {R0-R2,PC}       ;; return
    388          
    389          
    390          /**
    391           * @brief  Sets the address length for SPIRIT Basic packets.
    392           * @param  xAddressField length of ADDRESS in bytes.
    393           *         This parameter can be: S_ENABLE or S_DISABLE.
    394           * @retval None.
    395           */

   \                                 In section .text, align 2, keep-with-next
    396          void SpiritPktBasicAddressField(SpiritFunctionalState xAddressField)
    397          {
   \                     SpiritPktBasicAddressField: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    398            uint8_t tempRegValue;
    399          
    400            /* Check the parameters */
    401            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xAddressField));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktBasicAddressField_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktBasicAddressField_0
   \   00000010   0xF240 0x1191      MOVW     R1,#+401
   \   00000014   0x....             LDR.N    R0,??DataTable10
   \   00000016   0x.... 0x....      BL       s_assert_failed
    402          
    403            /* Reads the PCKTCTRL4 register value */
    404            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \                     ??SpiritPktBasicAddressField_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2030             MOVS     R0,#+48
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable10_1
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    405          
    406            /* Build the address length for the register */
    407            if(xAddressField==S_ENABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xD106             BNE.N    ??SpiritPktBasicAddressField_1
    408            {
    409              tempRegValue |= 0x08;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritPktBasicAddressField_2
    410            }
    411            else
    412            {
    413              tempRegValue &= 0x07;
   \                     ??SpiritPktBasicAddressField_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    414            }
    415          
    416            /* Writes the new value on the PCKTCTRL4 register */
    417            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \                     ??SpiritPktBasicAddressField_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2030             MOVS     R0,#+48
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable10_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    418          
    419          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    420          
    421          
    422          /**
    423           * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
    424           * @param  None.
    425           * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
    426           */

   \                                 In section .text, align 2, keep-with-next
    427          SpiritFunctionalState SpiritPktBasicGetAddressField(void)
    428          {
   \                     SpiritPktBasicGetAddressField: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    429            uint8_t tempRegValue;
    430          
    431            /* Reads the PCKTCTRL4 register value */
    432            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable10_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    433          
    434            /* Returns the address field value */
    435            if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x2118             MOVS     R1,#+24
   \   0000001E   0x4208             TST      R0,R1
   \   00000020   0xD001             BEQ.N    ??SpiritPktBasicGetAddressField_0
    436            {
    437              return S_ENABLE;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE000             B.N      ??SpiritPktBasicGetAddressField_1
    438            }
    439            else
    440            {
    441              return S_DISABLE;
   \                     ??SpiritPktBasicGetAddressField_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktBasicGetAddressField_1: (+1)
   \   00000028   0xBD0E             POP      {R1-R3,PC}       ;; return
    442            }
    443          
    444          }
    445          
    446          
    447          /**
    448           * @brief  Sets the payload length for SPIRIT Basic packets. Since the packet length
    449           *         depends from the address and the control field size, this
    450           *         function reads the correspondent registers in order to determine
    451           *         the correct packet length to be written.
    452           * @param  nPayloadLength payload length in bytes.
    453           *         This parameter is an uint16_t.
    454           * @retval None.
    455           */

   \                                 In section .text, align 2, keep-with-next
    456          void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
    457          {
   \                     SpiritPktBasicSetPayloadLength: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    458            uint8_t tempRegValue[2];
    459            uint16_t overSize=0;
   \   00000006   0x2500             MOVS     R5,#+0
    460          
    461            /* Computes the oversize (address + control) size */
    462            if(SpiritPktBasicGetAddressField())
   \   00000008   0x.... 0x....      BL       SpiritPktBasicGetAddressField
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ.N    ??SpiritPktBasicSetPayloadLength_0
    463            {
    464              overSize=1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x0005             MOVS     R5,R0
    465            }
    466            overSize += (uint16_t) SpiritPktBasicGetControlLength();
   \                     ??SpiritPktBasicSetPayloadLength_0: (+1)
   \   00000014   0x.... 0x....      BL       SpiritPktCommonGetControlLength
   \   00000018   0x1940             ADDS     R0,R0,R5
   \   0000001A   0x0005             MOVS     R5,R0
    467          
    468            /* Computes PCKTLEN0 value from nPayloadLength */
    469            tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
   \   0000001C   0x1928             ADDS     R0,R5,R4
   \   0000001E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    470            /* Computes PCKTLEN1 value from nPayloadLength */
    471            tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x1928             ADDS     R0,R5,R4
   \   00000028   0x1200             ASRS     R0,R0,#+8
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    472          
    473            /* Writes data on the PCKTLEN1/0 register */
    474            g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
   \   0000002E   0xAA00             ADD      R2,SP,#+0
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x2034             MOVS     R0,#+52
   \   00000034   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0x....             LDR.N    R0,??DataTable10_1
   \   0000003C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000040   0x8001             STRH     R1,[R0, #+0]
    475          
    476          }
   \   00000042   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    477          
    478          
    479          /**
    480           * @brief  Returns the payload length for SPIRIT Basic packets. Since the
    481           *         packet length depends from the address and the control
    482           *         field size, this function reads the correspondent
    483           *         registers in order to determine the correct payload length
    484           *         to be returned.
    485           * @param  None.
    486           * @retval uint16_t Payload length in bytes.
    487           */

   \                                 In section .text, align 2, keep-with-next
    488          uint16_t SpiritPktBasicGetPayloadLength(void)
    489          {
   \                     SpiritPktBasicGetPayloadLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    490            uint8_t tempRegValue[2];
    491            uint16_t overSize=0;
   \   00000002   0x2400             MOVS     R4,#+0
    492          
    493            /* Computes the oversize (address + control) size */
    494            if(SpiritPktBasicGetAddressField())
   \   00000004   0x.... 0x....      BL       SpiritPktBasicGetAddressField
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD001             BEQ.N    ??SpiritPktBasicGetPayloadLength_0
    495            {
    496              overSize=1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x0004             MOVS     R4,R0
    497            }
    498            overSize += (uint16_t) SpiritPktBasicGetControlLength();
   \                     ??SpiritPktBasicGetPayloadLength_0: (+1)
   \   00000010   0x.... 0x....      BL       SpiritPktCommonGetControlLength
   \   00000014   0x1900             ADDS     R0,R0,R4
   \   00000016   0x0004             MOVS     R4,R0
    499          
    500            /* Reads the packet length registers */
    501            g_xStatus = SpiritSpiReadRegisters(PCKTLEN1_BASE, 2, tempRegValue);
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x2034             MOVS     R0,#+52
   \   0000001E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable10_1
   \   00000026   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002A   0x8001             STRH     R1,[R0, #+0]
    502          
    503            /* Returns the packet length */
    504            return ((((uint16_t)tempRegValue[0])<<8) + (uint16_t) tempRegValue[1]) - overSize;
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000034   0xEB11 0x2000      ADDS     R0,R1,R0, LSL #+8
   \   00000038   0x1B00             SUBS     R0,R0,R4
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    505          
    506          }
    507          
    508          /**
    509           * @brief  Returns the packet length field of the received packet.
    510           * @param  None.
    511           * @retval uint16_t Packet length.
    512           */

   \                                 In section .text, align 2, keep-with-next
    513          uint16_t SpiritPktBasicGetReceivedPktLength(void)
    514          {
   \                     SpiritPktBasicGetReceivedPktLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    515            uint8_t tempRegValue[2];
    516            uint16_t overSize=0;
   \   00000002   0x2400             MOVS     R4,#+0
    517          
    518            /* Computes the oversize (address + control) size */
    519            if(SpiritPktBasicGetAddressField())
   \   00000004   0x.... 0x....      BL       SpiritPktBasicGetAddressField
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD001             BEQ.N    ??SpiritPktBasicGetReceivedPktLength_0
    520            {
    521              overSize=1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x0004             MOVS     R4,R0
    522            }
    523            overSize += (uint16_t) SpiritPktBasicGetControlLength();
   \                     ??SpiritPktBasicGetReceivedPktLength_0: (+1)
   \   00000010   0x.... 0x....      BL       SpiritPktCommonGetControlLength
   \   00000014   0x1900             ADDS     R0,R0,R4
   \   00000016   0x0004             MOVS     R4,R0
    524            
    525            /* Reads the RX_PCKT_LENx registers value */
    526            g_xStatus = SpiritSpiReadRegisters(RX_PCKT_LEN1_BASE, 2, tempRegValue);
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x20C9             MOVS     R0,#+201
   \   0000001E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable10_1
   \   00000026   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002A   0x8001             STRH     R1,[R0, #+0]
    527          
    528            /* Rebuild and return the the length field */
    529            return ((((uint16_t) tempRegValue[0]) << 8) + (uint16_t) tempRegValue[1] - overSize);
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000034   0xEB11 0x2000      ADDS     R0,R1,R0, LSL #+8
   \   00000038   0x1B00             SUBS     R0,R0,R4
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    530          
    531          }
    532          
    533          /**
    534           * @brief  Computes and sets the variable payload length for SPIRIT Basic packets.
    535           * @param  nMaxPayloadLength payload length in bytes.
    536           *         This parameter is an uint16_t.
    537           * @param  xAddressField Enable or Disable Address Field.
    538           *         This parameter can be S_ENABLE or S_DISABLE.
    539           * @param  xControlLength Control length in bytes.
    540           *         This parameter can be any value of @ref BasicControlLength.
    541           * @retval None.
    542           */

   \                                 In section .text, align 2, keep-with-next
    543          void SpiritPktBasicSetVarLengthWidth(uint16_t nMaxPayloadLength, SpiritFunctionalState xAddressField, BasicControlLength xControlLength)
    544          {
   \                     SpiritPktBasicSetVarLengthWidth: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    545            uint8_t tempRegValue,
    546                    addressLength,
    547                    i;
    548            uint32_t packetLength;
    549          
    550            /* Sets the address length according to xAddressField */
    551            if(xAddressField == S_ENABLE)
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xD102             BNE.N    ??SpiritPktBasicSetVarLengthWidth_0
    552            {
    553              addressLength=1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x0007             MOVS     R7,R0
   \   00000016   0xE001             B.N      ??SpiritPktBasicSetVarLengthWidth_1
    554            }
    555            else
    556            {
    557              addressLength=0;
   \                     ??SpiritPktBasicSetVarLengthWidth_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0007             MOVS     R7,R0
    558            }
    559          
    560            /* packet length = payload length + address length + control length */
    561            packetLength=nMaxPayloadLength+addressLength+xControlLength;
   \                     ??SpiritPktBasicSetVarLengthWidth_1: (+1)
   \   0000001C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000020   0x1938             ADDS     R0,R7,R4
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x1830             ADDS     R0,R6,R0
   \   00000026   0x4680             MOV      R8,R0
    562          
    563            /* Computes the number of bits */
    564            for(i=0;i<16;i++)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x4681             MOV      R9,R0
   \                     ??SpiritPktBasicSetVarLengthWidth_2: (+1)
   \   0000002C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000030   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000034   0xDA07             BGE.N    ??SpiritPktBasicSetVarLengthWidth_3
    565            {
    566              if(packetLength == 0) break;
   \   00000036   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000003A   0xD004             BEQ.N    ??SpiritPktBasicSetVarLengthWidth_3
    567              {
    568              packetLength >>= 1;
   \                     ??SpiritPktBasicSetVarLengthWidth_4: (+1)
   \   0000003C   0xEA5F 0x0858      LSRS     R8,R8,#+1
    569              }
    570            }
   \   00000040   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000044   0xE7F2             B.N      ??SpiritPktBasicSetVarLengthWidth_2
    571            i==0 ? i=1 : i;
   \                     ??SpiritPktBasicSetVarLengthWidth_3: (+1)
   \   00000046   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000004E   0xD104             BNE.N    ??SpiritPktBasicSetVarLengthWidth_5
   \   00000050   0xF05F 0x0901      MOVS     R9,#+1
   \   00000054   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000058   0xE001             B.N      ??SpiritPktBasicSetVarLengthWidth_6
   \                     ??SpiritPktBasicSetVarLengthWidth_5: (+1)
   \   0000005A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
    572          
    573            /* Reads the PCKTCTRL3 register value */
    574            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \                     ??SpiritPktBasicSetVarLengthWidth_6: (+1)
   \   0000005E   0xAA00             ADD      R2,SP,#+0
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x2031             MOVS     R0,#+49
   \   00000064   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000068   0x9001             STR      R0,[SP, #+4]
   \   0000006A   0x....             LDR.N    R0,??DataTable10_1
   \   0000006C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000070   0x8001             STRH     R1,[R0, #+0]
    575          
    576            /* Build value for the length width */
    577            tempRegValue &= ~PCKTCTRL3_LEN_WID_MASK;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   0000007A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    578            tempRegValue |= (uint8_t)(i-1);
   \   0000007E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000082   0xF1B9 0x0101      SUBS     R1,R9,#+1
   \   00000086   0x4308             ORRS     R0,R1,R0
   \   00000088   0xF88D 0x0000      STRB     R0,[SP, #+0]
    579          
    580            /* Writes the PCKTCTRL3 register value */
    581            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   0000008C   0xAA00             ADD      R2,SP,#+0
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x2031             MOVS     R0,#+49
   \   00000092   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x....             LDR.N    R0,??DataTable10_1
   \   0000009A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000009E   0x8001             STRH     R1,[R0, #+0]
    582          
    583          }
   \   000000A0   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000048   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000050   0x5F 0x50          DC8 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H, 74H
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \   00000058   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000060   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000068   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000070   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 53H, 50H, 49H, 52H
   \              0x63 0x5C    
   \              0x53 0x50    
   \              0x49 0x52    
   \   00000078   0x49 0x54          DC8 49H, 54H, 5FH, 50H, 6BH, 74H, 42H, 61H
   \              0x5F 0x50    
   \              0x6B 0x74    
   \              0x42 0x61    
   \   00000080   0x73 0x69          DC8 73H, 69H, 63H, 2EH, 63H, 0
   \              0x63 0x2E    
   \              0x63 0x00    
   \   00000086   0x00 0x00          DC8 0, 0
    584          
    585          
    586          
    587          /**
    588           *@}
    589           */
    590          
    591          /**
    592           *@}
    593           */
    594          
    595          
    596          /**
    597           *@}
    598           */
    599          
    600          
    601          
    602          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SpiritPktBasicAddressField
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktBasicAddressesInit
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktBasicGetAddressField
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktBasicGetAddressesInfo
        16   -> SdkEvalSpiReadRegisters
      24   SpiritPktBasicGetInfo
        24   -> SdkEvalSpiReadRegisters
      16   SpiritPktBasicGetPayloadLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SpiritPktBasicGetAddressField
        16   -> SpiritPktCommonGetControlLength
      16   SpiritPktBasicGetReceivedPktLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SpiritPktBasicGetAddressField
        16   -> SpiritPktCommonGetControlLength
      24   SpiritPktBasicInit
        24   -> SdkEvalSpiReadRegisters
        24   -> SdkEvalSpiWriteRegisters
        24   -> SpiritPktCommonFilterOnCrc
        24   -> s_assert_failed
      16   SpiritPktBasicSetFormat
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
      24   SpiritPktBasicSetPayloadLength
        24   -> SdkEvalSpiWriteRegisters
        24   -> SpiritPktBasicGetAddressField
        24   -> SpiritPktCommonGetControlLength
      40   SpiritPktBasicSetVarLengthWidth
        40   -> SdkEvalSpiReadRegisters
        40   -> SdkEvalSpiWriteRegisters


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
     136  ?_0
     100  SpiritPktBasicAddressField
     254  SpiritPktBasicAddressesInit
      42  SpiritPktBasicGetAddressField
      94  SpiritPktBasicGetAddressesInfo
     174  SpiritPktBasicGetInfo
      62  SpiritPktBasicGetPayloadLength
      62  SpiritPktBasicGetReceivedPktLength
     774  SpiritPktBasicInit
     170  SpiritPktBasicSetFormat
      68  SpiritPktBasicSetPayloadLength
     164  SpiritPktBasicSetVarLengthWidth

 
   136 bytes in section .rodata
 1 972 bytes in section .text
 
 1 972 bytes of CODE  memory
   136 bytes of CONST memory

Errors: none
Warnings: none
