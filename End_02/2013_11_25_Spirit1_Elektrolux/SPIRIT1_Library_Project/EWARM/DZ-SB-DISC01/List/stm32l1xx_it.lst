###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\stm32l1xx_it.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\stm32l1xx_it.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\stm32l1xx_it.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\stm32l1xx_it.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\stm32l1xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_it.c
      4            * @author  MCD Application Team
      5            * @version V3.3.0
      6            * @date    21-March-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @copy
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm32l1xx_it.h"
     25          #include "usb_lib.h"
     26          #include "ACQ.h"
     27          //#include "SDK_EVAL_VC_Istr.h"
     28          //#include "SDK_EVAL_VC_General.h"
     29          
     30          /** @addtogroup Template_Project
     31            * @{
     32            */
     33          
     34          extern uint16_t counter;
     35          extern uint8_t firstinterrupt;
     36          
     37          /* Private typedef -----------------------------------------------------------*/
     38          /* Private define ------------------------------------------------------------*/
     39          /* Private macro -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          
     44          /******************************************************************************/
     45          /*            Cortex-M3 Processor Exceptions Handlers                         */
     46          /******************************************************************************/
     47          
     48          /**
     49            * @brief  This function handles NMI exception.
     50            * @param  None
     51            * @retval : None
     52            */

   \                                 In section .text, align 2, keep-with-next
     53          void NMI_Handler(void)
     54          {
     55          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     56          
     57          /**
     58            * @brief  This function handles Hard Fault exception.
     59            * @param  None
     60            * @retval : None
     61            */

   \                                 In section .text, align 2, keep-with-next
     62          void HardFault_Handler(void)
     63          {
     64            /* Go to infinite loop when Hard Fault exception occurs */
     65            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     66            {
     67            }
     68          }
     69          
     70          /**
     71            * @brief  This function handles Memory Manage exception.
     72            * @param  None
     73            * @retval : None
     74            */

   \                                 In section .text, align 2, keep-with-next
     75          void MemManage_Handler(void)
     76          {
     77            /* Go to infinite loop when Memory Manage exception occurs */
     78            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??MemManage_Handler_0
     79            {
     80            }
     81          }
     82          
     83          /**
     84            * @brief  This function handles Bus Fault exception.
     85            * @param  None
     86            * @retval : None
     87            */

   \                                 In section .text, align 2, keep-with-next
     88          void BusFault_Handler(void)
     89          {
     90            /* Go to infinite loop when Bus Fault exception occurs */
     91            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??BusFault_Handler_0
     92            {
     93            }
     94          }
     95          
     96          /**
     97            * @brief  This function handles Usage Fault exception.
     98            * @param  None
     99            * @retval : None
    100            */

   \                                 In section .text, align 2, keep-with-next
    101          void UsageFault_Handler(void)
    102          {
    103            /* Go to infinite loop when Usage Fault exception occurs */
    104            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??UsageFault_Handler_0
    105            {
    106            }
    107          }
    108          
    109          /**
    110            * @brief  This function handles SVCall exception.
    111            * @param  None
    112            * @retval : None
    113            */

   \                                 In section .text, align 2, keep-with-next
    114          void SVC_Handler(void)
    115          {
    116          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    117          
    118          /**
    119            * @brief  This function handles Debug Monitor exception.
    120            * @param  None
    121            * @retval : None
    122            */

   \                                 In section .text, align 2, keep-with-next
    123          void DebugMon_Handler(void)
    124          {
    125          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    126          
    127          /**
    128            * @brief  This function handles PendSVC exception.
    129            * @param  None
    130            * @retval : None
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void PendSV_Handler(void)
    133          {
    134          }
   \                     PendSV_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    135          
    136          
    137          
    138          /*******************************************************************************
    139          * Function Name  : USB_LP_IRQHandler
    140          * Description    : This function handles USB Low Priority interrupts  requests.
    141          * Input          : None
    142          * Output         : None
    143          * Return         : None
    144          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    145          void USB_LP_IRQHandler(void)
    146          {
    147           // SdkEvalVCIntServRoutine();  /// bzdegluk
    148          
    149          }
   \                     USB_LP_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    150          
    151          
    152          
    153          /******************************************************************************/
    154          /*                 STM32L15x Peripherals Interrupt Handlers                   */
    155          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    156          /*  available peripheral interrupt handler's name please refer to the startup */
    157          /*  file (startup_stm32l1xx_lp.s).                                            */
    158          /******************************************************************************/
    159          
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void USART1_IRQHandler(void)
    162          {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    163          if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)      //received data available in buffor
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x....             LDR.N    R0,??DataTable0  ;; 0x40013800
   \   00000008   0x.... 0x....      BL       USART_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD01E             BEQ.N    ??USART1_IRQHandler_0
    164              {
    165                if (ACQ_state == ACQ_waiting_answer)
   \   00000010   0x....             LDR.N    R0,??DataTable0_1
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD11A             BNE.N    ??USART1_IRQHandler_0
    166                {
    167                  data_received[count_rec] = (USART1->DR & (0x0FF));
   \   00000018   0x....             LDR.N    R0,??DataTable0_2  ;; 0x40013804
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable0_3
   \   0000001E   0x....             LDR.N    R2,??DataTable0_4
   \   00000020   0x7812             LDRB     R2,[R2, #+0]
   \   00000022   0x5450             STRB     R0,[R2, R1]
    168                  count_rec++;
   \   00000024   0x....             LDR.N    R0,??DataTable0_4
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable0_4
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    169                  if (count_rec > (size_index - 1))               //check if complet answer received
   \   0000002E   0x....             LDR.N    R0,??DataTable0_5
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1E40             SUBS     R0,R0,#+1
   \   00000034   0x....             LDR.N    R1,??DataTable0_4
   \   00000036   0x7809             LDRB     R1,[R1, #+0]
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xDA08             BGE.N    ??USART1_IRQHandler_0
    170                  {
    171                    count_rec = 0;                                // reset the counter for data received
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable0_4
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    172                    ACQ_state = ACQ_waiting_next_window;          // start wait for end of the transmision window
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x....             LDR.N    R1,??DataTable0_1
   \   00000046   0x6008             STR      R0,[R1, #+0]
    173                    data_ready_for_parsing = 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable0_6
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    174                  }
    175                }
    176              }
    177              if (USART_GetITStatus(USART1, USART_IT_TXE) !=RESET)         //transmission complete
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000004E   0xF240 0x7127      MOVW     R1,#+1831
   \   00000052   0x....             LDR.N    R0,??DataTable0  ;; 0x40013800
   \   00000054   0x.... 0x....      BL       USART_GetITStatus
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD026             BEQ.N    ??USART1_IRQHandler_1
    178              {
    179                if (frame_ind == 0)
   \   0000005C   0x....             LDR.N    R0,??DataTable0_7
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD10D             BNE.N    ??USART1_IRQHandler_2
    180                  {      
    181                ACQ_state = ACQ_waiting_answer;
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x....             LDR.N    R1,??DataTable0_1
   \   00000068   0x6008             STR      R0,[R1, #+0]
    182                ACQ_wait_answ_timer = 1000;
   \   0000006A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000006E   0x....             LDR.N    R1,??DataTable0_8
   \   00000070   0x6008             STR      R0,[R1, #+0]
    183                // USART_ClearITPendingBit(USART1, USART_IT_TC);
    184                USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0xF240 0x7127      MOVW     R1,#+1831
   \   00000078   0x....             LDR.N    R0,??DataTable0  ;; 0x40013800
   \   0000007A   0x.... 0x....      BL       USART_ITConfig
   \   0000007E   0xE014             B.N      ??USART1_IRQHandler_1
    185                }
    186                else
    187                {
    188                  USART1->DR = (frame_send_read[frame_ind] & (uint16_t)0x01FF);
   \                     ??USART1_IRQHandler_2: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable0_9
   \   00000082   0x....             LDR.N    R1,??DataTable0_7
   \   00000084   0x6809             LDR      R1,[R1, #+0]
   \   00000086   0x5C08             LDRB     R0,[R1, R0]
   \   00000088   0x....             LDR.N    R1,??DataTable0_2  ;; 0x40013804
   \   0000008A   0x8008             STRH     R0,[R1, #+0]
    189                  frame_ind++;
   \   0000008C   0x....             LDR.N    R0,??DataTable0_7
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0x....             LDR.N    R1,??DataTable0_7
   \   00000094   0x6008             STR      R0,[R1, #+0]
    190                  if (frame_ind > (frame_size-1))
   \   00000096   0x....             LDR.N    R0,??DataTable0_10
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x1E40             SUBS     R0,R0,#+1
   \   0000009C   0x....             LDR.N    R1,??DataTable0_7
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xDA02             BGE.N    ??USART1_IRQHandler_1
    191                    frame_ind = 0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x....             LDR.N    R1,??DataTable0_7
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    192                }     
    193              }
    194             // USART_ITConfig(USART1, USART_IT_TC, ENABLE);
    195          }
   \                     ??USART1_IRQHandler_1: (+1)
   \   000000AA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     ACQ_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     data_received

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     count_rec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     size_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x........         DC32     data_ready_for_parsing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x........         DC32     frame_ind

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x........         DC32     ACQ_wait_answ_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   0x........         DC32     frame_send_read

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \   00000000   0x........         DC32     frame_size
    196          
    197          
    198          /**
    199            * @brief  This function handles PPP interrupt request.
    200            * @param  None
    201            * @retval : None
    202            */
    203          /*void PPP_IRQHandler(void)
    204          {
    205          }*/
    206          
    207          /**
    208            * @}
    209            */
    210          
    211          
    212          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       8   USART1_IRQHandler
         8   -> USART_GetITStatus
         8   -> USART_ITConfig
       0   USB_LP_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
       2  BusFault_Handler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
     172  USART1_IRQHandler
       2  USB_LP_IRQHandler
       2  UsageFault_Handler

 
 234 bytes in section .text
 
 234 bytes of CODE memory

Errors: none
Warnings: none
