###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:40
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_General.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_General.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_General.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_General.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_General.c
      1          /**
      2           * @file    SPIRIT_General.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT General functionalities.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "SPIRIT_General.h"
     25          #include "MCU_Interface.h"
     26          
     27          
     28          /**
     29           * @addtogroup SPIRIT_Libraries
     30           * @{
     31           */
     32          
     33          
     34          /**
     35           * @addtogroup SPIRIT_General
     36           * @{
     37           */
     38          
     39          
     40          /**
     41           * @defgroup General_Private_TypesDefinitions   General Private Types Definitions
     42           * @{
     43           */
     44          
     45          /**
     46           *@}
     47           */
     48          
     49          
     50          /**
     51           * @defgroup General_Private_Defines            General Private Defines
     52           * @{
     53           */
     54          
     55          /**
     56           *@}
     57           */
     58          
     59          
     60          /**
     61           * @defgroup General_Private_Macros             General Private Macros
     62           * @{
     63           */
     64          
     65          /**
     66           *@}
     67           */
     68          
     69          
     70          /**
     71           * @defgroup General_Private_Variables          General Private Variables
     72           * @{
     73           */
     74          
     75          /**
     76           * @brief  Spirit version global variable.
     77           *         This static variable of @ref SpiritVersion type.
     78           */

   \                                 In section .data, align 1
     79          static SpiritVersion s_xSpiritVersion = SPIRIT_VERSION_3_0;
   \                     s_xSpiritVersion:
   \   00000000   0x02               DC8 2
     80          
     81          /**
     82           *@}
     83           */
     84          
     85          
     86          /**
     87           * @defgroup General_Private_FunctionPrototypes         General Private Function Prototypes
     88           * @{
     89           */
     90          
     91          /**
     92           *@}
     93           */
     94          
     95          
     96          /**
     97           * @defgroup General_Private_Functions                          General Private Functions
     98           * @{
     99           */
    100          
    101          /**
    102           * @brief  Enables or Disables the output of battery level detector.
    103           * @param  xNewState new state for battery level detector.
    104           *         This parameter can be: S_ENABLE or S_DISABLE.
    105           * @retval None
    106           */

   \                                 In section .text, align 2, keep-with-next
    107          void SpiritGeneralBatteryLevel(SpiritFunctionalState xNewState)
    108          {
   \                     SpiritGeneralBatteryLevel: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    109            uint8_t tempRegValue;
    110          
    111            /* Check the parameters */
    112            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritGeneralBatteryLevel_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritGeneralBatteryLevel_0
   \   00000010   0x2170             MOVS     R1,#+112
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable12
   \   00000016   0x.... 0x....      BL       s_assert_failed
    113          
    114            /* Reads the ANA_FUNC_CONF0_BASE register value */
    115            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralBatteryLevel_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   0000002A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    116          
    117            /* Build the value to be stored */
    118            if(xNewState == S_ENABLE)
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD106             BNE.N    ??SpiritGeneralBatteryLevel_1
    119            {
    120              tempRegValue |= BATTERY_LEVEL_MASK;
   \   00000036   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000042   0xE005             B.N      ??SpiritGeneralBatteryLevel_2
    121            }
    122            else
    123            {
    124              tempRegValue &= ~BATTERY_LEVEL_MASK;
   \                     ??SpiritGeneralBatteryLevel_1: (+1)
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    125            }
    126          
    127            /* Writes the new value */
    128            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralBatteryLevel_2: (+1)
   \   00000050   0xAA00             ADD      R2,SP,#+0
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable12_1
   \   00000060   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000064   0x8001             STRH     R1,[R0, #+0]
    129          
    130          }
   \   00000066   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    131          
    132          
    133          /**
    134           * @brief  Sets the battery level.
    135           * @param  xBatteryLevel new state for battery level.
    136           *         This parameter can be a value of @ref BatteryLevel.
    137           * @retval None.
    138           */

   \                                 In section .text, align 2, keep-with-next
    139          void SpiritGeneralSetBatteryLevel(BatteryLevel xBatteryLevel)
    140          {
   \                     SpiritGeneralSetBatteryLevel: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    141            uint8_t tempRegValue;
    142          
    143            /* Check the parameters */
    144            s_assert_param(IS_BLD_LVL(xBatteryLevel));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00C             BEQ.N    ??SpiritGeneralSetBatteryLevel_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD009             BEQ.N    ??SpiritGeneralSetBatteryLevel_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xD006             BEQ.N    ??SpiritGeneralSetBatteryLevel_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C03             CMP      R4,#+3
   \   0000001A   0xD003             BEQ.N    ??SpiritGeneralSetBatteryLevel_0
   \   0000001C   0x2190             MOVS     R1,#+144
   \   0000001E   0x....             LDR.N    R0,??DataTable12
   \   00000020   0x.... 0x....      BL       s_assert_failed
    145          
    146            /* Reads the ANA_FUNC_CONF1_BASE register value */
    147            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF1_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralSetBatteryLevel_0: (+1)
   \   00000024   0xAA00             ADD      R2,SP,#+0
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000002E   0x9001             STR      R0,[SP, #+4]
   \   00000030   0x....             LDR.N    R0,??DataTable12_1
   \   00000032   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000036   0x8001             STRH     R1,[R0, #+0]
    148          
    149            /* Build the value to be stored */
    150            tempRegValue &= ~ANA_FUNC_CONF1_SET_BLD_LVL_MASK;
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF010 0x00FC      ANDS     R0,R0,#0xFC
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
    151            switch(xBatteryLevel)
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD005             BEQ.N    ??SpiritGeneralSetBatteryLevel_1
   \   0000004A   0x2C02             CMP      R4,#+2
   \   0000004C   0xD00F             BEQ.N    ??SpiritGeneralSetBatteryLevel_2
   \   0000004E   0xD307             BCC.N    ??SpiritGeneralSetBatteryLevel_3
   \   00000050   0x2C03             CMP      R4,#+3
   \   00000052   0xD013             BEQ.N    ??SpiritGeneralSetBatteryLevel_4
   \   00000054   0xE018             B.N      ??SpiritGeneralSetBatteryLevel_5
    152            {
    153              case BLD_LVL_2_7_V:
    154                tempRegValue |= BLD_LVL_2_7;
   \                     ??SpiritGeneralSetBatteryLevel_1: (+1)
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    155                break;
   \   0000005E   0xE013             B.N      ??SpiritGeneralSetBatteryLevel_5
    156              case BLD_LVL_2_5_V:
    157                tempRegValue |= BLD_LVL_2_5;
   \                     ??SpiritGeneralSetBatteryLevel_3: (+1)
   \   00000060   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000064   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000068   0xF88D 0x0000      STRB     R0,[SP, #+0]
    158                break;
   \   0000006C   0xE00C             B.N      ??SpiritGeneralSetBatteryLevel_5
    159              case BLD_LVL_2_3_V:
    160                tempRegValue |= BLD_LVL_2_3;
   \                     ??SpiritGeneralSetBatteryLevel_2: (+1)
   \   0000006E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000072   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000076   0xF88D 0x0000      STRB     R0,[SP, #+0]
    161                break;
   \   0000007A   0xE005             B.N      ??SpiritGeneralSetBatteryLevel_5
    162              case BLD_LVL_2_1_V:
    163                tempRegValue |= BLD_LVL_2_1;
   \                     ??SpiritGeneralSetBatteryLevel_4: (+1)
   \   0000007C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000080   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000084   0xF88D 0x0000      STRB     R0,[SP, #+0]
    164                break;
    165            }
    166          
    167            /* Writes the new value */
    168            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF1_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralSetBatteryLevel_5: (+1)
   \   00000088   0xAA00             ADD      R2,SP,#+0
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000092   0x9001             STR      R0,[SP, #+4]
   \   00000094   0x....             LDR.N    R0,??DataTable12_1
   \   00000096   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000009A   0x8001             STRH     R1,[R0, #+0]
    169          
    170          }
   \   0000009C   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    171          
    172          
    173          /**
    174           * @brief  Returns the settled battery level.
    175           * @param  None.
    176           * @retval BatteryLevel Settled battery level. This parameter can be a value of @ref BatteryLevel.
    177           */

   \                                 In section .text, align 2, keep-with-next
    178          BatteryLevel SpiritGeneralGetBatteryLevel(void)
    179          {
   \                     SpiritGeneralGetBatteryLevel: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    180            uint8_t tempRegValue;
    181          
    182            /* Reads the ANA_FUNC_CONF1_BASE register value */
    183            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable12_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    184          
    185            /* Mask the battery level field and returns the settled battery level */
    186            return ((BatteryLevel)(tempRegValue & ANA_FUNC_CONF1_SET_BLD_LVL_MASK));
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    187          
    188          }
    189          
    190          
    191          /**
    192           * @brief  Enables or Disables the output of brown out detector.
    193           * @param  xNewState new state for brown out detector.
    194           *         This parameter can be: S_ENABLE or S_DISABLE.
    195           * @retval None.
    196           */

   \                                 In section .text, align 2, keep-with-next
    197          void SpiritGeneralBrownOut(SpiritFunctionalState xNewState)
    198          {
   \                     SpiritGeneralBrownOut: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    199            uint8_t tempRegValue;
    200          
    201            /* Check the parameters */
    202            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD006             BEQ.N    ??SpiritGeneralBrownOut_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD003             BEQ.N    ??SpiritGeneralBrownOut_0
   \   00000010   0x21CA             MOVS     R1,#+202
   \   00000012   0x....             LDR.N    R0,??DataTable12
   \   00000014   0x.... 0x....      BL       s_assert_failed
    203          
    204            /* Reads the ANA_FUNC_CONF0_BASE register value */
    205            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralBrownOut_0: (+1)
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable12_1
   \   00000026   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002A   0x8001             STRH     R1,[R0, #+0]
    206          
    207            /* Build the value to be stored */
    208            if(xNewState == S_ENABLE)
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C01             CMP      R4,#+1
   \   00000030   0xD106             BNE.N    ??SpiritGeneralBrownOut_1
    209            {
    210              tempRegValue |= BROWN_OUT_MASK;
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000003E   0xE005             B.N      ??SpiritGeneralBrownOut_2
    211            }
    212            else
    213            {
    214              tempRegValue &= ~BROWN_OUT_MASK;
   \                     ??SpiritGeneralBrownOut_1: (+1)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    215            }
    216          
    217            /* Writes value on register */
    218            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralBrownOut_2: (+1)
   \   0000004C   0xAA00             ADD      R2,SP,#+0
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x....             LDR.N    R0,??DataTable12_1
   \   0000005A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000005E   0x8001             STRH     R1,[R0, #+0]
    219          
    220          }
   \   00000060   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    221          
    222          
    223          /**
    224           * @brief  Sets High Power Mode.
    225           * @param  xNewState new state for High Power Mode.
    226           *         This parameter can be: S_ENABLE or S_DISABLE.
    227           * @retval None.
    228           */

   \                                 In section .text, align 2, keep-with-next
    229          void SpiritGeneralHighPwr(SpiritFunctionalState xNewState)
    230          {
   \                     SpiritGeneralHighPwr: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    231            uint8_t tempRegValue;
    232          
    233            /* Check the parameters */
    234            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD006             BEQ.N    ??SpiritGeneralHighPwr_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD003             BEQ.N    ??SpiritGeneralHighPwr_0
   \   00000010   0x21EA             MOVS     R1,#+234
   \   00000012   0x....             LDR.N    R0,??DataTable12
   \   00000014   0x.... 0x....      BL       s_assert_failed
    235          
    236            /* Reads the ANA_FUNC_CONF0_BASE register value */
    237            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralHighPwr_0: (+1)
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable12_1
   \   00000026   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002A   0x8001             STRH     R1,[R0, #+0]
    238          
    239            /* Build the value to write */
    240            if(xNewState == S_ENABLE)
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C01             CMP      R4,#+1
   \   00000030   0xD106             BNE.N    ??SpiritGeneralHighPwr_1
    241            {
    242              tempRegValue |= HIGH_POWER_MODE_MASK;
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000003E   0xE005             B.N      ??SpiritGeneralHighPwr_2
    243            }
    244            else
    245            {
    246              tempRegValue &= ~HIGH_POWER_MODE_MASK;
   \                     ??SpiritGeneralHighPwr_1: (+1)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    247            }
    248          
    249            /* Writes the new value on register */
    250            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralHighPwr_2: (+1)
   \   0000004C   0xAA00             ADD      R2,SP,#+0
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x....             LDR.N    R0,??DataTable12_1
   \   0000005A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000005E   0x8001             STRH     R1,[R0, #+0]
    251          
    252          }
   \   00000060   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    253          
    254          
    255          /**
    256           * @brief  Sets External Reference.
    257           * @param  xExtMode new state for the external reference.
    258           *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
    259           * @retval None.
    260           */

   \                                 In section .text, align 2, keep-with-next
    261          void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
    262          {
   \                     SpiritGeneralSetExtRef: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    263            uint8_t tempRegValue;
    264          
    265            /* Check the parameters */
    266            s_assert_param(IS_MODE_EXT(xExtMode));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritGeneralSetExtRef_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritGeneralSetExtRef_0
   \   00000010   0xF44F 0x7185      MOV      R1,#+266
   \   00000014   0x....             LDR.N    R0,??DataTable12
   \   00000016   0x.... 0x....      BL       s_assert_failed
    267          
    268            /* Reads the ANA_FUNC_CONF0_BASE register value */
    269            SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralSetExtRef_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
    270          
    271            /* Build the value to write */
    272            if(xExtMode == MODE_EXT_XO)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD106             BNE.N    ??SpiritGeneralSetExtRef_1
    273            {
    274              tempRegValue &= ~EXT_REF_MASK;
   \   0000002A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002E   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000036   0xE005             B.N      ??SpiritGeneralSetExtRef_2
    275            }
    276            else
    277            {
    278              tempRegValue |= EXT_REF_MASK;
   \                     ??SpiritGeneralSetExtRef_1: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
    279            }
    280          
    281            /* Writes value on register */
    282            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralSetExtRef_2: (+1)
   \   00000044   0xAA00             ADD      R2,SP,#+0
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x....             LDR.N    R0,??DataTable12_1
   \   00000052   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000056   0x8001             STRH     R1,[R0, #+0]
    283          
    284          }
   \   00000058   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    285          
    286          
    287          /**
    288           * @brief  Returns External Reference.
    289           * @param  None.
    290           * @retval ModeExtRef Settled external reference.
    291           *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
    292           */

   \                                 In section .text, align 2, keep-with-next
    293          ModeExtRef SpiritGeneralGetExtRef(void)
    294          {
   \                     SpiritGeneralGetExtRef: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    295            uint8_t tempRegValue;
    296          
    297            /* Reads the ANA_FUNC_CONF0_BASE register value and return the result */
    298            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable12_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    299          
    300            /* Mask the EXT_REF field field and returns the settled reference signal */
    301            return ((ModeExtRef)((tempRegValue & 0x10)>>4));
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    302          
    303          }
    304          
    305          
    306          /**
    307           * @brief  Sets XO gm at startup.
    308           * @param  xGm transconductance value of XO at startup.
    309           *         This parameter can be a value of @ref GmConf.
    310           * @retval None.
    311           */

   \                                 In section .text, align 2, keep-with-next
    312          void SpiritGeneralSetXoGm(GmConf xGm)
    313          {
   \                     SpiritGeneralSetXoGm: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    314            uint8_t tempRegValue;
    315          
    316            /* Check the parameters */
    317            s_assert_param(IS_GM_CONF(xGm));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD019             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD016             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xD013             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C03             CMP      R4,#+3
   \   0000001A   0xD010             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C04             CMP      R4,#+4
   \   00000020   0xD00D             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C05             CMP      R4,#+5
   \   00000026   0xD00A             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C06             CMP      R4,#+6
   \   0000002C   0xD007             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C07             CMP      R4,#+7
   \   00000032   0xD004             BEQ.N    ??SpiritGeneralSetXoGm_0
   \   00000034   0xF240 0x113D      MOVW     R1,#+317
   \   00000038   0x....             LDR.N    R0,??DataTable12
   \   0000003A   0x.... 0x....      BL       s_assert_failed
    318          
    319            /* Reads the ANA_FUNC_CONF1_BASE register value */
    320            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF1_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralSetXoGm_0: (+1)
   \   0000003E   0xAA00             ADD      R2,SP,#+0
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0x....             LDR.N    R0,??DataTable12_1
   \   0000004C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    321          
    322            /* Build the value to write */
    323            tempRegValue &= ~ANA_FUNC_CONF1_GMCONF_MASK;
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xF010 0x00E3      ANDS     R0,R0,#0xE3
   \   0000005A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    324            switch(xGm)
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x2C00             CMP      R4,#+0
   \   00000062   0xD00B             BEQ.N    ??SpiritGeneralSetXoGm_1
   \   00000064   0x2C02             CMP      R4,#+2
   \   00000066   0xD015             BEQ.N    ??SpiritGeneralSetXoGm_2
   \   00000068   0xD30D             BCC.N    ??SpiritGeneralSetXoGm_3
   \   0000006A   0x2C04             CMP      R4,#+4
   \   0000006C   0xD020             BEQ.N    ??SpiritGeneralSetXoGm_4
   \   0000006E   0xD318             BCC.N    ??SpiritGeneralSetXoGm_5
   \   00000070   0x2C06             CMP      R4,#+6
   \   00000072   0xD02B             BEQ.N    ??SpiritGeneralSetXoGm_6
   \   00000074   0xD323             BCC.N    ??SpiritGeneralSetXoGm_7
   \   00000076   0x2C07             CMP      R4,#+7
   \   00000078   0xD02F             BEQ.N    ??SpiritGeneralSetXoGm_8
   \   0000007A   0xE034             B.N      ??SpiritGeneralSetXoGm_9
    325            {
    326              case GM_SU_13_2:
    327                tempRegValue |= GM_13_2;
   \                     ??SpiritGeneralSetXoGm_1: (+1)
   \   0000007C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000080   0xF88D 0x0000      STRB     R0,[SP, #+0]
    328                break;
   \   00000084   0xE02F             B.N      ??SpiritGeneralSetXoGm_9
    329              case GM_SU_18_2:
    330                tempRegValue |= GM_18_2;
   \                     ??SpiritGeneralSetXoGm_3: (+1)
   \   00000086   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008A   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000008E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    331                break;
   \   00000092   0xE028             B.N      ??SpiritGeneralSetXoGm_9
    332              case GM_SU_21_5:
    333                tempRegValue |= GM_21_5;
   \                     ??SpiritGeneralSetXoGm_2: (+1)
   \   00000094   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000098   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000009C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    334                break;
   \   000000A0   0xE021             B.N      ??SpiritGeneralSetXoGm_9
    335              case GM_SU_25_6:
    336                tempRegValue |= GM_25_6;
   \                     ??SpiritGeneralSetXoGm_5: (+1)
   \   000000A2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A6   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   000000AA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    337                break;
   \   000000AE   0xE01A             B.N      ??SpiritGeneralSetXoGm_9
    338              case GM_SU_28_8:
    339                tempRegValue |= GM_28_8;
   \                     ??SpiritGeneralSetXoGm_4: (+1)
   \   000000B0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B4   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000B8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    340                break;
   \   000000BC   0xE013             B.N      ??SpiritGeneralSetXoGm_9
    341              case GM_SU_33_9:
    342                tempRegValue |= GM_33_9;
   \                     ??SpiritGeneralSetXoGm_7: (+1)
   \   000000BE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C2   0xF050 0x0014      ORRS     R0,R0,#0x14
   \   000000C6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    343                break;
   \   000000CA   0xE00C             B.N      ??SpiritGeneralSetXoGm_9
    344              case GM_SU_38_5:
    345                tempRegValue |= GM_38_5;
   \                     ??SpiritGeneralSetXoGm_6: (+1)
   \   000000CC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D0   0xF050 0x0018      ORRS     R0,R0,#0x18
   \   000000D4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    346                break;
   \   000000D8   0xE005             B.N      ??SpiritGeneralSetXoGm_9
    347              case GM_SU_43_0:
    348                tempRegValue |= GM_43_0;
   \                     ??SpiritGeneralSetXoGm_8: (+1)
   \   000000DA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000DE   0xF050 0x001C      ORRS     R0,R0,#0x1C
   \   000000E2   0xF88D 0x0000      STRB     R0,[SP, #+0]
    349                break;
    350            }
    351          
    352            /* Writes new value on register */
    353            g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF1_BASE, 1, &tempRegValue);
   \                     ??SpiritGeneralSetXoGm_9: (+1)
   \   000000E6   0xAA00             ADD      R2,SP,#+0
   \   000000E8   0x2101             MOVS     R1,#+1
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000F0   0x9001             STR      R0,[SP, #+4]
   \   000000F2   0x....             LDR.N    R0,??DataTable12_1
   \   000000F4   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000F8   0x8001             STRH     R1,[R0, #+0]
    354          
    355          }
   \   000000FA   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    356          
    357          
    358          /**
    359           * @brief  Returns the configured XO gm at startup.
    360           * @param  None.
    361           * @retval GmConf Settled XO gm. This parameter can be a value of @ref GmConf.
    362           */

   \                                 In section .text, align 2, keep-with-next
    363          GmConf SpiritGeneralGetXoGm(void)
    364          {
   \                     SpiritGeneralGetXoGm: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    365            uint8_t tempRegValue;
    366          
    367            /* Reads the ANA_FUNC_CONF1_BASE register value */
    368            g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF1_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable12_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    369          
    370            /* Mask the GM_CONF field field and returns the settled transconductance of the XO at startup */
    371            return ((GmConf)((tempRegValue & 0x1C)>>2));
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF3C0 0x0082      UBFX     R0,R0,#+2,#+3
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD0E             POP      {R1-R3,PC}       ;; return
    372          
    373          }
    374          
    375          
    376          /**
    377           * @brief  Returns the settled packet format.
    378           * @param  None.
    379           * @retval PacketType Settled packet type. This parameter can be a value of @ref PacketType.
    380           */

   \                                 In section .text, align 2, keep-with-next
    381          PacketType SpiritGeneralGetPktType(void)
    382          {
   \                     SpiritGeneralGetPktType: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    383            uint8_t tempRegValue;
    384          
    385            /* Reads the PROTOCOL1 register */
    386            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable12_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    387          
    388            /* cast and return value */
    389            return (PacketType)(tempRegValue>>6);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x0980             LSRS     R0,R0,#+6
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
    390          
    391          }
    392          
    393          
    394          
    395          /**
    396           * @brief  Returns device part number.
    397           * @param  None.
    398           * @retval uint16_t Device part number.
    399           */

   \                                 In section .text, align 2, keep-with-next
    400          uint16_t SpiritGeneralGetDevicePartNumber(void)
    401          {
   \                     SpiritGeneralGetDevicePartNumber: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    402            uint8_t tempRegValue[2];
    403          
    404            /* Reads the register value containing the device part number */
    405            g_xStatus = SpiritSpiReadRegisters(DEVICE_INFO1_PARTNUM, 2, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x20F0             MOVS     R0,#+240
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable12_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    406          
    407            return ((((uint16_t)tempRegValue[0])<<8) | ((uint16_t)tempRegValue[1]));
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000020   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    408          
    409          }
    410          
    411          /**
    412           * @brief  Sets SPIRIT RF board version.
    413           * @param  SPIRIT RF board version.
    414           * @retval None.
    415           */

   \                                 In section .text, align 2, keep-with-next
    416          void SpiritGeneralSetSpiritVersion(SpiritVersion xSpiritVersion)
    417          {
    418            s_xSpiritVersion = xSpiritVersion;
   \                     SpiritGeneralSetSpiritVersion: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable12_2
   \   00000002   0x7008             STRB     R0,[R1, #+0]
    419          
    420          }
   \   00000004   0x4770             BX       LR               ;; return
    421          
    422          /**
    423           * @brief  Returns SPIRIT RF board version.
    424           * @param  None.
    425           * @retval SPIRIT RF board version.
    426           */

   \                                 In section .text, align 2, keep-with-next
    427          SpiritVersion SpiritGeneralGetSpiritVersion(void)
    428          {
    429            return s_xSpiritVersion;
   \                     SpiritGeneralGetSpiritVersion: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable12_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    430          
    431          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     s_xSpiritVersion

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000048   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000050   0x5F 0x50          DC8 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H, 74H
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \   00000058   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000060   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000068   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000070   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 53H, 50H, 49H, 52H
   \              0x63 0x5C    
   \              0x53 0x50    
   \              0x49 0x52    
   \   00000078   0x49 0x54          DC8 49H, 54H, 5FH, 47H, 65H, 6EH, 65H, 72H
   \              0x5F 0x47    
   \              0x65 0x6E    
   \              0x65 0x72    
   \   00000080   0x61 0x6C          DC8 61H, 6CH, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   00000085   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    432          
    433          /**
    434           *@}
    435           */
    436          
    437          
    438          /**
    439           *@}
    440           */
    441          
    442          
    443          /**
    444           *@}
    445           */
    446          
    447          
    448          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SpiritGeneralBatteryLevel
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGeneralBrownOut
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGeneralGetBatteryLevel
        16   -> SdkEvalSpiReadRegisters
      16   SpiritGeneralGetDevicePartNumber
        16   -> SdkEvalSpiReadRegisters
      16   SpiritGeneralGetExtRef
        16   -> SdkEvalSpiReadRegisters
      16   SpiritGeneralGetPktType
        16   -> SdkEvalSpiReadRegisters
       0   SpiritGeneralGetSpiritVersion
      16   SpiritGeneralGetXoGm
        16   -> SdkEvalSpiReadRegisters
      16   SpiritGeneralHighPwr
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGeneralSetBatteryLevel
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritGeneralSetExtRef
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
       0   SpiritGeneralSetSpiritVersion
      16   SpiritGeneralSetXoGm
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
     136  ?_0
     104  SpiritGeneralBatteryLevel
      98  SpiritGeneralBrownOut
      34  SpiritGeneralGetBatteryLevel
      40  SpiritGeneralGetDevicePartNumber
      36  SpiritGeneralGetExtRef
      34  SpiritGeneralGetPktType
       6  SpiritGeneralGetSpiritVersion
      36  SpiritGeneralGetXoGm
      98  SpiritGeneralHighPwr
     158  SpiritGeneralSetBatteryLevel
      90  SpiritGeneralSetExtRef
       6  SpiritGeneralSetSpiritVersion
     252  SpiritGeneralSetXoGm
       1  s_xSpiritVersion

 
     1 byte  in section .data
   136 bytes in section .rodata
 1 004 bytes in section .text
 
 1 004 bytes of CODE  memory
   136 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
