###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ACQ\ACQ.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ACQ\ACQ.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\ACQ.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\ACQ.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ACQ\ACQ.c
      1          #include "ACQ.h"
      2          
      3          #include "SDK_EVAL_Config.h"
      4          #include "SPIRIT_Config.h"
      5          #include "SDK_Configuration_Common.h"
      6          #include "SPIRIT_SDK_Application.h"
      7          #include "SPIRIT_Commands.h"
      8          
      9          #define LED_GREEN     LED2 
     10          #define LED_YELLOW    LED1
     11          extern FlagStatus xTxDoneFlag;
     12          
     13          void daas_manage(void);
     14          uint daas_send_read(uint header, uint length, uint type, uint opcode, long address, uint size); 
     15          void message_to_send(void);
     16          void send_ext_read(int address, char size);
     17          void configure(void);
     18          void apply_command(void);
     19          void say_hello(void);
     20          char check_FW(void);
     21          
     22          //extern char frame_send_read[8];      // frame buffor for send read command  //header/lentgh/ext_read/address/address/address/size/CRC//

   \                                 In section .bss, align 4
     23          char frame_send_read[8];      // frame buffor for send read command  //header/lentgh/ext_read/address/address/address/size/CRC//
   \                     frame_send_read:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     24          int ACQ_state;
   \                     ACQ_state:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          int comm_status;
   \                     comm_status:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int loop_state;
   \                     loop_state:
   \   00000000                      DS8 4
     27          //extern int address_table[10];

   \                                 In section .data, align 4
     28          int max_var_ind = 10;
   \                     max_var_ind:
   \   00000000   0x0000000A         DC32 10

   \                                 In section .data, align 4
     29          int address_table[10] = {0x028D,0x028F,0x0291,0x0293,0x0295,0x0297,0x0299,0x029B,0x029D,0x029F};
   \                     address_table:
   \   00000000   0x0000028D         DC32 653, 655, 657, 659, 661, 663, 665, 667, 669, 671
   \              0x0000028F   
   \              0x00000291   
   \              0x00000293   
   \              0x00000295   
   \              0x00000297   
   \              0x00000299   
   \              0x0000029B   
   \              0x0000029D   
   \              0x0000029F   

   \                                 In section .bss, align 4
     30          int var_index;
   \                     var_index:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     31          int size_table[10] = {2,2,2,2,2,2,2,1,1,1};
   \                     size_table:
   \   00000000   0x00000002         DC32 2, 2, 2, 2, 2, 2, 2, 1, 1, 1
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   

   \                                 In section .bss, align 4
     32          int size_index;
   \                     size_index:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     33          int frame_ind = 1;
   \                     frame_ind:
   \   00000000   0x00000001         DC32 1

   \                                 In section .bss, align 4
     34          int frame_size;
   \                     frame_size:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     35          char data_received[10];
   \                     data_received:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     36          char prev_data_received[10];
   \                     prev_data_received:
   \   00000000                      DS8 12

   \                                 In section .data, align 4
     37          char dupa[] ={'d','u','p','a','/n'};
                                               ^
Warning[Pe1422]: multicharacter character literal (potential portability
          problem)

  char dupa[] ={'d','u','p','a','/n'};
                                ^
"E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\ACQ\ACQ.c",37  Warning[Pe069]: 
          integer conversion resulted in truncation
   \                     dupa:
   \   00000000   0x64 0x75          DC8 100, 117, 112, 97, 110, 0, 0, 0
   \              0x70 0x61    
   \              0x6E 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
     38          uint8_t hello[96] = {0xDD, 'h','e','l','l','o',' ','I',' ','a','m',0x00, 0x01,52,0x00};
   \                     hello:
   \   00000000   0xDD 0x68          DC8 221, 104, 101, 108, 108, 111, 32, 73, 32, 97, 109, 0, 1, 52, 0, 0
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x49    
   \              0x20 0x61    
   \              0x6D 0x00    
   \              0x01 0x34    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000027   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000003E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000055   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .data, align 4
     39          int session_number = 5; // how many time to read all var before to sent them
   \                     session_number:
   \   00000000   0x00000005         DC32 5

   \                                 In section .bss, align 4
     40          int session_index;
   \                     session_index:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     41          uint8_t crc;
   \                     crc:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     42          char FW_ID[8];
   \                     FW_ID:
   \   00000000                      DS8 8
     43          
     44          //extern int ACQ_wait_answ_timer;
     45          //extern int ACQ_in_silent_timer;

   \                                 In section .bss, align 4
     46          int ACQ_wait_answ_timer;
   \                     ACQ_wait_answ_timer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     47          int ACQ_loop_timer;
   \                     ACQ_loop_timer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     48          int ACQ_session_timer;
   \                     ACQ_session_timer:
   \   00000000                      DS8 4
     49          
     50            // for Uart it use

   \                                 In section .bss, align 1
     51          char count_rec = 0;
   \                     count_rec:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     52          int data_ready_for_parsing;    // check the answered data
   \                     data_ready_for_parsing:
   \   00000000                      DS8 4
     53          
     54          

   \                                 In section .bss, align 4
     55          int App;                        // status of connection with appliance 
   \                     App:
   \   00000000                      DS8 4
     56          
     57          //////// for SPIRIT connection

   \                                 In section .data, align 4
     58          uint8_t buffer_for_transf[96] = {0xC9, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
   \                     buffer_for_transf:
   \   00000000   0xC9 0x00          DC8 201, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x0A    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005B   0x00 0x00          DC8 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
     59          //header(1), endpoint_nr(2), variables_number(1), time_stamp(6)
     60          

   \                                 In section .data, align 1
     61          uint8_t bft_cnt = 10;
   \                     bft_cnt:
   \   00000000   0x0A               DC8 10

   \                                 In section .bss, align 4
     62          int Spirit_data;
   \                     Spirit_data:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     63          uint8_t tempRegValue[4];
   \                     tempRegValue:
   \   00000000                      DS8 4
     64          
     65          //////// for commands /////
     66          

   \                                 In section .bss, align 4
     67          uint8_t command_buffer[96];
   \                     command_buffer:
   \   00000000                      DS8 96

   \                                 In section .data, align 4
     68          int command_size = 60;
   \                     command_size:
   \   00000000   0x0000003C         DC32 60

   \                                 In section .bss, align 4
     69          int command_index = 0;
   \                     command_index:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     70          int command_pending = 0;
   \                     command_pending:
   \   00000000                      DS8 4
     71          
     72          /*
     73          void daas_manage(void)
     74          {
     75              switch (ACQ_state)
     76                
     77                  case ACQ_Idle:          // communication state idle
     78                  message_to send();      //check if message has to be send
     79                    break;
     80                  
     81                  case ACQ_sending_msg:       //sending during progress
     82                    break;
     83                    
     84                  case ACQ_waiting_answer    // waiting for the answer
     85                          if(ACQ_wait_answ_timer == 0)    // check timeout for the answer               
     86                              comm_status = RX_ERR;
     87                   
     88                                switch (comm_status)
     89                                  
     90                                       case RX_ERR:
     91                                       Free_ACQ_buff();
     92                                       ACQ_state = ACQ_Idle;
     93                                       
     94                                       
     95                                       case RX_RDY:
     96                                         Check_ACQ_answ();
     97                   
     98                     break;
     99                   
    100                  case  ACQ_in_silent_time        // waiting for the silent time end
    101                          if (ACQ_silent_timer == 0)
    102                            ACQ_state = ACQ_Idle;
    103                    break;
    104                   
    105            
    106          } */
    107          

   \                                 In section .text, align 2, keep-with-next
    108          void daas_manage(void)
    109          {
   \                     daas_manage: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    110            switch (ACQ_state)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD007             BEQ.N    ??daas_manage_0
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD014             BEQ.N    ??daas_manage_1
   \   00000010   0xD312             BCC.N    ??daas_manage_2
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xF000 0x80BC      BEQ.W    ??daas_manage_3
   \   00000018   0xD321             BCC.N    ??daas_manage_4
   \   0000001A   0xE11F             B.N      ??daas_manage_5
    111            {
    112              //////////////////////////////////////////////////////////////////////////////////////
    113              case ACQ_Idle:              //ready for next ransmission
    114              SpiritCmdStrobeRx();
   \                     ??daas_manage_0: (+1)
   \   0000001C   0x.... 0x....      BL       SpiritManagementWaCmdStrobeRx
   \   00000020   0x2061             MOVS     R0,#+97
   \   00000022   0x.... 0x....      BL       SpiritCmdStrobeCommand
   \   00000026   0x.... 0x....      BL       SpiritManagementWaRxStartup
    115              ACQ_session_timer = 60;     // 60 ms for successful transmission
   \   0000002A   0x203C             MOVS     R0,#+60
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000030   0x6008             STR      R0,[R1, #+0]
    116              message_to_send();          // ***************start transmisionof the frame (first char - rest by interrupt)****************
   \   00000032   0x.... 0x....      BL       message_to_send
    117              break;
   \   00000036   0xE111             B.N      ??daas_manage_5
    118              ///////////////////////////////////////////////////////////////////////////////////////
    119              case ACQ_sending_msg:       // sending in progress
    120              break;
   \                     ??daas_manage_2: (+1)
   \   00000038   0xE110             B.N      ??daas_manage_5
    121              //////////////////////////////////////////////////////////////////////////////////////
    122              case ACQ_waiting_answer:    // waiting for the answer 
    123              if (ACQ_wait_answ_timer == 0)    // check timeout for the answer
   \                     ??daas_manage_1: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD10B             BNE.N    ??daas_manage_6
    124              {
    125                comm_status = RX_ERR;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    126                // ACQ_state = ACQ_waiting_next_window;
    127                ACQ_state = ACQ_Idle;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000052   0x6008             STR      R0,[R1, #+0]
    128                App = App_disconnected;
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable8_4
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    129               }
    130               break;
   \                     ??daas_manage_6: (+1)
   \   0000005C   0xE0FE             B.N      ??daas_manage_5
    131              ///////////////////////////////////////////////////////////////////////////////////////
    132              case ACQ_waiting_next_window:       // waiting to finish 60ms to let start next session
    133               if (data_ready_for_parsing == 0)
   \                     ??daas_manage_4: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD17B             BNE.N    ??daas_manage_7
    134                {
    135                  crc = data_received[1];
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000006C   0x7840             LDRB     R0,[R0, #+1]
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   00000072   0x7008             STRB     R0,[R1, #+0]
    136                  for (uint8_t rec_index = 2; rec_index < (3 + size_table[var_index-1]); rec_index++)
   \   00000074   0x2002             MOVS     R0,#+2
   \                     ??daas_manage_8: (+1)
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   0000007C   0x.... 0x....      LDR.W    R2,??DataTable8_9
   \   00000080   0x6812             LDR      R2,[R2, #+0]
   \   00000082   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   00000086   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   0000008A   0x1CC9             ADDS     R1,R1,#+3
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xDA0C             BGE.N    ??daas_manage_9
    137                  {
    138                    crc = crc ^ data_received[rec_index];
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   00000094   0x7809             LDRB     R1,[R1, #+0]
   \   00000096   0x.... 0x....      LDR.W    R2,??DataTable8_6
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x5C82             LDRB     R2,[R0, R2]
   \   0000009E   0x4051             EORS     R1,R2,R1
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable8_7
   \   000000A4   0x7011             STRB     R1,[R2, #+0]
    139                  }
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0xE7E5             B.N      ??daas_manage_8
    140                  if (crc == data_received[(3 + size_table[var_index-1])])
   \                     ??daas_manage_9: (+1)
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable8_7
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   000000B4   0x.... 0x....      LDR.W    R2,??DataTable8_8
   \   000000B8   0x.... 0x....      LDR.W    R3,??DataTable8_9
   \   000000BC   0x681B             LDR      R3,[R3, #+0]
   \   000000BE   0xEB12 0x0283      ADDS     R2,R2,R3, LSL #+2
   \   000000C2   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   000000C6   0x1851             ADDS     R1,R2,R1
   \   000000C8   0x78C9             LDRB     R1,[R1, #+3]
   \   000000CA   0x4288             CMP      R0,R1
   \   000000CC   0xD120             BNE.N    ??daas_manage_10
    141                  {
    142                          for (uint8_t rec_index = 3; rec_index < (3 + size_table[var_index-1]); rec_index++)
   \   000000CE   0x2003             MOVS     R0,#+3
   \                     ??daas_manage_11: (+1)
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   000000D6   0x.... 0x....      LDR.W    R2,??DataTable8_9
   \   000000DA   0x6812             LDR      R2,[R2, #+0]
   \   000000DC   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   000000E0   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   000000E4   0x1CC9             ADDS     R1,R1,#+3
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xDA29             BGE.N    ??daas_manage_12
    143                            {
    144                              buffer_for_transf[bft_cnt] = data_received[rec_index];
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0x5C41             LDRB     R1,[R0, R1]
   \   000000F2   0x.... 0x....      LDR.W    R2,??DataTable8_10
   \   000000F6   0x.... 0x....      LDR.W    R3,??DataTable8_11
   \   000000FA   0x781B             LDRB     R3,[R3, #+0]
   \   000000FC   0x5499             STRB     R1,[R3, R2]
    145                              //prev_data_received[rec_index] = data_received[rec_index];
    146                              bft_cnt++;
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable8_11
   \   00000102   0x7809             LDRB     R1,[R1, #+0]
   \   00000104   0x1C49             ADDS     R1,R1,#+1
   \   00000106   0x.... 0x....      LDR.W    R2,??DataTable8_11
   \   0000010A   0x7011             STRB     R1,[R2, #+0]
    147                            } 
   \   0000010C   0x1C40             ADDS     R0,R0,#+1
   \   0000010E   0xE7DF             B.N      ??daas_manage_11
    148                  }
    149                   else
    150                   {
    151                        for (uint8_t rec_index = 3; rec_index < (3 + size_table[var_index-1]); rec_index++)
   \                     ??daas_manage_10: (+1)
   \   00000110   0x2003             MOVS     R0,#+3
   \                     ??daas_manage_13: (+1)
   \   00000112   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   00000118   0x.... 0x....      LDR.W    R2,??DataTable8_9
   \   0000011C   0x6812             LDR      R2,[R2, #+0]
   \   0000011E   0xEB11 0x0182      ADDS     R1,R1,R2, LSL #+2
   \   00000122   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000126   0x1CC9             ADDS     R1,R1,#+3
   \   00000128   0x4288             CMP      R0,R1
   \   0000012A   0xDA08             BGE.N    ??daas_manage_12
    152                            {
    153                              // zostawiamy zawartosc bufora z poprzedniego loopa                    
    154                              bft_cnt++;
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable8_11
   \   00000130   0x7809             LDRB     R1,[R1, #+0]
   \   00000132   0x1C49             ADDS     R1,R1,#+1
   \   00000134   0x.... 0x....      LDR.W    R2,??DataTable8_11
   \   00000138   0x7011             STRB     R1,[R2, #+0]
    155                            } 
   \   0000013A   0x1C40             ADDS     R0,R0,#+1
   \   0000013C   0xE7E9             B.N      ??daas_manage_13
    156                   }
    157          
    158                
    159                
    160                
    161                if (var_index > max_var_ind -1)          //////// check if address_table size reached
   \                     ??daas_manage_12: (+1)
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable8_12
   \   00000142   0x6800             LDR      R0,[R0, #+0]
   \   00000144   0x1E40             SUBS     R0,R0,#+1
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   0000014A   0x6809             LDR      R1,[R1, #+0]
   \   0000014C   0x4288             CMP      R0,R1
   \   0000014E   0xDA03             BGE.N    ??daas_manage_14
    162                      {
    163                        var_index = 0;
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   00000156   0x6008             STR      R0,[R1, #+0]
    164                      }
    165                  data_ready_for_parsing = 1;
   \                     ??daas_manage_14: (+1)
   \   00000158   0x2001             MOVS     R0,#+1
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   0000015E   0x6008             STR      R0,[R1, #+0]
    166                }    
    167                if (ACQ_session_timer == 0)
   \                     ??daas_manage_7: (+1)
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000164   0x6800             LDR      R0,[R0, #+0]
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD111             BNE.N    ??daas_manage_15
    168                  {
    169                    if (var_index != 0)
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable8_9
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD004             BEQ.N    ??daas_manage_16
    170                      {
    171                        ACQ_state = ACQ_Idle;
   \   00000174   0x2000             MOVS     R0,#+0
   \   00000176   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000017A   0x6008             STR      R0,[R1, #+0]
   \   0000017C   0xE007             B.N      ??daas_manage_15
    172                      }
    173                 else
    174                  {
    175                        ACQ_state = ACQ_waiting_next_loop;
   \                     ??daas_manage_16: (+1)
   \   0000017E   0x2004             MOVS     R0,#+4
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000184   0x6008             STR      R0,[R1, #+0]
    176                        Spirit_data = not_transmitted;
   \   00000186   0x2002             MOVS     R0,#+2
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable8_13
   \   0000018C   0x6008             STR      R0,[R1, #+0]
    177                   }
    178              }
    179              break;
   \                     ??daas_manage_15: (+1)
   \   0000018E   0xE065             B.N      ??daas_manage_5
    180              ///////////////////////////////////////////////////////////////////////////////////////////
    181              case ACQ_waiting_next_loop:    // waiting to finish 1000ms before start next loop
    182              if (Spirit_data == not_transmitted && session_index == (session_number-1))
   \                     ??daas_manage_3: (+1)
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable8_13
   \   00000194   0x6800             LDR      R0,[R0, #+0]
   \   00000196   0x2802             CMP      R0,#+2
   \   00000198   0xD12F             BNE.N    ??daas_manage_17
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable8_14
   \   0000019E   0x6800             LDR      R0,[R0, #+0]
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable8_15
   \   000001A4   0x6809             LDR      R1,[R1, #+0]
   \   000001A6   0x1E49             SUBS     R1,R1,#+1
   \   000001A8   0x4288             CMP      R0,R1
   \   000001AA   0xD126             BNE.N    ??daas_manage_17
    183              {
    184                
    185                  crc = buffer_for_transf[0];
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   000001B0   0x7800             LDRB     R0,[R0, #+0]
   \   000001B2   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   000001B6   0x7008             STRB     R0,[R1, #+0]
    186                  for(int i = 1; i < 95; i++)
   \   000001B8   0x2001             MOVS     R0,#+1
   \                     ??daas_manage_18: (+1)
   \   000001BA   0x285F             CMP      R0,#+95
   \   000001BC   0xDA0B             BGE.N    ??daas_manage_19
    187                  {
    188                    crc = crc ^ buffer_for_transf[i];
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   000001C2   0x7809             LDRB     R1,[R1, #+0]
   \   000001C4   0x.... 0x....      LDR.W    R2,??DataTable8_10
   \   000001C8   0x5C82             LDRB     R2,[R0, R2]
   \   000001CA   0x4051             EORS     R1,R2,R1
   \   000001CC   0x.... 0x....      LDR.W    R2,??DataTable8_7
   \   000001D0   0x7011             STRB     R1,[R2, #+0]
    189                  }
   \   000001D2   0x1C40             ADDS     R0,R0,#+1
   \   000001D4   0xE7F1             B.N      ??daas_manage_18
    190                  buffer_for_transf[95] = crc;
   \                     ??daas_manage_19: (+1)
   \   000001D6   0x.... 0x....      LDR.W    R0,??DataTable8_7
   \   000001DA   0x7800             LDRB     R0,[R0, #+0]
   \   000001DC   0x.... 0x....      LDR.W    R1,??DataTable8_10
   \   000001E0   0xF881 0x005F      STRB     R0,[R1, #+95]
    191                  Spirit_data = Spirit_waiting_window;            // data ready to be sent to the Base Station
   \   000001E4   0x2005             MOVS     R0,#+5
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable8_13
   \   000001EA   0x6008             STR      R0,[R1, #+0]
    192                  
    193           //       SdkEvalLedToggle(LED_YELLOW);
    194                  
    195                                                              // moved to the sent_to_the Base_Station function
    196              
    197                  
    198                  
    199                  SpiritCmdStrobeRx();  //frame sent, start wait for the command
   \   000001EC   0x.... 0x....      BL       SpiritManagementWaCmdStrobeRx
   \   000001F0   0x2061             MOVS     R0,#+97
   \   000001F2   0x.... 0x....      BL       SpiritCmdStrobeCommand
   \   000001F6   0x.... 0x....      BL       SpiritManagementWaRxStartup
    200              }
    201              SpiritCmdStrobeRx();  //frame sent, start wait for the command
   \                     ??daas_manage_17: (+1)
   \   000001FA   0x.... 0x....      BL       SpiritManagementWaCmdStrobeRx
   \   000001FE   0x2061             MOVS     R0,#+97
   \   00000200   0x.... 0x....      BL       SpiritCmdStrobeCommand
   \   00000204   0x.... 0x....      BL       SpiritManagementWaRxStartup
    202            
    203            //  if (Spirit_data == not_transmitted && session_index == (session_number-2))
    204            //  {
    205                  
    206            //  }
    207              if (ACQ_loop_timer == 0)
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable8_16
   \   0000020C   0x6800             LDR      R0,[R0, #+0]
   \   0000020E   0x2800             CMP      R0,#+0
   \   00000210   0xD124             BNE.N    ??daas_manage_20
    208              {
    209                if(Spirit_data != Spirit_waiting_window)
   \   00000212   0x.... 0x....      LDR.W    R0,??DataTable8_13
   \   00000216   0x6800             LDR      R0,[R0, #+0]
   \   00000218   0x2805             CMP      R0,#+5
   \   0000021A   0xD01F             BEQ.N    ??daas_manage_20
    210                {
    211                    ACQ_state = ACQ_Idle;
   \   0000021C   0x2000             MOVS     R0,#+0
   \   0000021E   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000222   0x6008             STR      R0,[R1, #+0]
    212                    /*
    213                      if (bft_cnt == sum_data_session * 5)
    214                    */
    215                    session_index++;
   \   00000224   0x.... 0x....      LDR.W    R0,??DataTable8_14
   \   00000228   0x6800             LDR      R0,[R0, #+0]
   \   0000022A   0x1C40             ADDS     R0,R0,#+1
   \   0000022C   0x.... 0x....      LDR.W    R1,??DataTable8_14
   \   00000230   0x6008             STR      R0,[R1, #+0]
    216                    if (session_index == session_number)
   \   00000232   0x.... 0x....      LDR.W    R0,??DataTable8_14
   \   00000236   0x6800             LDR      R0,[R0, #+0]
   \   00000238   0x.... 0x....      LDR.W    R1,??DataTable8_15
   \   0000023C   0x6809             LDR      R1,[R1, #+0]
   \   0000023E   0x4288             CMP      R0,R1
   \   00000240   0xD107             BNE.N    ??daas_manage_21
    217                    {
    218                      session_index = 0;
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x.... 0x....      LDR.W    R1,??DataTable8_14
   \   00000248   0x6008             STR      R0,[R1, #+0]
    219                      bft_cnt = 10;
   \   0000024A   0x200A             MOVS     R0,#+10
   \   0000024C   0x.... 0x....      LDR.W    R1,??DataTable8_11
   \   00000250   0x7008             STRB     R0,[R1, #+0]
    220                    }
    221                    
    222                    ACQ_loop_timer = 1000;      // each variable readed one time per second
   \                     ??daas_manage_21: (+1)
   \   00000252   0xF44F 0x707A      MOV      R0,#+1000
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable8_16
   \   0000025A   0x6008             STR      R0,[R1, #+0]
    223                }
    224              }
    225              break;
    226              ////////////////////////////////////////////////////////////////////////////////////////////
    227            }
    228          }    
   \                     ??daas_manage_20: (+1)
   \                     ??daas_manage_5: (+1)
   \   0000025C   0xBD01             POP      {R0,PC}          ;; return
    229          

   \                                 In section .text, align 2, keep-with-next
    230          void message_to_send(void)
    231          {
   \                     message_to_send: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    232            if (address_table[var_index] != 0)   // check if next address for read is not empty
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8_17
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD027             BEQ.N    ??message_to_send_0
    233                  {             
    234                       send_ext_read(address_table[var_index], size_table[var_index]);    // send ext read message
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF850 0x1021      LDR      R1,[R0, R1, LSL #+2]
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable8_17
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable8_9
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   00000032   0x.... 0x....      BL       send_ext_read
    235                       ACQ_state = ACQ_sending_msg;                                       //change state of ACQ for sending message
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    236                       size_index = size_table[var_index]+4;                                // index of the size for the data to be received
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable8_8
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000004C   0x1D00             ADDS     R0,R0,#+4
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable8_18
   \   00000052   0x6008             STR      R0,[R1, #+0]
    237             //         if (var_index > max_var_ind -2)                                     // check if address_table size reached
    238             //         {
    239             //           var_index = 0;
    240             //         }
    241             //         else
    242             //         {
    243                       var_index++;                                                       // point next variable
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable8_9
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   00000060   0x6008             STR      R0,[R1, #+0]
   \   00000062   0xE003             B.N      ??message_to_send_1
    244             //         }
    245                       
    246                  }
    247            else
    248                  {
    249                       var_index = 0;             //if address empty then go to the first variable 
   \                     ??message_to_send_0: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable8_9
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    250                  }
    251          }
   \                     ??message_to_send_1: (+1)
   \   0000006C   0xBD01             POP      {R0,PC}          ;; return
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void send_ext_read(int address, char size)
    254          {
   \                     send_ext_read: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    255            frame_size = 7;
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable8_19
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    256            frame_send_read[0] = 0xC6;
   \   0000000E   0x20C6             MOVS     R0,#+198
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    257            frame_send_read[1] = 0x04;
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000001C   0x7048             STRB     R0,[R1, #+1]
    258            frame_send_read[2] = 0x80;
   \   0000001E   0x2080             MOVS     R0,#+128
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000024   0x7088             STRB     R0,[R1, #+2]
    259          //  frame_send_read[3] = ((address & 0xFF0000) >>16);                            //header/lentgh/ext_read/address/address/address/size/CRC//
    260            frame_send_read[3] = ((address & 0xFF00) >>8);
   \   00000026   0x1220             ASRS     R0,R4,#+8
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000002C   0x70C8             STRB     R0,[R1, #+3]
    261            frame_send_read[4] = (address & 0xFF);
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   00000032   0x7104             STRB     R4,[R0, #+4]
    262            frame_send_read[5] = size;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   00000038   0x7145             STRB     R5,[R0, #+5]
    263            frame_send_read[6] = frame_send_read[1] ^ frame_send_read[2] ^ frame_send_read[3] ^ frame_send_read[4] ^ frame_send_read[5];
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   0000003E   0x7840             LDRB     R0,[R0, #+1]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000044   0x7889             LDRB     R1,[R1, #+2]
   \   00000046   0x4048             EORS     R0,R1,R0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000004C   0x78C9             LDRB     R1,[R1, #+3]
   \   0000004E   0x4048             EORS     R0,R1,R0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000054   0x7909             LDRB     R1,[R1, #+4]
   \   00000056   0x4048             EORS     R0,R1,R0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000005C   0x7949             LDRB     R1,[R1, #+5]
   \   0000005E   0x4048             EORS     R0,R1,R0
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000064   0x7188             STRB     R0,[R1, #+6]
    264            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   0000006A   0x7800             LDRB     R0,[R0, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x40013804
   \   00000070   0x8008             STRH     R0,[R1, #+0]
    265            frame_ind = 1; 
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable8_22
   \   00000078   0x6008             STR      R0,[R1, #+0]
    266            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   0000007A   0x2201             MOVS     R2,#+1
   \   0000007C   0xF240 0x7127      MOVW     R1,#+1831
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable8_23  ;; 0x40013800
   \   00000084   0x.... 0x....      BL       USART_ITConfig
    267            //indicate to the TC interupt start of the trasmission
    268             //USART_SendData(USART1, frame_send_read[0]);
    269             //while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    270          }
   \   00000088   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    271          

   \                                 In section .text, align 2, keep-with-next
    272          void configure(void)
    273          {
   \                     configure: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    274            uint32_t eeprom_address = 0x08080001;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable8_24  ;; 0x8080001
    275            data_ready_for_parsing = 1;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    276            frame_size = 5;
   \   0000000E   0x2005             MOVS     R0,#+5
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8_19
   \   00000014   0x6008             STR      R0,[R1, #+0]
    277            frame_send_read[0] = 0xC6;
   \   00000016   0x20C6             MOVS     R0,#+198
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    278            frame_send_read[1] = 0x02;
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000024   0x7048             STRB     R0,[R1, #+1]
    279            frame_send_read[2] = 0xB0;
   \   00000026   0x20B0             MOVS     R0,#+176
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000002C   0x7088             STRB     R0,[R1, #+2]
    280            frame_send_read[3] = 0x00;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000034   0x70C8             STRB     R0,[R1, #+3]
    281            frame_send_read[4] = 0xB2;
   \   00000036   0x20B2             MOVS     R0,#+178
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000003C   0x7108             STRB     R0,[R1, #+4]
    282            frame_ind = 1;  
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable8_22
   \   00000044   0x6008             STR      R0,[R1, #+0]
    283            size_index = 8;
   \   00000046   0x2008             MOVS     R0,#+8
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable8_18
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    284            count_rec = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable8_25
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    285            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x40013804
   \   00000060   0x8008             STRH     R0,[R1, #+0]
    286            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0xF240 0x7127      MOVW     R1,#+1831
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable8_23  ;; 0x40013800
   \   0000006C   0x.... 0x....      BL       USART_ITConfig
    287            
    288          
    289          while (ACQ_state == !ACQ_waiting_answer);
   \                     ??configure_0: (+1)
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD0FA             BEQ.N    ??configure_0
    290            while (data_ready_for_parsing > 0)                                          // waiting for the answer
   \                     ??configure_1: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x2801             CMP      R0,#+1
   \   00000082   0xDB09             BLT.N    ??configure_2
    291            {
    292              if (ACQ_wait_answ_timer == 0)
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD1F5             BNE.N    ??configure_1
    293              {
    294                ACQ_state = ACQ_Idle;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000094   0x6008             STR      R0,[R1, #+0]
    295                //break;
    296                return;
   \   00000096   0xE105             B.N      ??configure_3
    297              }
    298            }
    299            FW_ID[0] = data_received[3];
   \                     ??configure_2: (+1)
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000009C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    300            FW_ID[1] = data_received[4];
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   000000A8   0x7900             LDRB     R0,[R0, #+4]
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   000000AE   0x7048             STRB     R0,[R1, #+1]
    301            FW_ID[2] = data_received[5];
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   000000B4   0x7940             LDRB     R0,[R0, #+5]
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   000000BA   0x7088             STRB     R0,[R1, #+2]
    302            FW_ID[3] = data_received[6];
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   000000C0   0x7980             LDRB     R0,[R0, #+6]
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   000000C6   0x70C8             STRB     R0,[R1, #+3]
    303            
    304            
    305            data_ready_for_parsing = 1;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    306            frame_size = 5;
   \   000000D0   0x2005             MOVS     R0,#+5
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable8_19
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    307            frame_send_read[0] = 0xC6;
   \   000000D8   0x20C6             MOVS     R0,#+198
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000000DE   0x7008             STRB     R0,[R1, #+0]
    308            frame_send_read[1] = 0x02;
   \   000000E0   0x2002             MOVS     R0,#+2
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000000E6   0x7048             STRB     R0,[R1, #+1]
    309            frame_send_read[2] = 0xB6;
   \   000000E8   0x20B6             MOVS     R0,#+182
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000000EE   0x7088             STRB     R0,[R1, #+2]
    310            frame_send_read[3] = 0x00;
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000000F6   0x70C8             STRB     R0,[R1, #+3]
    311            frame_send_read[4] = 0xB4;
   \   000000F8   0x20B4             MOVS     R0,#+180
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000000FE   0x7108             STRB     R0,[R1, #+4]
    312            frame_ind = 1; 
   \   00000100   0x2001             MOVS     R0,#+1
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable8_22
   \   00000106   0x6008             STR      R0,[R1, #+0]
    313            size_index = 8;
   \   00000108   0x2008             MOVS     R0,#+8
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable8_18
   \   0000010E   0x6008             STR      R0,[R1, #+0]
    314            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   00000114   0x7800             LDRB     R0,[R0, #+0]
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x40013804
   \   0000011A   0x8008             STRH     R0,[R1, #+0]
    315            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   0000011C   0x2201             MOVS     R2,#+1
   \   0000011E   0xF240 0x7127      MOVW     R1,#+1831
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable8_23  ;; 0x40013800
   \   00000126   0x.... 0x....      BL       USART_ITConfig
    316            
    317            while (data_ready_for_parsing > 0)                                          // waiting for the answer
   \                     ??configure_4: (+1)
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable8_5
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0x2801             CMP      R0,#+1
   \   00000132   0xDB09             BLT.N    ??configure_5
    318              {
    319              if (ACQ_wait_answ_timer == 0)
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD1F5             BNE.N    ??configure_4
    320              {
    321                ACQ_state = ACQ_Idle;
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000144   0x6008             STR      R0,[R1, #+0]
    322                //break;
    323                return;
   \   00000146   0xE0AD             B.N      ??configure_3
    324              }
    325            }
    326            FW_ID[4] = data_received[3];
   \                     ??configure_5: (+1)
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   0000014C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   00000152   0x7108             STRB     R0,[R1, #+4]
    327            FW_ID[5] = data_received[4];
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000158   0x7900             LDRB     R0,[R0, #+4]
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   0000015E   0x7148             STRB     R0,[R1, #+5]
    328            FW_ID[6] = data_received[5];
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000164   0x7940             LDRB     R0,[R0, #+5]
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   0000016A   0x7188             STRB     R0,[R1, #+6]
    329            FW_ID[7] = data_received[6];
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000170   0x7980             LDRB     R0,[R0, #+6]
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable8_26
   \   00000176   0x71C8             STRB     R0,[R1, #+7]
    330            
    331            
    332            
    333            data_ready_for_parsing = 1;
   \   00000178   0x2001             MOVS     R0,#+1
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   0000017E   0x6008             STR      R0,[R1, #+0]
    334            frame_size = 7;
   \   00000180   0x2007             MOVS     R0,#+7
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable8_19
   \   00000186   0x6008             STR      R0,[R1, #+0]
    335            frame_send_read[0] = 0xC6;
   \   00000188   0x20C6             MOVS     R0,#+198
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000018E   0x7008             STRB     R0,[R1, #+0]
    336            frame_send_read[1] = 0x04;
   \   00000190   0x2004             MOVS     R0,#+4
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   00000196   0x7048             STRB     R0,[R1, #+1]
    337            frame_send_read[2] = 0xB7;
   \   00000198   0x20B7             MOVS     R0,#+183
   \   0000019A   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   0000019E   0x7088             STRB     R0,[R1, #+2]
    338            frame_send_read[3] = 0x06;
   \   000001A0   0x2006             MOVS     R0,#+6
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000001A6   0x70C8             STRB     R0,[R1, #+3]
    339            frame_send_read[4] = check_FW();
   \   000001A8   0x.... 0x....      BL       check_FW
   \   000001AC   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000001B0   0x7108             STRB     R0,[R1, #+4]
    340            //frame_send_read[4] = 0x00;
    341            frame_send_read[5] = 0x00;
   \   000001B2   0x2000             MOVS     R0,#+0
   \   000001B4   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000001B8   0x7148             STRB     R0,[R1, #+5]
    342            if (frame_send_read[4] == 0x20)
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable8_20
   \   000001BE   0x7900             LDRB     R0,[R0, #+4]
   \   000001C0   0x2820             CMP      R0,#+32
   \   000001C2   0xD104             BNE.N    ??configure_6
    343              {
    344                frame_send_read[6] = 0x95;
   \   000001C4   0x2095             MOVS     R0,#+149
   \   000001C6   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000001CA   0x7188             STRB     R0,[R1, #+6]
   \   000001CC   0xE003             B.N      ??configure_7
    345              }else
    346              {
    347                frame_send_read[6] = 0xB5;
   \                     ??configure_6: (+1)
   \   000001CE   0x20B5             MOVS     R0,#+181
   \   000001D0   0x.... 0x....      LDR.W    R1,??DataTable8_20
   \   000001D4   0x7188             STRB     R0,[R1, #+6]
    348              }
    349            
    350            frame_ind = 1; 
   \                     ??configure_7: (+1)
   \   000001D6   0x2001             MOVS     R0,#+1
   \   000001D8   0x.... 0x....      LDR.W    R1,??DataTable8_22
   \   000001DC   0x6008             STR      R0,[R1, #+0]
    351            size_index = 5;
   \   000001DE   0x2005             MOVS     R0,#+5
   \   000001E0   0x....             LDR.N    R1,??DataTable8_18
   \   000001E2   0x6008             STR      R0,[R1, #+0]
    352            USART1->DR = (frame_send_read[0] & (uint16_t)0x01FF);                         // send first byte of the frame
   \   000001E4   0x....             LDR.N    R0,??DataTable8_20
   \   000001E6   0x7800             LDRB     R0,[R0, #+0]
   \   000001E8   0x....             LDR.N    R1,??DataTable8_21  ;; 0x40013804
   \   000001EA   0x8008             STRH     R0,[R1, #+0]
    353            USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
   \   000001EC   0x2201             MOVS     R2,#+1
   \   000001EE   0xF240 0x7127      MOVW     R1,#+1831
   \   000001F2   0x....             LDR.N    R0,??DataTable8_23  ;; 0x40013800
   \   000001F4   0x.... 0x....      BL       USART_ITConfig
    354            SdkDelayMs(500);
   \   000001F8   0xF44F 0x70FA      MOV      R0,#+500
   \   000001FC   0x.... 0x....      BL       SdkDelayMs
    355            while (data_ready_for_parsing > 0)                                          // waiting for the answer
   \                     ??configure_8: (+1)
   \   00000200   0x....             LDR.N    R0,??DataTable8_5
   \   00000202   0x6800             LDR      R0,[R0, #+0]
   \   00000204   0x2801             CMP      R0,#+1
   \   00000206   0xDB07             BLT.N    ??configure_9
    356              {
    357              if (ACQ_wait_answ_timer == 0)
   \   00000208   0x....             LDR.N    R0,??DataTable8_2
   \   0000020A   0x6800             LDR      R0,[R0, #+0]
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD1F7             BNE.N    ??configure_8
    358              {
    359                ACQ_state = ACQ_Idle;
   \   00000210   0x2000             MOVS     R0,#+0
   \   00000212   0x....             LDR.N    R1,??DataTable8
   \   00000214   0x6008             STR      R0,[R1, #+0]
    360                //break;
    361                return;
   \   00000216   0xE045             B.N      ??configure_3
    362              }
    363            }
    364            
    365            if (data_received[2] == 0xF7 && data_received[3] == 0x00)
   \                     ??configure_9: (+1)
   \   00000218   0x....             LDR.N    R0,??DataTable8_6
   \   0000021A   0x7880             LDRB     R0,[R0, #+2]
   \   0000021C   0x28F7             CMP      R0,#+247
   \   0000021E   0xD141             BNE.N    ??configure_10
   \   00000220   0x....             LDR.N    R0,??DataTable8_6
   \   00000222   0x78C0             LDRB     R0,[R0, #+3]
   \   00000224   0x2800             CMP      R0,#+0
   \   00000226   0xD13D             BNE.N    ??configure_10
    366            {
    367                  App = App_connected;                                                          //connection successful
   \   00000228   0x2001             MOVS     R0,#+1
   \   0000022A   0x....             LDR.N    R1,??DataTable8_4
   \   0000022C   0x6008             STR      R0,[R1, #+0]
    368                  ACQ_state = ACQ_Idle;    //ready for daas manage
   \   0000022E   0x2000             MOVS     R0,#+0
   \   00000230   0x....             LDR.N    R1,??DataTable8
   \   00000232   0x6008             STR      R0,[R1, #+0]
    369                  // read the adresses storred in eeprom to be read                               //%%%%%%
    370                  max_var_ind = (*(uint8_t*)(eeprom_address - 1));
   \   00000234   0xF814 0x0C01      LDRB     R0,[R4, #-1]
   \   00000238   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000023A   0x....             LDR.N    R1,??DataTable8_12
   \   0000023C   0x6008             STR      R0,[R1, #+0]
    371                  for (int i = 0; i < 10; i++)                                                    //%%%%%%
   \   0000023E   0x2000             MOVS     R0,#+0
   \                     ??configure_11: (+1)
   \   00000240   0x280A             CMP      R0,#+10
   \   00000242   0xDA2D             BGE.N    ??configure_12
    372                  {                                                                               //%%%%%%
    373                    hello[23 +(3 * i)] = size_table[i] = ((*(uint8_t*)(eeprom_address + (3 * i))) & 0x03); //%%%%%%
   \   00000244   0x2103             MOVS     R1,#+3
   \   00000246   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   0000024A   0x7809             LDRB     R1,[R1, #+0]
   \   0000024C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000024E   0xF011 0x0103      ANDS     R1,R1,#0x3
   \   00000252   0x....             LDR.N    R2,??DataTable8_8
   \   00000254   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000258   0x....             LDR.N    R1,??DataTable8_8
   \   0000025A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000025E   0x....             LDR.N    R2,??DataTable8_27
   \   00000260   0x2303             MOVS     R3,#+3
   \   00000262   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000266   0x75D1             STRB     R1,[R2, #+23]
    374                    address_table[i] = (*(uint16_t*)(eeprom_address + (3 * i) +1));               //@@@@@@
   \   00000268   0x2103             MOVS     R1,#+3
   \   0000026A   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   0000026E   0xF8B1 0x1001      LDRH     R1,[R1, #+1]
   \   00000272   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000274   0x....             LDR.N    R2,??DataTable8_17
   \   00000276   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    375                    hello[24 + (3 * i)] = ((address_table[i] & 0xFF00) >> 8);                     //%%%%%%
   \   0000027A   0x....             LDR.N    R1,??DataTable8_17
   \   0000027C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000280   0x1209             ASRS     R1,R1,#+8
   \   00000282   0x....             LDR.N    R2,??DataTable8_27
   \   00000284   0x2303             MOVS     R3,#+3
   \   00000286   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000028A   0x7611             STRB     R1,[R2, #+24]
    376                    hello[25 + (3 * i)] = (address_table[i] & 0xFF);                              //%%%%%%
   \   0000028C   0x....             LDR.N    R1,??DataTable8_17
   \   0000028E   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000292   0x....             LDR.N    R2,??DataTable8_27
   \   00000294   0x2303             MOVS     R3,#+3
   \   00000296   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000029A   0x7651             STRB     R1,[R2, #+25]
    377                  } 
   \   0000029C   0x1C40             ADDS     R0,R0,#+1
   \   0000029E   0xE7CF             B.N      ??configure_11
    378                  say_hello();             //send report to the serwer about connection                                     
   \                     ??configure_12: (+1)
   \   000002A0   0x.... 0x....      BL       say_hello
    379            }
    380          }
   \                     ??configure_10: (+1)
   \                     ??configure_3: (+1)
   \   000002A4   0xBD10             POP      {R4,PC}          ;; return
    381          

   \                                 In section .text, align 2, keep-with-next
    382          void app_connect()
    383          {
   \                     app_connect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    384            hello[11] = buffer_for_transf[1] = ((endpoint_address & 0xFF00) >> 8);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable8_10
   \   00000006   0x7048             STRB     R0,[R1, #+1]
   \   00000008   0x....             LDR.N    R0,??DataTable8_10
   \   0000000A   0x7840             LDRB     R0,[R0, #+1]
   \   0000000C   0x....             LDR.N    R1,??DataTable8_27
   \   0000000E   0x72C8             STRB     R0,[R1, #+11]
    385            hello[12] = buffer_for_transf[2] = (endpoint_address & 0xFF);
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x....             LDR.N    R1,??DataTable8_10
   \   00000014   0x7088             STRB     R0,[R1, #+2]
   \   00000016   0x....             LDR.N    R0,??DataTable8_10
   \   00000018   0x7880             LDRB     R0,[R0, #+2]
   \   0000001A   0x....             LDR.N    R1,??DataTable8_27
   \   0000001C   0x7308             STRB     R0,[R1, #+12]
    386            configure();
   \   0000001E   0x.... 0x....      BL       configure
    387            
    388          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    389          

   \                                 In section .text, align 2, keep-with-next
    390          void apply_command(void)
    391          {
   \                     apply_command: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    392            uint32_t eeprom_address = 0x08080001;
   \   00000002   0x....             LDR.N    R4,??DataTable8_24  ;; 0x8080001
    393            if(command_buffer[0] == 0xC6)  // check if request to configure of variables
   \   00000004   0x....             LDR.N    R0,??DataTable8_28
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x28C6             CMP      R0,#+198
   \   0000000A   0xD165             BNE.N    ??apply_command_0
    394            {
    395              
    396                if (((command_buffer[1] * 256) + command_buffer[2]) == endpoint_address)
   \   0000000C   0x....             LDR.N    R0,??DataTable8_28
   \   0000000E   0x7840             LDRB     R0,[R0, #+1]
   \   00000010   0xF44F 0x7180      MOV      R1,#+256
   \   00000014   0x....             LDR.N    R2,??DataTable8_28
   \   00000016   0x7892             LDRB     R2,[R2, #+2]
   \   00000018   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000001C   0x2804             CMP      R0,#+4
   \   0000001E   0xD15B             BNE.N    ??apply_command_0
    397                  {
    398                    max_var_ind = command_buffer[4];
   \   00000020   0x....             LDR.N    R0,??DataTable8_28
   \   00000022   0x7900             LDRB     R0,[R0, #+4]
   \   00000024   0x....             LDR.N    R1,??DataTable8_12
   \   00000026   0x6008             STR      R0,[R1, #+0]
    399                    for(int i = 0; i < max_var_ind; i++)
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??apply_command_1: (+1)
   \   0000002A   0x....             LDR.N    R1,??DataTable8_12
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xDA1A             BGE.N    ??apply_command_2
    400                      {
    401                        size_table[i] = command_buffer[5 + (i * 5)];
   \   00000032   0x....             LDR.N    R1,??DataTable8_28
   \   00000034   0x2205             MOVS     R2,#+5
   \   00000036   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   0000003A   0x7949             LDRB     R1,[R1, #+5]
   \   0000003C   0x....             LDR.N    R2,??DataTable8_8
   \   0000003E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    402                         address_table[i] = ((command_buffer[8 + (i * 5)] * 256) + command_buffer[9 + (i * 5)]);
   \   00000042   0x....             LDR.N    R1,??DataTable8_28
   \   00000044   0x2205             MOVS     R2,#+5
   \   00000046   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   0000004A   0x7A09             LDRB     R1,[R1, #+8]
   \   0000004C   0xF44F 0x7280      MOV      R2,#+256
   \   00000050   0x....             LDR.N    R3,??DataTable8_28
   \   00000052   0x2505             MOVS     R5,#+5
   \   00000054   0xFB05 0x3300      MLA      R3,R5,R0,R3
   \   00000058   0x7A5B             LDRB     R3,[R3, #+9]
   \   0000005A   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   0000005E   0x....             LDR.N    R2,??DataTable8_17
   \   00000060   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    403                      }
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0xE7E0             B.N      ??apply_command_1
    404                    // need to store into the eeprom memory
    405                    DATA_EEPROM_Unlock();
   \                     ??apply_command_2: (+1)
   \   00000068   0x.... 0x....      BL       DATA_EEPROM_Unlock
    406                    DATA_EEPROM_ProgramByte((eeprom_address - 1) ,max_var_ind);
   \   0000006C   0x....             LDR.N    R0,??DataTable8_12
   \   0000006E   0x6801             LDR      R1,[R0, #+0]
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0x1E60             SUBS     R0,R4,#+1
   \   00000074   0x.... 0x....      BL       DATA_EEPROM_ProgramByte
    407                    for (int i = 0; i < 10; i++)
   \   00000078   0x2500             MOVS     R5,#+0
   \                     ??apply_command_3: (+1)
   \   0000007A   0x2D0A             CMP      R5,#+10
   \   0000007C   0xDA14             BGE.N    ??apply_command_4
    408                      {
    409                         DATA_EEPROM_ProgramByte((eeprom_address + (3 * i)) ,size_table[i]);
   \   0000007E   0x....             LDR.N    R0,??DataTable8_8
   \   00000080   0xF850 0x1025      LDR      R1,[R0, R5, LSL #+2]
   \   00000084   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000086   0x2003             MOVS     R0,#+3
   \   00000088   0xFB00 0x4005      MLA      R0,R0,R5,R4
   \   0000008C   0x.... 0x....      BL       DATA_EEPROM_ProgramByte
    410                         DATA_EEPROM_ProgramHalfWord((eeprom_address + (3 * i) +1) ,address_table[i]);
   \   00000090   0x....             LDR.N    R0,??DataTable8_17
   \   00000092   0xF850 0x1025      LDR      R1,[R0, R5, LSL #+2]
   \   00000096   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000098   0x2003             MOVS     R0,#+3
   \   0000009A   0xFB00 0x4005      MLA      R0,R0,R5,R4
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0x.... 0x....      BL       DATA_EEPROM_ProgramHalfWord
    411                         
    412                      }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \   000000A6   0xE7E8             B.N      ??apply_command_3
    413                    DATA_EEPROM_Lock();
   \                     ??apply_command_4: (+1)
   \   000000A8   0x.... 0x....      BL       DATA_EEPROM_Lock
    414                    // send back message with confirmation the data storing         
    415                     command_buffer[0] = 0xCF;
   \   000000AC   0x20CF             MOVS     R0,#+207
   \   000000AE   0x....             LDR.N    R1,??DataTable8_28
   \   000000B0   0x7008             STRB     R0,[R1, #+0]
    416                     SdkEvalLedToggle(LED_YELLOW);
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      BL       SdkEvalLedToggle
    417                     SpiritCmdStrobeFlushTxFifo();
   \   000000B8   0x2072             MOVS     R0,#+114
   \   000000BA   0x.... 0x....      BL       SpiritCmdStrobeCommand
    418          //           SpiritSpiWriteLinearFifo(command_buffer[3], command_buffer);
    419                     SpiritSpiWriteLinearFifo(96, command_buffer);
   \   000000BE   0x....             LDR.N    R1,??DataTable8_28
   \   000000C0   0x2060             MOVS     R0,#+96
   \   000000C2   0x.... 0x....      BL       SdkEvalSpiWriteFifo
    420                     SpiritCmdStrobeTx();
   \   000000C6   0x.... 0x....      BL       SpiritManagementWaCmdStrobeTx
   \   000000CA   0x2060             MOVS     R0,#+96
   \   000000CC   0x.... 0x....      BL       SpiritCmdStrobeCommand
    421                     while(!xTxDoneFlag);  // Wait till Transmission is done
   \                     ??apply_command_5: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable8_29
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD0FB             BEQ.N    ??apply_command_5
    422                  }  
    423            }
    424            if(command_buffer[0] == 0xAF)  // check if request to start timer
   \                     ??apply_command_0: (+1)
   \   000000D8   0x....             LDR.N    R0,??DataTable8_28
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x28AF             CMP      R0,#+175
   \   000000DE   0xD106             BNE.N    ??apply_command_6
    425            {
    426              if(command_buffer[3] == 0x0A)
   \   000000E0   0x....             LDR.N    R0,??DataTable8_28
   \   000000E2   0x78C0             LDRB     R0,[R0, #+3]
   \   000000E4   0x280A             CMP      R0,#+10
   \   000000E6   0xD102             BNE.N    ??apply_command_6
    427              {
    428                SysyTickCnt = 0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x....             LDR.N    R1,??DataTable8_30
   \   000000EC   0x6008             STR      R0,[R1, #+0]
    429              }
    430            }
    431            command_pending = 0;
   \                     ??apply_command_6: (+1)
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x....             LDR.N    R1,??DataTable8_31
   \   000000F2   0x6008             STR      R0,[R1, #+0]
    432          }
   \   000000F4   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    433          

   \                                 In section .text, align 2, keep-with-next
    434          void say_hello(void)
    435          {
   \                     say_hello: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    436                for(int i = 0; i <8; i++)  //  put the FW if readed
   \   00000002   0x2000             MOVS     R0,#+0
   \                     ??say_hello_0: (+1)
   \   00000004   0x2808             CMP      R0,#+8
   \   00000006   0xDA06             BGE.N    ??say_hello_1
    437                {
    438                  hello[i+15] = FW_ID[i];
   \   00000008   0x....             LDR.N    R1,??DataTable8_26
   \   0000000A   0x5C41             LDRB     R1,[R0, R1]
   \   0000000C   0x....             LDR.N    R2,??DataTable8_27
   \   0000000E   0x1882             ADDS     R2,R0,R2
   \   00000010   0x73D1             STRB     R1,[R2, #+15]
    439                }
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0xE7F6             B.N      ??say_hello_0
    440                  hello[14] = App;         // put the status of connection
   \                     ??say_hello_1: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable8_4
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable8_27
   \   0000001C   0x7388             STRB     R0,[R1, #+14]
    441                crc = hello[0];
   \   0000001E   0x....             LDR.N    R0,??DataTable8_27
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x....             LDR.N    R1,??DataTable8_7
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    442                for (int i = 1; i < 95; i++)
   \   00000026   0x2001             MOVS     R0,#+1
   \                     ??say_hello_2: (+1)
   \   00000028   0x285F             CMP      R0,#+95
   \   0000002A   0xDA08             BGE.N    ??say_hello_3
    443                {
    444                  crc = crc ^ hello[i];
   \   0000002C   0x....             LDR.N    R1,??DataTable8_7
   \   0000002E   0x7809             LDRB     R1,[R1, #+0]
   \   00000030   0x....             LDR.N    R2,??DataTable8_27
   \   00000032   0x5C82             LDRB     R2,[R0, R2]
   \   00000034   0x4051             EORS     R1,R2,R1
   \   00000036   0x....             LDR.N    R2,??DataTable8_7
   \   00000038   0x7011             STRB     R1,[R2, #+0]
    445                }
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0xE7F4             B.N      ??say_hello_2
    446                hello[95] = crc;
   \                     ??say_hello_3: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable8_7
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x....             LDR.N    R1,??DataTable8_27
   \   00000044   0xF881 0x005F      STRB     R0,[R1, #+95]
    447                  SpiritCmdStrobeFlushTxFifo();
   \   00000048   0x2072             MOVS     R0,#+114
   \   0000004A   0x.... 0x....      BL       SpiritCmdStrobeCommand
    448                  SpiritSpiWriteLinearFifo(96, hello);
   \   0000004E   0x....             LDR.N    R1,??DataTable8_27
   \   00000050   0x2060             MOVS     R0,#+96
   \   00000052   0x.... 0x....      BL       SdkEvalSpiWriteFifo
    449                  SpiritCmdStrobeTx();
   \   00000056   0x.... 0x....      BL       SpiritManagementWaCmdStrobeTx
   \   0000005A   0x2060             MOVS     R0,#+96
   \   0000005C   0x.... 0x....      BL       SpiritCmdStrobeCommand
    450                  while(!xTxDoneFlag);  // Wait till Transmission is done
   \                     ??say_hello_4: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable8_29
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0FB             BEQ.N    ??say_hello_4
    451          }
   \   00000068   0xBD01             POP      {R0,PC}          ;; return
    452          

   \                                 In section .text, align 2, keep-with-next
    453          char check_FW(void)
    454          {
    455              if (FW_ID[0] == 'T' && FW_ID[1] == 'O' && FW_ID[2] == 'C')
   \                     check_FW: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8_26
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2854             CMP      R0,#+84
   \   00000006   0xD109             BNE.N    ??check_FW_0
   \   00000008   0x....             LDR.N    R0,??DataTable8_26
   \   0000000A   0x7840             LDRB     R0,[R0, #+1]
   \   0000000C   0x284F             CMP      R0,#+79
   \   0000000E   0xD105             BNE.N    ??check_FW_0
   \   00000010   0x....             LDR.N    R0,??DataTable8_26
   \   00000012   0x7880             LDRB     R0,[R0, #+2]
   \   00000014   0x2843             CMP      R0,#+67
   \   00000016   0xD101             BNE.N    ??check_FW_0
    456              {
    457                return 0x20;
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0xE00E             B.N      ??check_FW_1
    458              }
    459                  if (FW_ID[0] == 'U' && FW_ID[1] == 'F' && FW_ID[2] == 'B')
   \                     ??check_FW_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable8_26
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2855             CMP      R0,#+85
   \   00000022   0xD109             BNE.N    ??check_FW_2
   \   00000024   0x....             LDR.N    R0,??DataTable8_26
   \   00000026   0x7840             LDRB     R0,[R0, #+1]
   \   00000028   0x2846             CMP      R0,#+70
   \   0000002A   0xD105             BNE.N    ??check_FW_2
   \   0000002C   0x....             LDR.N    R0,??DataTable8_26
   \   0000002E   0x7880             LDRB     R0,[R0, #+2]
   \   00000030   0x2842             CMP      R0,#+66
   \   00000032   0xD101             BNE.N    ??check_FW_2
    460              {
    461                return 0x20;
   \   00000034   0x2020             MOVS     R0,#+32
   \   00000036   0xE000             B.N      ??check_FW_1
    462              }
    463              
    464              return 0x00;
   \                     ??check_FW_2: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??check_FW_1: (+1)
   \   0000003A   0x4770             BX       LR               ;; return
    465          }
    466          

   \                                 In section .text, align 2, keep-with-next
    467          void send_to_Base_Station(void)
    468              {
   \                     send_to_Base_Station: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    469                  SpiritCmdStrobeFlushTxFifo();
   \   00000002   0x2072             MOVS     R0,#+114
   \   00000004   0x.... 0x....      BL       SpiritCmdStrobeCommand
    470                  SpiritSpiWriteLinearFifo(96, buffer_for_transf);
   \   00000008   0x....             LDR.N    R1,??DataTable8_10
   \   0000000A   0x2060             MOVS     R0,#+96
   \   0000000C   0x.... 0x....      BL       SdkEvalSpiWriteFifo
    471                  SpiritCmdStrobeTx();
   \   00000010   0x.... 0x....      BL       SpiritManagementWaCmdStrobeTx
   \   00000014   0x2060             MOVS     R0,#+96
   \   00000016   0x.... 0x....      BL       SpiritCmdStrobeCommand
    472                  while(!xTxDoneFlag);  // Wait till Transmission is done
   \                     ??send_to_Base_Station_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable8_29
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD0FB             BEQ.N    ??send_to_Base_Station_0
    473                  //uint8_t tempRegValue[4];
    474                  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
   \   00000022   0x....             LDR.N    R2,??DataTable8_32
   \   00000024   0x2104             MOVS     R1,#+4
   \   00000026   0x20FA             MOVS     R0,#+250
   \   00000028   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x....             LDR.N    R0,??DataTable8_33
   \   00000030   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000034   0x8001             STRH     R1,[R0, #+0]
    475                  Spirit_data = transmitted;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x....             LDR.N    R1,??DataTable8_13
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    476              }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     ACQ_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ACQ_session_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     ACQ_wait_answ_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     comm_status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     App

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     data_ready_for_parsing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     data_received

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     crc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     size_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     var_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     buffer_for_transf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     bft_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     max_var_ind

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     Spirit_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     session_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     session_number

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     ACQ_loop_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     address_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     size_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x........         DC32     frame_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x........         DC32     frame_send_read

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x40013804         DC32     0x40013804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x........         DC32     frame_ind

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x08080001         DC32     0x8080001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x........         DC32     count_rec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x........         DC32     FW_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x........         DC32     hello

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x........         DC32     command_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x........         DC32     xTxDoneFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x........         DC32     SysyTickCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x........         DC32     command_pending

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x........         DC32     tempRegValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x........         DC32     g_xStatus

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   app_connect
         8   -> configure
      16   apply_command
        16   -> DATA_EEPROM_Lock
        16   -> DATA_EEPROM_ProgramByte
        16   -> DATA_EEPROM_ProgramHalfWord
        16   -> DATA_EEPROM_Unlock
        16   -> SdkEvalLedToggle
        16   -> SdkEvalSpiWriteFifo
        16   -> SpiritCmdStrobeCommand
        16   -> SpiritManagementWaCmdStrobeTx
       0   check_FW
       8   configure
         8   -> SdkDelayMs
         8   -> USART_ITConfig
         8   -> check_FW
         8   -> say_hello
       8   daas_manage
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritManagementWaCmdStrobeRx
         8   -> SpiritManagementWaRxStartup
         8   -> message_to_send
       8   message_to_send
         8   -> send_ext_read
       8   say_hello
         8   -> SdkEvalSpiWriteFifo
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritManagementWaCmdStrobeTx
      16   send_ext_read
        16   -> USART_ITConfig
       8   send_to_Base_Station
         8   -> SdkEvalSpiReadRegisters
         8   -> SdkEvalSpiWriteFifo
         8   -> SpiritCmdStrobeCommand
         8   -> SpiritManagementWaCmdStrobeTx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
       4  ACQ_loop_timer
       4  ACQ_session_timer
       4  ACQ_state
       4  ACQ_wait_answ_timer
       4  App
       8  FW_ID
       4  Spirit_data
      40  address_table
      36  app_connect
     246  apply_command
       1  bft_cnt
      96  buffer_for_transf
      60  check_FW
       4  comm_status
      96  command_buffer
       4  command_index
       4  command_pending
       4  command_size
     678  configure
       1  count_rec
       1  crc
     606  daas_manage
       4  data_ready_for_parsing
      12  data_received
       8  dupa
       4  frame_ind
       8  frame_send_read
       4  frame_size
      96  hello
       4  loop_state
       4  max_var_ind
     110  message_to_send
      12  prev_data_received
     106  say_hello
     138  send_ext_read
      62  send_to_Base_Station
       4  session_index
       4  session_number
       4  size_index
      40  size_table
       4  tempRegValue
       4  var_index

 
   202 bytes in section .bss
   297 bytes in section .data
 2 178 bytes in section .text
 
 2 178 bytes of CODE memory
   499 bytes of DATA memory

Errors: none
Warnings: 2
