###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Eval_STM32L\Source\src\SDK_EVAL_Spi_Driver.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Eval_STM32L\Source\src\SDK_EVAL_Spi_Driver.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SDK_EVAL_Spi_Driver.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SDK_EVAL_Spi_Driver.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\SDK_Eval_STM32L\Source\src\SDK_EVAL_Spi_Driver.c
      1          /**
      2          * @file    SDK_EVAL_V3_SPI_Driver.c
      3          * @author  High End Analog & RF BU - AMS
      4          * @version V3.0.0
      5          * @date    April 01, 2013
      6          * @brief   This file provides all the low level SPI API to access to STS2001 using a software watchdog timer to avoid stuck situation.
      7          * @details
      8          *
      9          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15          *
     16          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19          *
     20          * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     21          *
     22          */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32l1xx.h"
     26          #include "MCU_Interface.h"
     27          #include "SDK_EVAL_Config.h"
     28          
     29          #ifdef FREERTOS
     30          #include "FreeRTOS.h"
     31          #include "semphr.h"
     32          
     33          static xSemaphoreHandle xSpiMutex;
     34          
     35          #endif
     36          
     37          /** @addtogroup SDK_EVAL_STM32L
     38          * @{
     39          */
     40          
     41          
     42          /** @addtogroup SDK_EVAL_Spi                    SDK EVAL Spi
     43           * @brief SPI functions implementation.
     44           * @details This file implements the SPIRIT1 Library SPI interface functions. Please see the MCU_Interface.h file of Spirit1_Library for more details.
     45           * @{
     46           */
     47          
     48          
     49          /** @defgroup SPI_Private_TypesDefinitions
     50          * @{
     51          */
     52          
     53          
     54          /**
     55          * @}
     56          */
     57          
     58          
     59          /** @defgroup SPI_Private_Defines
     60          * @{
     61          */
     62          
     63          
     64          #define CS_TO_SCLK_DELAY  0x0001
     65          #define CLK_TO_CS_DELAY   0x0001
     66          
     67          /** @defgroup SPI_Headers
     68          * @{
     69          */
     70          
     71          #define HEADER_WRITE_MASK     0x00 /*!< Write mask for header byte*/
     72          #define HEADER_READ_MASK      0x01 /*!< Read mask for header byte*/
     73          #define HEADER_ADDRESS_MASK   0x00 /*!< Address mask for header byte*/
     74          #define HEADER_COMMAND_MASK   0x80 /*!< Command mask for header byte*/
     75          
     76          #define LINEAR_FIFO_ADDRESS 0xFF  /*!< Linear FIFO address*/
     77          
     78          
     79          /**
     80          * @}
     81          */
     82          
     83          
     84          /** @defgroup SDK_EVAL_Spi_Peripheral_Gpio
     85           * @{
     86           */
     87          
     88          #define SDK_EVAL_V3_SPI_PERIPH_NB                  SPI1
     89          #define SDK_EVAL_V3_SPI_PERIPH_RCC                 RCC_APB2Periph_SPI1
     90            
     91          
     92          /* Defines for MOSI pin*/
     93          #define SDK_EVAL_V3_SPI_PERIPH_MOSI_PORT           GPIOA
     94          #define SDK_EVAL_V3_SPI_PERIPH_MOSI_PIN            GPIO_Pin_7
     95          #define SDK_EVAL_V3_SPI_PERIPH_MOSI_AF             GPIO_AF_SPI1
     96          #define SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC            RCC_AHBPeriph_GPIOA
     97          #define SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC_SOURCE     GPIO_PinSource7
     98          
     99          /* Defines for MISO pin */
    100          #define SDK_EVAL_V3_SPI_PERIPH_MISO_PORT           GPIOA
    101          #define SDK_EVAL_V3_SPI_PERIPH_MISO_PIN            GPIO_Pin_6
    102          #define SDK_EVAL_V3_SPI_PERIPH_MISO_AF             GPIO_AF_SPI1
    103          #define SDK_EVAL_V3_SPI_PERIPH_MISO_RCC            RCC_AHBPeriph_GPIOA
    104          #define SDK_EVAL_V3_SPI_PERIPH_MISO_RCC_SOURCE     GPIO_PinSource6
    105          
    106          /* Defines for SCLK pin */
    107          #define SDK_EVAL_V3_SPI_PERIPH_SCLK_PORT           GPIOA
    108          #define SDK_EVAL_V3_SPI_PERIPH_SCLK_PIN            GPIO_Pin_5
    109          #define SDK_EVAL_V3_SPI_PERIPH_SCLK_AF             GPIO_AF_SPI1
    110          #define SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC            RCC_AHBPeriph_GPIOA
    111          #define SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC_SOURCE     GPIO_PinSource5
    112          
    113          /* Defines for chip select pin */
    114          #define SDK_EVAL_V3_SPI_PERIPH_CS_PORT             GPIOA
    115          #define SDK_EVAL_V3_SPI_PERIPH_CS_PIN              GPIO_Pin_4
    116          #define SDK_EVAL_V3_SPI_PERIPH_CS_RCC              RCC_AHBPeriph_GPIOA
    117          #define SDK_EVAL_V3_SPI_PERIPH_CS_RCC_SOURCE       GPIO_PinSource4
    118          
    119          
    120          #define SDK_EVAL_V2_SPI_PERIPH_NB                  SPI1
    121          #define SDK_EVAL_V2_SPI_PERIPH_RCC                 RCC_APB2Periph_SPI1
    122          
    123          /* Defines for MOSI pin*/
    124          #define SDK_EVAL_V2_SPI_PERIPH_MOSI_PORT           GPIOE
    125          #define SDK_EVAL_V2_SPI_PERIPH_MOSI_PIN            GPIO_Pin_15
    126          #define SDK_EVAL_V2_SPI_PERIPH_MOSI_AF             GPIO_AF_SPI1
    127          #define SDK_EVAL_V2_SPI_PERIPH_MOSI_RCC            RCC_AHBPeriph_GPIOE
    128          #define SDK_EVAL_V2_SPI_PERIPH_MOSI_RCC_SOURCE     GPIO_PinSource15
    129          
    130          /* Defines for MISO pin */
    131          #define SDK_EVAL_V2_SPI_PERIPH_MISO_PORT           GPIOE
    132          #define SDK_EVAL_V2_SPI_PERIPH_MISO_PIN            GPIO_Pin_14
    133          #define SDK_EVAL_V2_SPI_PERIPH_MISO_AF             GPIO_AF_SPI1
    134          #define SDK_EVAL_V2_SPI_PERIPH_MISO_RCC            RCC_AHBPeriph_GPIOE
    135          #define SDK_EVAL_V2_SPI_PERIPH_MISO_RCC_SOURCE     GPIO_PinSource14
    136          
    137          /* Defines for SCLK pin */
    138          #define SDK_EVAL_V2_SPI_PERIPH_SCLK_PORT           GPIOE
    139          #define SDK_EVAL_V2_SPI_PERIPH_SCLK_PIN            GPIO_Pin_13
    140          #define SDK_EVAL_V2_SPI_PERIPH_SCLK_AF             GPIO_AF_SPI1
    141          #define SDK_EVAL_V2_SPI_PERIPH_SCLK_RCC            RCC_AHBPeriph_GPIOE
    142          #define SDK_EVAL_V2_SPI_PERIPH_SCLK_RCC_SOURCE     GPIO_PinSource13
    143          
    144          /* Defines for chip select pin */
    145          #define SDK_EVAL_V2_SPI_PERIPH_CS_PORT             GPIOE
    146          #define SDK_EVAL_V2_SPI_PERIPH_CS_PIN              GPIO_Pin_12
    147          #define SDK_EVAL_V2_SPI_PERIPH_CS_RCC              RCC_AHBPeriph_GPIOE
    148          #define SDK_EVAL_V2_SPI_PERIPH_CS_RCC_SOURCE       GPIO_PinSource12
    149          
    150              
    151          
    152          /**
    153           * @}
    154           */
    155          
    156          /**
    157          * @}
    158          */
    159          
    160          
    161          /** @defgroup SPI_Private_Macros
    162          * @{
    163          */
    164          #define BUILT_HEADER(add_comm, w_r) (add_comm | w_r)  /*!< macro to build the header byte*/
    165          #define WRITE_HEADER    BUILT_HEADER(HEADER_ADDRESS_MASK, HEADER_WRITE_MASK) /*!< macro to build the write header byte*/
    166          #define READ_HEADER     BUILT_HEADER(HEADER_ADDRESS_MASK, HEADER_READ_MASK)  /*!< macro to build the read header byte*/
    167          #define COMMAND_HEADER  BUILT_HEADER(HEADER_COMMAND_MASK, HEADER_WRITE_MASK) /*!< macro to build the command header byte*/
    168          
    169          
    170          /**
    171          * @}
    172          */
    173          
    174          
    175          
    176          /** @defgroup SPI_Private_Variables
    177          * @{
    178          */
    179          

   \                                 In section .data, align 4
    180          static SPI_TypeDef* s_SpiPortVersion[3] = {SDK_EVAL_V2_SPI_PERIPH_NB, SDK_EVAL_V3_SPI_PERIPH_NB, SDK_EVAL_V3_SPI_PERIPH_NB};
   \                     s_SpiPortVersion:
   \   00000000   0x40013000         DC32 40013000H, 40013000H, 40013000H
   \              0x40013000   
   \              0x40013000   

   \                                 In section .data, align 4
    181          GPIO_TypeDef* s_vectpxSpiCsPortVersion[3] = {SDK_EVAL_V2_SPI_PERIPH_CS_PORT, SDK_EVAL_V3_SPI_PERIPH_CS_PORT, SDK_EVAL_V3_SPI_PERIPH_CS_PORT};
   \                     s_vectpxSpiCsPortVersion:
   \   00000000   0x40021000         DC32 40021000H, 40020000H, 40020000H
   \              0x40020000   
   \              0x40020000   

   \                                 In section .rodata, align 4
    182          static const uint16_t s_vectpxSpiCsPinVersion[3] = {SDK_EVAL_V2_SPI_PERIPH_CS_PIN, SDK_EVAL_V3_SPI_PERIPH_CS_PIN, SDK_EVAL_V3_SPI_PERIPH_CS_PIN};
   \                     s_vectpxSpiCsPinVersion:
   \   00000000   0x1000 0x0010      DC16 4096, 16, 16
   \              0x0010       
   \   00000006   0x00 0x00          DC8 0, 0
    183          

   \                                 In section .bss, align 4
    184          static SPI_TypeDef* s_SpiPort;
   \                     s_SpiPort:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    185          static GPIO_TypeDef** s_vectpxSpiPort;
   \                     s_vectpxSpiPort:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    186          static uint16_t* s_vectnSpiPin;
   \                     s_vectnSpiPin:
   \   00000000                      DS8 4
    187          
    188          
    189          /**
    190          * @}
    191          */
    192          
    193          
    194          /** @defgroup SPI_Private_FunctionPrototypes
    195          * @{
    196          */
    197          
    198          
    199          
    200          
    201          #ifdef FREERTOS
    202          #define SPI_ENTER_CRITICAL()           xSemaphoreTake(xSpiMutex, portMAX_DELAY);
    203          #define SPI_EXIT_CRITICAL()            xSemaphoreGive(xSpiMutex);
    204          #else
    205          #define SPI_ENTER_CRITICAL()           __disable_irq()
    206          #define SPI_EXIT_CRITICAL()            __enable_irq()
    207          #endif
    208          
    209          /**
    210          * @}
    211          */
    212          
    213          
    214          /** @defgroup SPI_Private_Functions
    215          * @{
    216          */
    217          
    218          #define SdkEvalSPICSLow()        {(*s_vectpxSpiPort)->BSRRH = *s_vectnSpiPin;}
    219          #define SdkEvalSPICSHigh()       {(*s_vectpxSpiPort)->BSRRL = *s_vectnSpiPin;}
    220          
    221          /**
    222          * @brief  Initializes the SPI for STS2001
    223          * @param  None
    224          * @retval None
    225          */

   \                                 In section .text, align 2, keep-with-next
    226          void SdkEvalSpiInit(void)
    227          {
   \                     SdkEvalSpiInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    228            SPI_InitTypeDef SPI_InitStructure;
    229            GPIO_InitTypeDef GPIO_InitStructure;
    230          
    231            s_SpiPort = s_SpiPortVersion[SdkEvalGetVersion()];
   \   00000004   0x.... 0x....      BL       SdkEvalGetVersion
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable5
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000016   0x6008             STR      R0,[R1, #+0]
    232            s_vectnSpiPin = (uint16_t *)&s_vectpxSpiCsPinVersion[SdkEvalGetVersion()];
   \   00000018   0x.... 0x....      BL       SdkEvalGetVersion
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   00000020   0xEB11 0x0040      ADDS     R0,R1,R0, LSL #+1
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000028   0x6008             STR      R0,[R1, #+0]
    233            s_vectpxSpiPort = &s_vectpxSpiCsPortVersion[SdkEvalGetVersion()];
   \   0000002A   0x.... 0x....      BL       SdkEvalGetVersion
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   00000032   0xEB11 0x0080      ADDS     R0,R1,R0, LSL #+2
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    234              
    235            if(!SdkEvalGetVersion())
   \   0000003C   0x.... 0x....      BL       SdkEvalGetVersion
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD153             BNE.N    ??SdkEvalSpiInit_0
    236            {
    237              /* Enable SPI periph and SCLK, MOSI, MISO and CS GPIO clocks */
    238              RCC_APB2PeriphClockCmd(SDK_EVAL_V2_SPI_PERIPH_RCC, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0xF44F 0x5080      MOV      R0,#+4096
   \   0000004A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    239              RCC_AHBPeriphClockCmd(SDK_EVAL_V2_SPI_PERIPH_MOSI_RCC | SDK_EVAL_V2_SPI_PERIPH_MISO_RCC | SDK_EVAL_V2_SPI_PERIPH_SCLK_RCC | SDK_EVAL_V2_SPI_PERIPH_CS_RCC, ENABLE);
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x2010             MOVS     R0,#+16
   \   00000052   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
    240              
    241              /* Configure the AF for MOSI, MISO and SCLK GPIO pins*/
    242              GPIO_PinAFConfig(SDK_EVAL_V2_SPI_PERIPH_MOSI_PORT, SDK_EVAL_V2_SPI_PERIPH_MOSI_RCC_SOURCE, SDK_EVAL_V2_SPI_PERIPH_MOSI_AF);
   \   00000056   0x2205             MOVS     R2,#+5
   \   00000058   0x210F             MOVS     R1,#+15
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   0000005E   0x.... 0x....      BL       GPIO_PinAFConfig
    243              GPIO_PinAFConfig(SDK_EVAL_V2_SPI_PERIPH_MISO_PORT, SDK_EVAL_V2_SPI_PERIPH_MISO_RCC_SOURCE, SDK_EVAL_V2_SPI_PERIPH_MISO_AF);
   \   00000062   0x2205             MOVS     R2,#+5
   \   00000064   0x210E             MOVS     R1,#+14
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   0000006A   0x.... 0x....      BL       GPIO_PinAFConfig
    244              GPIO_PinAFConfig(SDK_EVAL_V2_SPI_PERIPH_SCLK_PORT, SDK_EVAL_V2_SPI_PERIPH_SCLK_RCC_SOURCE, SDK_EVAL_V2_SPI_PERIPH_SCLK_AF);
   \   0000006E   0x2205             MOVS     R2,#+5
   \   00000070   0x210D             MOVS     R1,#+13
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   00000076   0x.... 0x....      BL       GPIO_PinAFConfig
    245              
    246              /* Configure SPI pins:SCLK, MISO and MOSI */
    247              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000007A   0x2002             MOVS     R0,#+2
   \   0000007C   0xF88D 0x0004      STRB     R0,[SP, #+4]
    248              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xF88D 0x0006      STRB     R0,[SP, #+6]
    249              GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
   \   00000086   0x2002             MOVS     R0,#+2
   \   00000088   0xF88D 0x0007      STRB     R0,[SP, #+7]
    250              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
   \   0000008C   0x2003             MOVS     R0,#+3
   \   0000008E   0xF88D 0x0005      STRB     R0,[SP, #+5]
    251              
    252              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V2_SPI_PERIPH_SCLK_PIN;
   \   00000092   0xF44F 0x5000      MOV      R0,#+8192
   \   00000096   0x9000             STR      R0,[SP, #+0]
    253              GPIO_Init(SDK_EVAL_V2_SPI_PERIPH_SCLK_PORT, &GPIO_InitStructure);
   \   00000098   0xA900             ADD      R1,SP,#+0
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   0000009E   0x.... 0x....      BL       GPIO_Init
    254              
    255              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V2_SPI_PERIPH_MISO_PIN;
   \   000000A2   0xF44F 0x4080      MOV      R0,#+16384
   \   000000A6   0x9000             STR      R0,[SP, #+0]
    256              GPIO_Init(SDK_EVAL_V2_SPI_PERIPH_MISO_PORT, &GPIO_InitStructure);
   \   000000A8   0xA900             ADD      R1,SP,#+0
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   000000AE   0x.... 0x....      BL       GPIO_Init
    257              
    258              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V2_SPI_PERIPH_MOSI_PIN;
   \   000000B2   0xF44F 0x4000      MOV      R0,#+32768
   \   000000B6   0x9000             STR      R0,[SP, #+0]
    259              GPIO_Init(SDK_EVAL_V2_SPI_PERIPH_MOSI_PORT, &GPIO_InitStructure);
   \   000000B8   0xA900             ADD      R1,SP,#+0
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   000000BE   0x.... 0x....      BL       GPIO_Init
    260              
    261              /* Configure SPI pin: CS */
    262              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V2_SPI_PERIPH_CS_PIN;
   \   000000C2   0xF44F 0x5080      MOV      R0,#+4096
   \   000000C6   0x9000             STR      R0,[SP, #+0]
    263              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0xF88D 0x0004      STRB     R0,[SP, #+4]
    264              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xF88D 0x0006      STRB     R0,[SP, #+6]
    265              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xF88D 0x0007      STRB     R0,[SP, #+7]
    266              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
   \   000000DA   0x2003             MOVS     R0,#+3
   \   000000DC   0xF88D 0x0005      STRB     R0,[SP, #+5]
    267              GPIO_Init(SDK_EVAL_V2_SPI_PERIPH_CS_PORT, &GPIO_InitStructure);
   \   000000E0   0xA900             ADD      R1,SP,#+0
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40021000
   \   000000E6   0x.... 0x....      BL       GPIO_Init
   \   000000EA   0xE04E             B.N      ??SdkEvalSpiInit_1
    268              
    269            }
    270            else
    271            {
    272              /* Enable SPI periph and SCLK, MOSI, MISO and CS GPIO clocks */
    273              RCC_AHBPeriphClockCmd(SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC | SDK_EVAL_V3_SPI_PERIPH_MISO_RCC | SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC | SDK_EVAL_V3_SPI_PERIPH_CS_RCC, ENABLE);
   \                     ??SdkEvalSpiInit_0: (+1)
   \   000000EC   0x2101             MOVS     R1,#+1
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
    274              
    275              /* Configure the AF for MOSI, MISO and SCLK GPIO pins*/
    276              GPIO_PinAFConfig(SDK_EVAL_V3_SPI_PERIPH_MOSI_PORT, SDK_EVAL_V3_SPI_PERIPH_MOSI_RCC_SOURCE, SDK_EVAL_V3_SPI_PERIPH_MOSI_AF);
   \   000000F4   0x2205             MOVS     R2,#+5
   \   000000F6   0x2107             MOVS     R1,#+7
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   000000FC   0x.... 0x....      BL       GPIO_PinAFConfig
    277              GPIO_PinAFConfig(SDK_EVAL_V3_SPI_PERIPH_MISO_PORT, SDK_EVAL_V3_SPI_PERIPH_MISO_RCC_SOURCE, SDK_EVAL_V3_SPI_PERIPH_MISO_AF);
   \   00000100   0x2205             MOVS     R2,#+5
   \   00000102   0x2106             MOVS     R1,#+6
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   00000108   0x.... 0x....      BL       GPIO_PinAFConfig
    278              GPIO_PinAFConfig(SDK_EVAL_V3_SPI_PERIPH_SCLK_PORT, SDK_EVAL_V3_SPI_PERIPH_SCLK_RCC_SOURCE, SDK_EVAL_V3_SPI_PERIPH_SCLK_AF);
   \   0000010C   0x2205             MOVS     R2,#+5
   \   0000010E   0x2105             MOVS     R1,#+5
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   00000114   0x.... 0x....      BL       GPIO_PinAFConfig
    279              
    280              /* Configure SPI pins:SCLK, MISO and MOSI */
    281              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000118   0x2002             MOVS     R0,#+2
   \   0000011A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    282              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xF88D 0x0006      STRB     R0,[SP, #+6]
    283              GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
   \   00000124   0x2002             MOVS     R0,#+2
   \   00000126   0xF88D 0x0007      STRB     R0,[SP, #+7]
    284              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
   \   0000012A   0x2003             MOVS     R0,#+3
   \   0000012C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    285              
    286              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V3_SPI_PERIPH_SCLK_PIN;
   \   00000130   0x2020             MOVS     R0,#+32
   \   00000132   0x9000             STR      R0,[SP, #+0]
    287              GPIO_Init(SDK_EVAL_V3_SPI_PERIPH_SCLK_PORT, &GPIO_InitStructure);
   \   00000134   0xA900             ADD      R1,SP,#+0
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   0000013A   0x.... 0x....      BL       GPIO_Init
    288              
    289              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V3_SPI_PERIPH_MISO_PIN;
   \   0000013E   0x2040             MOVS     R0,#+64
   \   00000140   0x9000             STR      R0,[SP, #+0]
    290              GPIO_Init(SDK_EVAL_V3_SPI_PERIPH_MISO_PORT, &GPIO_InitStructure);
   \   00000142   0xA900             ADD      R1,SP,#+0
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   00000148   0x.... 0x....      BL       GPIO_Init
    291              
    292              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V3_SPI_PERIPH_MOSI_PIN;
   \   0000014C   0x2080             MOVS     R0,#+128
   \   0000014E   0x9000             STR      R0,[SP, #+0]
    293              GPIO_Init(SDK_EVAL_V3_SPI_PERIPH_MOSI_PORT, &GPIO_InitStructure);
   \   00000150   0xA900             ADD      R1,SP,#+0
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   00000156   0x.... 0x....      BL       GPIO_Init
    294              
    295              /* Configure SPI pin: CS */
    296              GPIO_InitStructure.GPIO_Pin = SDK_EVAL_V3_SPI_PERIPH_CS_PIN;
   \   0000015A   0x2010             MOVS     R0,#+16
   \   0000015C   0x9000             STR      R0,[SP, #+0]
    297              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0xF88D 0x0004      STRB     R0,[SP, #+4]
    298              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0xF88D 0x0006      STRB     R0,[SP, #+6]
    299              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
   \   0000016A   0x2001             MOVS     R0,#+1
   \   0000016C   0xF88D 0x0007      STRB     R0,[SP, #+7]
    300              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
   \   00000170   0x2003             MOVS     R0,#+3
   \   00000172   0xF88D 0x0005      STRB     R0,[SP, #+5]
    301              GPIO_Init(SDK_EVAL_V3_SPI_PERIPH_CS_PORT, &GPIO_InitStructure);
   \   00000176   0xA900             ADD      R1,SP,#+0
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable5_7  ;; 0x40020000
   \   0000017C   0x.... 0x....      BL       GPIO_Init
    302              
    303              
    304              /* Enable SPI periph and SCLK, MOSI, MISO and CS GPIO clocks */
    305              RCC_APB2PeriphClockCmd(SDK_EVAL_V3_SPI_PERIPH_RCC, ENABLE);     
   \   00000180   0x2101             MOVS     R1,#+1
   \   00000182   0xF44F 0x5080      MOV      R0,#+4096
   \   00000186   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    306          
    307            }
    308            
    309            /* Configure SPI peripheral */
    310            SPI_DeInit(s_SpiPort);
   \                     ??SdkEvalSpiInit_1: (+1)
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000018E   0x6800             LDR      R0,[R0, #+0]
   \   00000190   0x.... 0x....      BL       SPI_I2S_DeInit
    311            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   \   00000194   0xF44F 0x7082      MOV      R0,#+260
   \   00000198   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    312            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   0000019C   0x2000             MOVS     R0,#+0
   \   0000019E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    313            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    314            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    315            SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    316            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   \   000001B4   0xF44F 0x7000      MOV      R0,#+512
   \   000001B8   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    317            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
   \   000001BC   0x2008             MOVS     R0,#+8
   \   000001BE   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    318            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    319            SPI_InitStructure.SPI_CRCPolynomial = 7;
   \   000001C8   0x2007             MOVS     R0,#+7
   \   000001CA   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    320            SPI_Init(s_SpiPort, &SPI_InitStructure);
   \   000001CE   0xA902             ADD      R1,SP,#+8
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000001D4   0x6800             LDR      R0,[R0, #+0]
   \   000001D6   0x.... 0x....      BL       SPI_Init
    321            
    322            SPI_Cmd(s_SpiPort, ENABLE);
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0x.... 0x....      BL       SPI_Cmd
    323            
    324          #ifdef FREERTOS  
    325            xSpiMutex = xSemaphoreCreateMutex();
    326            if (!xSpiMutex)
    327              /* Error in resource creation. */
    328              for (;;);
    329            xSemaphoreGive(xSpiMutex);  
    330          #endif
    331            
    332            
    333            SdkEvalSPICSHigh();
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   000001EA   0x6800             LDR      R0,[R0, #+0]
   \   000001EC   0x8800             LDRH     R0,[R0, #+0]
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000001F2   0x6809             LDR      R1,[R1, #+0]
   \   000001F4   0x6809             LDR      R1,[R1, #+0]
   \   000001F6   0x8308             STRH     R0,[R1, #+24]
    334          }
   \   000001F8   0xB007             ADD      SP,SP,#+28
   \   000001FA   0xBD00             POP      {PC}             ;; return
    335          
    336          
    337          /**
    338          * @brief  Write single or multiple STS2001 register
    339          * @param  cRegAddress: base register's address to be write
    340          * @param  cNbBytes: number of registers and bytes to be write
    341          * @param  pcBuffer: pointer to the buffer of values have to be written into registers
    342          * @retval STS2001 status
    343          */

   \                                 In section .text, align 2, keep-with-next
    344          StatusBytes SdkEvalSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
    345          {
   \                     SdkEvalSpiWriteRegisters: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    346            uint8_t header[2];
    347            uint16_t tmpstatus = 0x0000;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    348            StatusBytes *status=(StatusBytes *)&tmpstatus;
   \   00000012   0xF10D 0x0702      ADD      R7,SP,#+2
    349            
    350            /* Built the header bytes */
    351            header[0]=WRITE_HEADER;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0004      STRB     R0,[SP, #+4]
    352            header[1]=cRegAddress;
   \   0000001C   0xF88D 0x4005      STRB     R4,[SP, #+5]
    353            
    354            
    355            SPI_ENTER_CRITICAL();
   \   00000020   0xB672             CPSID    I
    356            
    357            /* Puts the SPI chip select low to start the transaction */
    358            SdkEvalSPICSLow();
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x8800             LDRH     R0,[R0, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x8348             STRH     R0,[R1, #+26]
    359            
    360            for(volatile uint16_t i=0;i<CS_TO_SCLK_DELAY;i++);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??SdkEvalSpiWriteRegisters_0: (+1)
   \   0000003A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD105             BNE.N    ??SdkEvalSpiWriteRegisters_1
   \   00000042   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000004C   0xE7F5             B.N      ??SdkEvalSpiWriteRegisters_0
    361            
    362            /* Writes the header bytes and read the STS2001 status bytes */
    363            for(int i=0; i<2; i++)
   \                     ??SdkEvalSpiWriteRegisters_1: (+1)
   \   0000004E   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??SdkEvalSpiWriteRegisters_2: (+1)
   \   00000052   0xF1B8 0x0F02      CMP      R8,#+2
   \   00000056   0xDA2B             BGE.N    ??SdkEvalSpiWriteRegisters_3
    364            {
    365              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiWriteRegisters_4: (+1)
   \   00000058   0x2102             MOVS     R1,#+2
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0F7             BEQ.N    ??SdkEvalSpiWriteRegisters_4
    366              SPI_SendData(s_SpiPort, header[i]);
   \   00000068   0xA801             ADD      R0,SP,#+4
   \   0000006A   0xF818 0x1000      LDRB     R1,[R8, R0]
   \   0000006E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x.... 0x....      BL       SPI_I2S_SendData
    367              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiWriteRegisters_5: (+1)
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD0F7             BEQ.N    ??SdkEvalSpiWriteRegisters_5
    368              tmpstatus += ((uint16_t)(SPI_ReceiveData(s_SpiPort)))<<((1-i)*8);
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000094   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000098   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009A   0xF1D8 0x0201      RSBS     R2,R8,#+1
   \   0000009E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A0   0x00D2             LSLS     R2,R2,#+3
   \   000000A2   0x4090             LSLS     R0,R0,R2
   \   000000A4   0x1840             ADDS     R0,R0,R1
   \   000000A6   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    369            }
   \   000000AA   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000AE   0xE7D0             B.N      ??SdkEvalSpiWriteRegisters_2
    370            
    371            /* Writes the registers according to the number of bytes */
    372            for(int index=0; index<cNbBytes; index++)
   \                     ??SdkEvalSpiWriteRegisters_3: (+1)
   \   000000B0   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??SdkEvalSpiWriteRegisters_6: (+1)
   \   000000B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B6   0x45A8             CMP      R8,R5
   \   000000B8   0xDA1F             BGE.N    ??SdkEvalSpiWriteRegisters_7
    373            {
    374              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiWriteRegisters_8: (+1)
   \   000000BA   0x2102             MOVS     R1,#+2
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD0F7             BEQ.N    ??SdkEvalSpiWriteRegisters_8
    375              SPI_SendData(s_SpiPort, pcBuffer[index]);   
   \   000000CA   0xF818 0x1006      LDRB     R1,[R8, R6]
   \   000000CE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x.... 0x....      BL       SPI_I2S_SendData
    376              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiWriteRegisters_9: (+1)
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000E6   0x2800             CMP      R0,#+0
   \   000000E8   0xD0F7             BEQ.N    ??SdkEvalSpiWriteRegisters_9
    377              SPI_ReceiveData(s_SpiPort);
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0x.... 0x....      BL       SPI_I2S_ReceiveData
    378            }
   \   000000F4   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000F8   0xE7DC             B.N      ??SdkEvalSpiWriteRegisters_6
    379            
    380            /* To be sure to don't rise the Chip Select before the end of last sending */
    381            while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiWriteRegisters_7: (+1)
   \   000000FA   0x2102             MOVS     R1,#+2
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD0F7             BEQ.N    ??SdkEvalSpiWriteRegisters_7
    382            
    383            /* Puts the SPI chip select high to end the transaction */
    384            SdkEvalSPICSHigh();
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x8800             LDRH     R0,[R0, #+0]
   \   00000112   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   00000116   0x6809             LDR      R1,[R1, #+0]
   \   00000118   0x6809             LDR      R1,[R1, #+0]
   \   0000011A   0x8308             STRH     R0,[R1, #+24]
    385            
    386            SPI_EXIT_CRITICAL();
   \   0000011C   0xB662             CPSIE    I
   \   0000011E   0x8838             LDRH     R0,[R7, #+0]
   \   00000120   0x9002             STR      R0,[SP, #+8]
    387            
    388            return *status;
   \   00000122   0x9802             LDR      R0,[SP, #+8]
   \   00000124   0xB004             ADD      SP,SP,#+16
   \   00000126   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    389            
    390          }
    391          
    392          /**
    393          * @brief  Read single or multiple STS2001 register
    394          * @param  cRegAddress: base register's address to be read
    395          * @param  cNbBytes: number of registers and bytes to be read
    396          * @param  pcBuffer: pointer to the buffer of registers' values read
    397          * @retval STS2001 status
    398          */

   \                                 In section .text, align 2, keep-with-next
    399          StatusBytes SdkEvalSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
    400          {
   \                     SdkEvalSpiReadRegisters: (+1)
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    401            uint16_t tmpstatus = 0x0000;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    402            StatusBytes *status=(StatusBytes *)&tmpstatus;
   \   00000010   0xF10D 0x0702      ADD      R7,SP,#+2
    403            
    404            uint8_t header[2];
    405            uint8_t dummy=0xFF;
   \   00000014   0xF04F 0x08FF      MOV      R8,#+255
    406            
    407            /* Built the header bytes */
    408            header[0]=READ_HEADER;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    409            header[1]=cRegAddress;
   \   0000001E   0xF88D 0x4005      STRB     R4,[SP, #+5]
    410            
    411            SPI_ENTER_CRITICAL();
   \   00000022   0xB672             CPSID    I
    412            
    413            /* Put the SPI chip select low to start the transaction */
    414            SdkEvalSPICSLow();
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x8348             STRH     R0,[R1, #+26]
    415            
    416            for(volatile uint16_t i=0;i<CS_TO_SCLK_DELAY;i++);
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??SdkEvalSpiReadRegisters_0: (+1)
   \   0000003C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD105             BNE.N    ??SdkEvalSpiReadRegisters_1
   \   00000044   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000004E   0xE7F5             B.N      ??SdkEvalSpiReadRegisters_0
    417            
    418            /* Write the header bytes and read the STS2001 status bytes */
    419            for(int i=0; i<2; i++)
   \                     ??SdkEvalSpiReadRegisters_1: (+1)
   \   00000050   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??SdkEvalSpiReadRegisters_2: (+1)
   \   00000054   0xF1B9 0x0F02      CMP      R9,#+2
   \   00000058   0xDA2B             BGE.N    ??SdkEvalSpiReadRegisters_3
    420            {
    421              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiReadRegisters_4: (+1)
   \   0000005A   0x2102             MOVS     R1,#+2
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD0F7             BEQ.N    ??SdkEvalSpiReadRegisters_4
    422              SPI_SendData(s_SpiPort, header[i]);
   \   0000006A   0xA801             ADD      R0,SP,#+4
   \   0000006C   0xF819 0x1000      LDRB     R1,[R9, R0]
   \   00000070   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x.... 0x....      BL       SPI_I2S_SendData
    423              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiReadRegisters_5: (+1)
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD0F7             BEQ.N    ??SdkEvalSpiReadRegisters_5
    424              tmpstatus += ((uint16_t)(SPI_ReceiveData(s_SpiPort)))<<((1-i)*8);
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000096   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000009A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000009C   0xF1D9 0x0201      RSBS     R2,R9,#+1
   \   000000A0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A2   0x00D2             LSLS     R2,R2,#+3
   \   000000A4   0x4090             LSLS     R0,R0,R2
   \   000000A6   0x1840             ADDS     R0,R0,R1
   \   000000A8   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    425            }
   \   000000AC   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000B0   0xE7D0             B.N      ??SdkEvalSpiReadRegisters_2
    426            
    427            /* Read the registers according to the number of bytes */
    428            for(int index=0; index<cNbBytes; index++)
   \                     ??SdkEvalSpiReadRegisters_3: (+1)
   \   000000B2   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??SdkEvalSpiReadRegisters_6: (+1)
   \   000000B6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B8   0x45A9             CMP      R9,R5
   \   000000BA   0xDA1E             BGE.N    ??SdkEvalSpiReadRegisters_7
    429            {
    430              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiReadRegisters_8: (+1)
   \   000000BC   0x2102             MOVS     R1,#+2
   \   000000BE   0x....             LDR.N    R0,??DataTable5_1
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD0F8             BEQ.N    ??SdkEvalSpiReadRegisters_8
    431              SPI_SendData(s_SpiPort, dummy);
   \   000000CA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000CE   0x4641             MOV      R1,R8
   \   000000D0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D2   0x....             LDR.N    R0,??DataTable5_1
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x.... 0x....      BL       SPI_I2S_SendData
    432              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiReadRegisters_9: (+1)
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x....             LDR.N    R0,??DataTable5_1
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD0F8             BEQ.N    ??SdkEvalSpiReadRegisters_9
    433              *pcBuffer = SPI_ReceiveData(s_SpiPort);
   \   000000E8   0x....             LDR.N    R0,??DataTable5_1
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   000000F0   0x7030             STRB     R0,[R6, #+0]
    434              pcBuffer++;
   \   000000F2   0x1C76             ADDS     R6,R6,#+1
    435            }
   \   000000F4   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000000F8   0xE7DD             B.N      ??SdkEvalSpiReadRegisters_6
    436            
    437            while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiReadRegisters_7: (+1)
   \   000000FA   0x2102             MOVS     R1,#+2
   \   000000FC   0x....             LDR.N    R0,??DataTable5_1
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD0F8             BEQ.N    ??SdkEvalSpiReadRegisters_7
    438            
    439            /* Put the SPI chip select high to end the transaction */
    440            SdkEvalSPICSHigh();
   \   00000108   0x....             LDR.N    R0,??DataTable5_3
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x8800             LDRH     R0,[R0, #+0]
   \   0000010E   0x....             LDR.N    R1,??DataTable5_5
   \   00000110   0x6809             LDR      R1,[R1, #+0]
   \   00000112   0x6809             LDR      R1,[R1, #+0]
   \   00000114   0x8308             STRH     R0,[R1, #+24]
    441            
    442            SPI_EXIT_CRITICAL();
   \   00000116   0xB662             CPSIE    I
   \   00000118   0x8838             LDRH     R0,[R7, #+0]
   \   0000011A   0x9002             STR      R0,[SP, #+8]
    443            
    444            
    445            return *status;
   \   0000011C   0x9802             LDR      R0,[SP, #+8]
   \   0000011E   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    446            
    447          }
    448          
    449          /**
    450          * @brief  Send a command
    451          * @param  cCommandCode: command code to be sent
    452          * @retval STS2001 status
    453          */

   \                                 In section .text, align 2, keep-with-next
    454          StatusBytes SdkEvalSpiCommandStrobes(uint8_t cCommandCode)
    455          {
   \                     SdkEvalSpiCommandStrobes: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    456            uint8_t header[2];
    457            uint16_t tmpstatus = 0x0000;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    458            StatusBytes *status=(StatusBytes *)&tmpstatus;
   \   0000000C   0xF10D 0x0502      ADD      R5,SP,#+2
    459            
    460            /* Built the header bytes */
    461            header[0]=COMMAND_HEADER;
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
    462            header[1]=cCommandCode;
   \   00000016   0xF88D 0x4005      STRB     R4,[SP, #+5]
    463            
    464            
    465            SPI_ENTER_CRITICAL();
   \   0000001A   0xB672             CPSID    I
    466            
    467            /* Puts the SPI chip select low to start the transaction */
    468            SdkEvalSPICSLow();
   \   0000001C   0x....             LDR.N    R0,??DataTable5_3
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x8800             LDRH     R0,[R0, #+0]
   \   00000022   0x....             LDR.N    R1,??DataTable5_5
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x8348             STRH     R0,[R1, #+26]
    469            
    470            for(volatile uint16_t i=0;i<CS_TO_SCLK_DELAY;i++);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??SdkEvalSpiCommandStrobes_0: (+1)
   \   00000030   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD105             BNE.N    ??SdkEvalSpiCommandStrobes_1
   \   00000038   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000042   0xE7F5             B.N      ??SdkEvalSpiCommandStrobes_0
    471            
    472            /* Writes the header bytes and read the STS2001 status bytes */
    473            for(int i=0; i<2; i++)
   \                     ??SdkEvalSpiCommandStrobes_1: (+1)
   \   00000044   0x2600             MOVS     R6,#+0
   \                     ??SdkEvalSpiCommandStrobes_2: (+1)
   \   00000046   0x2E02             CMP      R6,#+2
   \   00000048   0xDA25             BGE.N    ??SdkEvalSpiCommandStrobes_3
    474            {
    475              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiCommandStrobes_4: (+1)
   \   0000004A   0x2102             MOVS     R1,#+2
   \   0000004C   0x....             LDR.N    R0,??DataTable5_1
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD0F8             BEQ.N    ??SdkEvalSpiCommandStrobes_4
    476              SPI_SendData(s_SpiPort, header[i]);
   \   00000058   0xA801             ADD      R0,SP,#+4
   \   0000005A   0x5C31             LDRB     R1,[R6, R0]
   \   0000005C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005E   0x....             LDR.N    R0,??DataTable5_1
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       SPI_I2S_SendData
    477              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiCommandStrobes_5: (+1)
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x....             LDR.N    R0,??DataTable5_1
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD0F8             BEQ.N    ??SdkEvalSpiCommandStrobes_5
    478              tmpstatus += ((uint16_t)(SPI_ReceiveData(s_SpiPort)))<<((1-i)*8);
   \   00000074   0x....             LDR.N    R0,??DataTable5_1
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000007C   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000080   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000082   0xF1D6 0x0201      RSBS     R2,R6,#+1
   \   00000086   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000088   0x00D2             LSLS     R2,R2,#+3
   \   0000008A   0x4090             LSLS     R0,R0,R2
   \   0000008C   0x1840             ADDS     R0,R0,R1
   \   0000008E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    479            }
   \   00000092   0x1C76             ADDS     R6,R6,#+1
   \   00000094   0xE7D7             B.N      ??SdkEvalSpiCommandStrobes_2
    480            
    481            while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiCommandStrobes_3: (+1)
   \   00000096   0x2102             MOVS     R1,#+2
   \   00000098   0x....             LDR.N    R0,??DataTable5_1
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD0F8             BEQ.N    ??SdkEvalSpiCommandStrobes_3
    482            
    483            /* Puts the SPI chip select high to end the transaction */
    484            SdkEvalSPICSHigh();
   \   000000A4   0x....             LDR.N    R0,??DataTable5_3
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x8800             LDRH     R0,[R0, #+0]
   \   000000AA   0x....             LDR.N    R1,??DataTable5_5
   \   000000AC   0x6809             LDR      R1,[R1, #+0]
   \   000000AE   0x6809             LDR      R1,[R1, #+0]
   \   000000B0   0x8308             STRH     R0,[R1, #+24]
    485            
    486            SPI_EXIT_CRITICAL();
   \   000000B2   0xB662             CPSIE    I
   \   000000B4   0x8828             LDRH     R0,[R5, #+0]
   \   000000B6   0x9002             STR      R0,[SP, #+8]
    487            
    488            return *status;
   \   000000B8   0x9802             LDR      R0,[SP, #+8]
   \   000000BA   0xB004             ADD      SP,SP,#+16
   \   000000BC   0xBD70             POP      {R4-R6,PC}       ;; return
    489            
    490          }
    491          
    492          
    493          /**
    494          * @brief  Write data into TX FIFO
    495          * @param  cNbBytes: number of bytes to be written into TX FIFO
    496          * @param  pcBuffer: pointer to data to write
    497          * @retval STS2001 status
    498          */

   \                                 In section .text, align 2, keep-with-next
    499          StatusBytes SdkEvalSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
    500          {
   \                     SdkEvalSpiWriteFifo: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    501            uint16_t tmpstatus = 0x0000;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    502            StatusBytes *status=(StatusBytes *)&tmpstatus;
   \   0000000C   0xF10D 0x0602      ADD      R6,SP,#+2
    503          
    504            uint8_t header[2];
    505            
    506            /* Built the header bytes */
    507            header[0]=WRITE_HEADER;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
    508            header[1]=LINEAR_FIFO_ADDRESS;
   \   00000016   0x20FF             MOVS     R0,#+255
   \   00000018   0xF88D 0x0005      STRB     R0,[SP, #+5]
    509            
    510            
    511            SPI_ENTER_CRITICAL();
   \   0000001C   0xB672             CPSID    I
    512            
    513            /* Put the SPI chip select low to start the transaction */
    514            SdkEvalSPICSLow();
   \   0000001E   0x....             LDR.N    R0,??DataTable5_3
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x....             LDR.N    R1,??DataTable5_5
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x8348             STRH     R0,[R1, #+26]
    515            
    516            for(volatile uint16_t i=0;i<CS_TO_SCLK_DELAY;i++);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??SdkEvalSpiWriteFifo_0: (+1)
   \   00000032   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD105             BNE.N    ??SdkEvalSpiWriteFifo_1
   \   0000003A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000044   0xE7F5             B.N      ??SdkEvalSpiWriteFifo_0
    517            
    518            /* Write the header bytes and read the STS2001 status bytes */
    519            for(int i=0; i<2; i++)
   \                     ??SdkEvalSpiWriteFifo_1: (+1)
   \   00000046   0x2700             MOVS     R7,#+0
   \                     ??SdkEvalSpiWriteFifo_2: (+1)
   \   00000048   0x2F02             CMP      R7,#+2
   \   0000004A   0xDA25             BGE.N    ??SdkEvalSpiWriteFifo_3
    520            {
    521              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiWriteFifo_4: (+1)
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0x....             LDR.N    R0,??DataTable5_1
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD0F8             BEQ.N    ??SdkEvalSpiWriteFifo_4
    522              SPI_SendData(s_SpiPort, header[i]);
   \   0000005A   0xA801             ADD      R0,SP,#+4
   \   0000005C   0x5C39             LDRB     R1,[R7, R0]
   \   0000005E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000060   0x....             LDR.N    R0,??DataTable5_1
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x.... 0x....      BL       SPI_I2S_SendData
    523              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiWriteFifo_5: (+1)
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x....             LDR.N    R0,??DataTable5_1
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD0F8             BEQ.N    ??SdkEvalSpiWriteFifo_5
    524              tmpstatus += ((uint16_t)(SPI_ReceiveData(s_SpiPort)))<<((1-i)*8);
   \   00000076   0x....             LDR.N    R0,??DataTable5_1
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000007E   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0xF1D7 0x0201      RSBS     R2,R7,#+1
   \   00000088   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008A   0x00D2             LSLS     R2,R2,#+3
   \   0000008C   0x4090             LSLS     R0,R0,R2
   \   0000008E   0x1840             ADDS     R0,R0,R1
   \   00000090   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    525            }
   \   00000094   0x1C7F             ADDS     R7,R7,#+1
   \   00000096   0xE7D7             B.N      ??SdkEvalSpiWriteFifo_2
    526            
    527            /* Write the data into the FIFO according to the number of bytes */
    528            for(int index=0; index<cNbBytes; index++)
   \                     ??SdkEvalSpiWriteFifo_3: (+1)
   \   00000098   0x2700             MOVS     R7,#+0
   \                     ??SdkEvalSpiWriteFifo_6: (+1)
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x42A7             CMP      R7,R4
   \   0000009E   0xDA19             BGE.N    ??SdkEvalSpiWriteFifo_7
    529            {
    530              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiWriteFifo_8: (+1)
   \   000000A0   0x2102             MOVS     R1,#+2
   \   000000A2   0x....             LDR.N    R0,??DataTable5_1
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD0F8             BEQ.N    ??SdkEvalSpiWriteFifo_8
    531              SPI_SendData(s_SpiPort, pcBuffer[index]);
   \   000000AE   0x5D79             LDRB     R1,[R7, R5]
   \   000000B0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B2   0x....             LDR.N    R0,??DataTable5_1
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x.... 0x....      BL       SPI_I2S_SendData
    532              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiWriteFifo_9: (+1)
   \   000000BA   0x2101             MOVS     R1,#+1
   \   000000BC   0x....             LDR.N    R0,??DataTable5_1
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD0F8             BEQ.N    ??SdkEvalSpiWriteFifo_9
    533              SPI_ReceiveData(s_SpiPort);
   \   000000C8   0x....             LDR.N    R0,??DataTable5_1
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x.... 0x....      BL       SPI_I2S_ReceiveData
    534            }
   \   000000D0   0x1C7F             ADDS     R7,R7,#+1
   \   000000D2   0xE7E2             B.N      ??SdkEvalSpiWriteFifo_6
    535            
    536            /* To be sure to don't rise the Chip Select before the end of last sending */
    537            while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiWriteFifo_7: (+1)
   \   000000D4   0x2102             MOVS     R1,#+2
   \   000000D6   0x....             LDR.N    R0,??DataTable5_1
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD0F8             BEQ.N    ??SdkEvalSpiWriteFifo_7
    538            
    539            /* Put the SPI chip select high to end the transaction */
    540            SdkEvalSPICSHigh();
   \   000000E2   0x....             LDR.N    R0,??DataTable5_3
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x8800             LDRH     R0,[R0, #+0]
   \   000000E8   0x....             LDR.N    R1,??DataTable5_5
   \   000000EA   0x6809             LDR      R1,[R1, #+0]
   \   000000EC   0x6809             LDR      R1,[R1, #+0]
   \   000000EE   0x8308             STRH     R0,[R1, #+24]
    541          
    542            SPI_EXIT_CRITICAL();
   \   000000F0   0xB662             CPSIE    I
   \   000000F2   0x8830             LDRH     R0,[R6, #+0]
   \   000000F4   0x9002             STR      R0,[SP, #+8]
    543          
    544            return *status;
   \   000000F6   0x9802             LDR      R0,[SP, #+8]
   \   000000F8   0xBDFE             POP      {R1-R7,PC}       ;; return
    545            
    546          }
    547          
    548          
    549          /**
    550          * @brief  Read data from RX FIFO
    551          * @param  cNbBytes: number of bytes to read from RX FIFO
    552          * @param  pcBuffer: pointer to data read from RX FIFO
    553          * @retval STS2001 status
    554          */

   \                                 In section .text, align 2, keep-with-next
    555          StatusBytes SdkEvalSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
    556          {
   \                     SdkEvalSpiReadFifo: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    557            uint16_t tmpstatus = 0x0000;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    558            StatusBytes *status=(StatusBytes *)&tmpstatus;
   \   00000010   0xF10D 0x0602      ADD      R6,SP,#+2
    559            
    560            uint8_t header[2];
    561            uint8_t dummy=0xFF;
   \   00000014   0x27FF             MOVS     R7,#+255
    562            
    563            /* Built the header bytes */
    564            header[0]=READ_HEADER;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0004      STRB     R0,[SP, #+4]
    565            header[1]=LINEAR_FIFO_ADDRESS;
   \   0000001C   0x20FF             MOVS     R0,#+255
   \   0000001E   0xF88D 0x0005      STRB     R0,[SP, #+5]
    566            
    567            SPI_ENTER_CRITICAL();
   \   00000022   0xB672             CPSID    I
    568            
    569            /* Put the SPI chip select low to start the transaction */
    570            SdkEvalSPICSLow();
   \   00000024   0x....             LDR.N    R0,??DataTable5_3
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x8800             LDRH     R0,[R0, #+0]
   \   0000002A   0x....             LDR.N    R1,??DataTable5_5
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0x8348             STRH     R0,[R1, #+26]
    571            
    572            for(volatile uint16_t i=0;i<CS_TO_SCLK_DELAY;i++);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??SdkEvalSpiReadFifo_0: (+1)
   \   00000038   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD105             BNE.N    ??SdkEvalSpiReadFifo_1
   \   00000040   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000004A   0xE7F5             B.N      ??SdkEvalSpiReadFifo_0
    573            
    574            /* Write the header bytes and read the STS2001 status bytes */
    575            for(int i=0; i<2; i++)
   \                     ??SdkEvalSpiReadFifo_1: (+1)
   \   0000004C   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??SdkEvalSpiReadFifo_2: (+1)
   \   00000050   0xF1B8 0x0F02      CMP      R8,#+2
   \   00000054   0xDA27             BGE.N    ??SdkEvalSpiReadFifo_3
    576            {
    577              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiReadFifo_4: (+1)
   \   00000056   0x2102             MOVS     R1,#+2
   \   00000058   0x....             LDR.N    R0,??DataTable5_1
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD0F8             BEQ.N    ??SdkEvalSpiReadFifo_4
    578              SPI_SendData(s_SpiPort, header[i]);
   \   00000064   0xA801             ADD      R0,SP,#+4
   \   00000066   0xF818 0x1000      LDRB     R1,[R8, R0]
   \   0000006A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006C   0x....             LDR.N    R0,??DataTable5_1
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x.... 0x....      BL       SPI_I2S_SendData
    579              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiReadFifo_5: (+1)
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0x....             LDR.N    R0,??DataTable5_1
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD0F8             BEQ.N    ??SdkEvalSpiReadFifo_5
    580              tmpstatus += ((uint16_t)(SPI_ReceiveData(s_SpiPort)))<<((1-i)*8);
   \   00000082   0x....             LDR.N    R0,??DataTable5_1
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000008A   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000008E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000090   0xF1D8 0x0201      RSBS     R2,R8,#+1
   \   00000094   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000096   0x00D2             LSLS     R2,R2,#+3
   \   00000098   0x4090             LSLS     R0,R0,R2
   \   0000009A   0x1840             ADDS     R0,R0,R1
   \   0000009C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    581            }
   \   000000A0   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000A4   0xE7D4             B.N      ??SdkEvalSpiReadFifo_2
    582            
    583            /* Read the data from the FIFO according to the number of bytes */
    584            for(int index=0; index<cNbBytes; index++)
   \                     ??SdkEvalSpiReadFifo_3: (+1)
   \   000000A6   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??SdkEvalSpiReadFifo_6: (+1)
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0x45A0             CMP      R8,R4
   \   000000AE   0xDA1D             BGE.N    ??SdkEvalSpiReadFifo_7
    585            {
    586              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiReadFifo_8: (+1)
   \   000000B0   0x2102             MOVS     R1,#+2
   \   000000B2   0x....             LDR.N    R0,??DataTable5_1
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD0F8             BEQ.N    ??SdkEvalSpiReadFifo_8
    587              SPI_SendData(s_SpiPort, dummy);
   \   000000BE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C0   0x0039             MOVS     R1,R7
   \   000000C2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C4   0x....             LDR.N    R0,??DataTable5_1
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x.... 0x....      BL       SPI_I2S_SendData
    588              while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_RXNE) == RESET);
   \                     ??SdkEvalSpiReadFifo_9: (+1)
   \   000000CC   0x2101             MOVS     R1,#+1
   \   000000CE   0x....             LDR.N    R0,??DataTable5_1
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD0F8             BEQ.N    ??SdkEvalSpiReadFifo_9
    589              *pcBuffer = SPI_ReceiveData(s_SpiPort);
   \   000000DA   0x....             LDR.N    R0,??DataTable5_1
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   000000E2   0x7028             STRB     R0,[R5, #+0]
    590              pcBuffer++;
   \   000000E4   0x1C6D             ADDS     R5,R5,#+1
    591            }
   \   000000E6   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000EA   0xE7DE             B.N      ??SdkEvalSpiReadFifo_6
    592            
    593            /* To be sure to don't rise the Chip Select before the end of last sending */
    594            while (SPI_GetFlagStatus(s_SpiPort, SPI_FLAG_TXE) == RESET);
   \                     ??SdkEvalSpiReadFifo_7: (+1)
   \   000000EC   0x2102             MOVS     R1,#+2
   \   000000EE   0x....             LDR.N    R0,??DataTable5_1
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD0F8             BEQ.N    ??SdkEvalSpiReadFifo_7
    595            
    596            /* Put the SPI chip select high to end the transaction */
    597            SdkEvalSPICSHigh();
   \   000000FA   0x....             LDR.N    R0,??DataTable5_3
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x8800             LDRH     R0,[R0, #+0]
   \   00000100   0x....             LDR.N    R1,??DataTable5_5
   \   00000102   0x6809             LDR      R1,[R1, #+0]
   \   00000104   0x6809             LDR      R1,[R1, #+0]
   \   00000106   0x8308             STRH     R0,[R1, #+24]
    598            
    599            SPI_EXIT_CRITICAL();
   \   00000108   0xB662             CPSIE    I
   \   0000010A   0x8830             LDRH     R0,[R6, #+0]
   \   0000010C   0x9002             STR      R0,[SP, #+8]
    600            
    601            
    602            return *status;
   \   0000010E   0x9802             LDR      R0,[SP, #+8]
   \   00000110   0xB004             ADD      SP,SP,#+16
   \   00000112   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    603            
    604          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     s_SpiPortVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     s_SpiPort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     s_vectpxSpiCsPinVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     s_vectnSpiPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     s_vectpxSpiCsPortVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     s_vectpxSpiPort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40020000         DC32     0x40020000
    605          
    606          /**
    607          * @}
    608          */
    609          
    610          
    611          /**
    612          * @}
    613          */
    614          
    615          
    616          /**
    617          * @}
    618          */
    619          
    620          
    621          
    622          /******************* (C) COPYRIGHT 2013 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   SdkEvalSpiCommandStrobes
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
      32   SdkEvalSpiInit
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> RCC_AHBPeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SPI_Cmd
        32   -> SPI_I2S_DeInit
        32   -> SPI_Init
        32   -> SdkEvalGetVersion
      40   SdkEvalSpiReadFifo
        40   -> SPI_I2S_GetFlagStatus
        40   -> SPI_I2S_ReceiveData
        40   -> SPI_I2S_SendData
      40   SdkEvalSpiReadRegisters
        40   -> SPI_I2S_GetFlagStatus
        40   -> SPI_I2S_ReceiveData
        40   -> SPI_I2S_SendData
      32   SdkEvalSpiWriteFifo
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
      40   SdkEvalSpiWriteRegisters
        40   -> SPI_I2S_GetFlagStatus
        40   -> SPI_I2S_ReceiveData
        40   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
     190  SdkEvalSpiCommandStrobes
     508  SdkEvalSpiInit
     278  SdkEvalSpiReadFifo
     290  SdkEvalSpiReadRegisters
     250  SdkEvalSpiWriteFifo
     298  SdkEvalSpiWriteRegisters
       4  s_SpiPort
      12  s_SpiPortVersion
       4  s_vectnSpiPin
       8  s_vectpxSpiCsPinVersion
      12  s_vectpxSpiCsPortVersion
       4  s_vectpxSpiPort

 
    12 bytes in section .bss
    24 bytes in section .data
     8 bytes in section .rodata
 1 846 bytes in section .text
 
 1 846 bytes of CODE  memory
     8 bytes of CONST memory
    36 bytes of DATA  memory

Errors: none
Warnings: none
