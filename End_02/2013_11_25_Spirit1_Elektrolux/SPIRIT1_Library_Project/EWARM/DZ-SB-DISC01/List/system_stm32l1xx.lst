###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:05:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\runtime\system_stm32l1xx.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\runtime\system_stm32l1xx.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\system_stm32l1xx.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\system_stm32l1xx.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\Application\runtime\system_stm32l1xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32l1xx.c
      4            * @author  MCD Application Team
      5            * @version V3.3.0
      6            * @date    21-March-2011
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32L1xx Ultra
      9            *          Low Medium-density devices, and is generated by the clock configuration
     10            *          tool "STM32L1xx_Clock_Configuration_V1.0.0.xls".
     11            *
     12            * 1.  This file provides two functions and one global variable to be called from
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool.
     17            *                      This function is called at startup just after reset and
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32l1xx_md.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick
     23            *                                  timer or configure other parameters.
     24            *
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the MSI (2.1 MHz Range) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32l1xx_md.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and MSI still used as system clock source. User can
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     38            *    in "stm32l1xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *                         System Clock Configuration
     45            *=============================================================================
     46            *        System Clock source          | PLL(HSE)
     47            *-----------------------------------------------------------------------------
     48            *        SYSCLK                       | 32000000 Hz
     49            *-----------------------------------------------------------------------------
     50            *        HCLK                         | 32000000 Hz
     51            *-----------------------------------------------------------------------------
     52            *        AHB Prescaler                | 1
     53            *-----------------------------------------------------------------------------
     54            *        APB1 Prescaler               | 1
     55            *-----------------------------------------------------------------------------
     56            *        APB2 Prescaler               | 1
     57            *-----------------------------------------------------------------------------
     58            *        HSE Frequency                | 8000000 Hz
     59            *-----------------------------------------------------------------------------
     60            *        PLL DIV                      | 3
     61            *-----------------------------------------------------------------------------
     62            *        PLL MUL                      | 12
     63            *-----------------------------------------------------------------------------
     64            *        VDD                          | 3.3 V
     65            *-----------------------------------------------------------------------------
     66            *        Vcore                        | 1.8 V (Range 1)
     67            *-----------------------------------------------------------------------------
     68            *        Flash Latency                | 1 WS
     69            *-----------------------------------------------------------------------------
     70            *        Require 48MHz for USB clock  | Enabled
     71            *-----------------------------------------------------------------------------
     72            *=============================================================================
     73            ******************************************************************************
     74            * @attention
     75            *
     76            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     77            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     78            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     79            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     80            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     81            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     82            *
     83            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     84            ******************************************************************************
     85            */
     86          
     87          /** @addtogroup CMSIS
     88            * @{
     89            */
     90          
     91          /** @addtogroup stm32l1xx_system
     92            * @{
     93            */
     94          
     95          /** @addtogroup STM32L1xx_System_Private_Includes
     96            * @{
     97            */
     98          
     99          #include "stm32l1xx.h"
    100          
    101          /**
    102            * @}
    103            */
    104          
    105          /** @addtogroup STM32L1xx_System_Private_TypesDefinitions
    106            * @{
    107            */
    108          
    109          /**
    110            * @}
    111            */
    112          
    113          /** @addtogroup STM32L1xx_System_Private_Defines
    114            * @{
    115            */
    116          /*!< Uncomment the following line if you need to relocate your vector Table in
    117               Internal SRAM. */
    118          /* #define VECT_TAB_SRAM */
    119          #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field.
    120                                            This value must be a multiple of 0x200. */
    121          /**
    122            * @}
    123            */
    124          
    125          /** @addtogroup STM32L1xx_System_Private_Macros
    126            * @{
    127            */
    128          
    129          /**
    130            * @}
    131            */
    132          
    133          /** @addtogroup STM32L1xx_System_Private_Variables
    134            * @{
    135            */

   \                                 In section .data, align 4
    136          uint32_t SystemCoreClock    = 32000000;
   \                     SystemCoreClock:
   \   00000000   0x01E84800         DC32 32000000

   \                                 In section .data, align 4
    137          __I uint8_t PLLMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
   \                     PLLMulTable:
   \   00000000   0x03 0x04          DC8 3, 4, 6, 8, 12, 16, 24, 32, 48, 0, 0, 0
   \              0x06 0x08    
   \              0x0C 0x10    
   \              0x18 0x20    
   \              0x30 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
    138          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     AHBPrescTable:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x06 0x07    
   \              0x08 0x09    
    139          
    140          /**
    141            * @}
    142            */
    143          
    144          /** @addtogroup STM32L1xx_System_Private_FunctionPrototypes
    145            * @{
    146            */
    147          
    148          static void SetSysClock(void);
    149          
    150          /**
    151            * @}
    152            */
    153          
    154          /** @addtogroup STM32L1xx_System_Private_Functions
    155            * @{
    156            */
    157          
    158          /**
    159            * @brief  Setup the microcontroller system.
    160            *         Initialize the Embedded Flash Interface, the PLL and update the
    161            *         SystemCoreClock variable.
    162            * @param  None
    163            * @retval None
    164            */

   \                                 In section .text, align 2, keep-with-next
    165          void SystemInit (void)
    166          {
   \                     SystemInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    167            /*!< Set MSION bit */
    168            RCC->CR |= (uint32_t)0x00000100;
   \   00000002   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000000A   0x....             LDR.N    R1,??DataTable2  ;; 0x40023800
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    169          
    170            /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
    171            RCC->CFGR &= (uint32_t)0x88FFC00C;
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x....             LDR.N    R1,??DataTable2_2  ;; 0x88ffc00c
   \   00000014   0x4008             ANDS     R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   00000018   0x6008             STR      R0,[R1, #+0]
    172          
    173            /*!< Reset HSION, HSEON, CSSON and PLLON bits */
    174            RCC->CR &= (uint32_t)0xEEFEFFFE;
   \   0000001A   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x....             LDR.N    R1,??DataTable2_3  ;; 0xeefefffe
   \   00000020   0x4008             ANDS     R0,R1,R0
   \   00000022   0x....             LDR.N    R1,??DataTable2  ;; 0x40023800
   \   00000024   0x6008             STR      R0,[R1, #+0]
    175          
    176            /*!< Reset HSEBYP bit */
    177            RCC->CR &= (uint32_t)0xFFFBFFFF;
   \   00000026   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   0000002E   0x....             LDR.N    R1,??DataTable2  ;; 0x40023800
   \   00000030   0x6008             STR      R0,[R1, #+0]
    178          
    179            /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
    180            RCC->CFGR &= (uint32_t)0xFF02FFFF;
   \   00000032   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF430 0x007D      BICS     R0,R0,#0xFD0000
   \   0000003A   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    181          
    182            /*!< Disable all interrupts */
    183            RCC->CIR = 0x00000000;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable2_4  ;; 0x4002380c
   \   00000042   0x6008             STR      R0,[R1, #+0]
    184          
    185            /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    186            SetSysClock();
   \   00000044   0x.... 0x....      BL       SetSysClock
    187          
    188          #ifdef VECT_TAB_SRAM
    189            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
    190          #else
    191            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
   \   00000048   0xF05F 0x6000      MOVS     R0,#+134217728
   \   0000004C   0x....             LDR.N    R1,??DataTable2_5  ;; 0xe000ed08
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    192          #endif
    193          }
   \   00000050   0xBD01             POP      {R0,PC}          ;; return
    194          
    195          /**
    196            * @brief  Update SystemCoreClock according to Clock Register Values
    197            * @note   - The system frequency computed by this function is not the real
    198            *           frequency in the chip. It is calculated based on the predefined
    199            *           constant and the selected clock source:
    200            *
    201            *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI
    202            *             value as defined by the MSI range.
    203            *
    204            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    205            *
    206            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    207            *
    208            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    209            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    210            *
    211            *         (*) HSI_VALUE is a constant defined in stm32l1xx.h file (default value
    212            *             16 MHz) but the real value may vary depending on the variations
    213            *             in voltage and temperature.
    214            *
    215            *         (**) HSE_VALUE is a constant defined in stm32l1xx.h file (default value
    216            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    217            *              frequency of the crystal used. Otherwise, this function may
    218            *              have wrong result.
    219            *
    220            *         - The result of this function could be not correct when using fractional
    221            *           value for HSE crystal.
    222            * @param  None
    223            * @retval None
    224            */

   \                                 In section .text, align 2, keep-with-next
    225          void SystemCoreClockUpdate (void)
    226          {
   \                     SystemCoreClockUpdate: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    227            uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2400             MOVS     R4,#+0
    228          
    229            /* Get SYSCLK source -------------------------------------------------------*/
    230            tmp = RCC->CFGR & RCC_CFGR_SWS;
   \   0000000C   0x....             LDR.N    R5,??DataTable2_1  ;; 0x40023808
   \   0000000E   0x682D             LDR      R5,[R5, #+0]
   \   00000010   0xF015 0x050C      ANDS     R5,R5,#0xC
   \   00000014   0x0028             MOVS     R0,R5
    231          
    232            switch (tmp)
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD006             BEQ.N    ??SystemCoreClockUpdate_0
   \   0000001C   0x2D04             CMP      R5,#+4
   \   0000001E   0xD012             BEQ.N    ??SystemCoreClockUpdate_1
   \   00000020   0x2D08             CMP      R5,#+8
   \   00000022   0xD014             BEQ.N    ??SystemCoreClockUpdate_2
   \   00000024   0x2D0C             CMP      R5,#+12
   \   00000026   0xD016             BEQ.N    ??SystemCoreClockUpdate_3
   \   00000028   0xE03B             B.N      ??SystemCoreClockUpdate_4
    233            {
    234              case 0x00:  /* MSI used as system clock */
    235                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
   \                     ??SystemCoreClockUpdate_0: (+1)
   \   0000002A   0x....             LDR.N    R5,??DataTable2_6  ;; 0x40023804
   \   0000002C   0x682D             LDR      R5,[R5, #+0]
   \   0000002E   0xF3C5 0x3542      UBFX     R5,R5,#+13,#+3
   \   00000032   0x002C             MOVS     R4,R5
    236                SystemCoreClock = (32768 * (1 << (msirange + 1)));
   \   00000034   0x2501             MOVS     R5,#+1
   \   00000036   0x1C66             ADDS     R6,R4,#+1
   \   00000038   0x40B5             LSLS     R5,R5,R6
   \   0000003A   0xF44F 0x4600      MOV      R6,#+32768
   \   0000003E   0x4375             MULS     R5,R6,R5
   \   00000040   0x....             LDR.N    R6,??DataTable2_7
   \   00000042   0x6035             STR      R5,[R6, #+0]
    237                break;
   \   00000044   0xE03A             B.N      ??SystemCoreClockUpdate_5
    238              case 0x04:  /* HSI used as system clock */
    239                SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \   00000046   0x....             LDR.N    R5,??DataTable2_8  ;; 0xf42400
   \   00000048   0x....             LDR.N    R6,??DataTable2_7
   \   0000004A   0x6035             STR      R5,[R6, #+0]
    240                break;
   \   0000004C   0xE036             B.N      ??SystemCoreClockUpdate_5
    241              case 0x08:  /* HSE used as system clock */
    242                SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \   0000004E   0x....             LDR.N    R5,??DataTable2_9  ;; 0x7a1200
   \   00000050   0x....             LDR.N    R6,??DataTable2_7
   \   00000052   0x6035             STR      R5,[R6, #+0]
    243                break;
   \   00000054   0xE032             B.N      ??SystemCoreClockUpdate_5
    244              case 0x0C:  /* PLL used as system clock */
    245                /* Get PLL clock source and multiplication factor ----------------------*/
    246                pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
   \                     ??SystemCoreClockUpdate_3: (+1)
   \   00000056   0x....             LDR.N    R5,??DataTable2_1  ;; 0x40023808
   \   00000058   0x682D             LDR      R5,[R5, #+0]
   \   0000005A   0xF415 0x1570      ANDS     R5,R5,#0x3C0000
   \   0000005E   0x0029             MOVS     R1,R5
    247                plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
   \   00000060   0x....             LDR.N    R5,??DataTable2_1  ;; 0x40023808
   \   00000062   0x682D             LDR      R5,[R5, #+0]
   \   00000064   0xF415 0x0540      ANDS     R5,R5,#0xC00000
   \   00000068   0x002A             MOVS     R2,R5
    248                pllmul = PLLMulTable[(pllmul >> 18)];
   \   0000006A   0x....             LDR.N    R5,??DataTable2_10
   \   0000006C   0x0C89             LSRS     R1,R1,#+18
   \   0000006E   0x5D49             LDRB     R1,[R1, R5]
    249                plldiv = (plldiv >> 22) + 1;
   \   00000070   0x0D92             LSRS     R2,R2,#+22
   \   00000072   0x1C52             ADDS     R2,R2,#+1
    250          
    251                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
   \   00000074   0x....             LDR.N    R5,??DataTable2_1  ;; 0x40023808
   \   00000076   0x682D             LDR      R5,[R5, #+0]
   \   00000078   0xF415 0x3580      ANDS     R5,R5,#0x10000
   \   0000007C   0x002B             MOVS     R3,R5
    252          
    253                if (pllsource == 0x00)
   \   0000007E   0x2B00             CMP      R3,#+0
   \   00000080   0xD107             BNE.N    ??SystemCoreClockUpdate_6
    254                {
    255                  /* HSI oscillator clock selected as PLL clock entry */
    256                  SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
   \   00000082   0x....             LDR.N    R5,??DataTable2_8  ;; 0xf42400
   \   00000084   0xFB05 0xF501      MUL      R5,R5,R1
   \   00000088   0xFBB5 0xF5F2      UDIV     R5,R5,R2
   \   0000008C   0x....             LDR.N    R6,??DataTable2_7
   \   0000008E   0x6035             STR      R5,[R6, #+0]
   \   00000090   0xE006             B.N      ??SystemCoreClockUpdate_7
    257                }
    258                else
    259                {
    260                  /* HSE selected as PLL clock entry */
    261                  SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
   \                     ??SystemCoreClockUpdate_6: (+1)
   \   00000092   0x....             LDR.N    R5,??DataTable2_9  ;; 0x7a1200
   \   00000094   0xFB05 0xF501      MUL      R5,R5,R1
   \   00000098   0xFBB5 0xF5F2      UDIV     R5,R5,R2
   \   0000009C   0x....             LDR.N    R6,??DataTable2_7
   \   0000009E   0x6035             STR      R5,[R6, #+0]
    262                }
    263                break;
   \                     ??SystemCoreClockUpdate_7: (+1)
   \   000000A0   0xE00C             B.N      ??SystemCoreClockUpdate_5
    264              default: /* MSI used as system clock */
    265                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
   \                     ??SystemCoreClockUpdate_4: (+1)
   \   000000A2   0x....             LDR.N    R5,??DataTable2_6  ;; 0x40023804
   \   000000A4   0x682D             LDR      R5,[R5, #+0]
   \   000000A6   0xF3C5 0x3542      UBFX     R5,R5,#+13,#+3
   \   000000AA   0x002C             MOVS     R4,R5
    266                SystemCoreClock = (32768 * (1 << (msirange + 1)));
   \   000000AC   0x2501             MOVS     R5,#+1
   \   000000AE   0x1C66             ADDS     R6,R4,#+1
   \   000000B0   0x40B5             LSLS     R5,R5,R6
   \   000000B2   0xF44F 0x4600      MOV      R6,#+32768
   \   000000B6   0x4375             MULS     R5,R6,R5
   \   000000B8   0x....             LDR.N    R6,??DataTable2_7
   \   000000BA   0x6035             STR      R5,[R6, #+0]
    267                break;
    268            }
    269            /* Compute HCLK clock frequency --------------------------------------------*/
    270            /* Get HCLK prescaler */
    271            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
   \                     ??SystemCoreClockUpdate_5: (+1)
   \   000000BC   0x....             LDR.N    R5,??DataTable2_1  ;; 0x40023808
   \   000000BE   0x682D             LDR      R5,[R5, #+0]
   \   000000C0   0x....             LDR.N    R6,??DataTable2_11
   \   000000C2   0xF3C5 0x1503      UBFX     R5,R5,#+4,#+4
   \   000000C6   0x5DAD             LDRB     R5,[R5, R6]
   \   000000C8   0x0028             MOVS     R0,R5
    272            /* HCLK clock frequency */
    273            SystemCoreClock >>= tmp;
   \   000000CA   0x....             LDR.N    R5,??DataTable2_7
   \   000000CC   0x682D             LDR      R5,[R5, #+0]
   \   000000CE   0x002E             MOVS     R6,R5
   \   000000D0   0x40C6             LSRS     R6,R6,R0
   \   000000D2   0x....             LDR.N    R5,??DataTable2_7
   \   000000D4   0x602E             STR      R6,[R5, #+0]
    274          }
   \   000000D6   0xBC70             POP      {R4-R6}
   \   000000D8   0x4770             BX       LR               ;; return
    275          
    276          /**
    277            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
    278            *         settings.
    279            * @note   This function should be called only once the RCC clock configuration
    280            *         is reset to the default reset state (done in SystemInit() function).
    281            * @param  None
    282            * @retval None
    283            */

   \                                 In section .text, align 2, keep-with-next
    284          static void SetSysClock(void)
    285          {
   \                     SetSysClock: (+1)
   \   00000000   0xB082             SUB      SP,SP,#+8
    286            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    287          
    288            /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
    289            /* Enable HSE */
    290            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
   \   0000000A   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000012   0x....             LDR.N    R1,??DataTable2  ;; 0x40023800
   \   00000014   0x6008             STR      R0,[R1, #+0]
    291          
    292            /* Wait till HSE is ready and if Time out is reached exit */
    293            do
    294            {
    295              HSEStatus = RCC->CR & RCC_CR_HSERDY;
   \                     ??SetSysClock_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF410 0x3000      ANDS     R0,R0,#0x20000
   \   0000001E   0x9000             STR      R0,[SP, #+0]
    296              StartUpCounter++;
   \   00000020   0x9801             LDR      R0,[SP, #+4]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x9001             STR      R0,[SP, #+4]
    297            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD103             BNE.N    ??SetSysClock_1
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0xF5B0 0x6FA0      CMP      R0,#+1280
   \   00000032   0xD1F0             BNE.N    ??SetSysClock_0
    298          
    299            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
   \                     ??SetSysClock_1: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x0380             LSLS     R0,R0,#+14
   \   0000003A   0xD502             BPL.N    ??SetSysClock_2
    300            {
    301              HSEStatus = (uint32_t)0x01;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0xE001             B.N      ??SetSysClock_3
    302            }
    303            else
    304            {
    305              HSEStatus = (uint32_t)0x00;
   \                     ??SetSysClock_2: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
    306            }
    307          
    308            if (HSEStatus == (uint32_t)0x01)
   \                     ??SetSysClock_3: (+1)
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x2801             CMP      R0,#+1
   \   0000004A   0xD153             BNE.N    ??SetSysClock_4
    309            {
    310              /* Enable 64-bit access */
    311              FLASH->ACR |= FLASH_ACR_ACC64;
   \   0000004C   0x....             LDR.N    R0,??DataTable2_12  ;; 0x40023c00
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000054   0x....             LDR.N    R1,??DataTable2_12  ;; 0x40023c00
   \   00000056   0x6008             STR      R0,[R1, #+0]
    312          
    313              /* Enable Prefetch Buffer */
    314              FLASH->ACR |= FLASH_ACR_PRFTEN;
   \   00000058   0x....             LDR.N    R0,??DataTable2_12  ;; 0x40023c00
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000060   0x....             LDR.N    R1,??DataTable2_12  ;; 0x40023c00
   \   00000062   0x6008             STR      R0,[R1, #+0]
    315          
    316              /* Flash 1 wait state */
    317              FLASH->ACR |= FLASH_ACR_LATENCY;
   \   00000064   0x....             LDR.N    R0,??DataTable2_12  ;; 0x40023c00
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000006C   0x....             LDR.N    R1,??DataTable2_12  ;; 0x40023c00
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    318          
    319              /* Power enable */
    320              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
   \   00000070   0x....             LDR.N    R0,??DataTable2_13  ;; 0x40023824
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000078   0x....             LDR.N    R1,??DataTable2_13  ;; 0x40023824
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    321          
    322              /* Select the Voltage Range 1 (1.8 V) */
    323              PWR->CR = PWR_CR_VOS_0;
   \   0000007C   0xF44F 0x6000      MOV      R0,#+2048
   \   00000080   0x....             LDR.N    R1,??DataTable2_14  ;; 0x40007000
   \   00000082   0x6008             STR      R0,[R1, #+0]
    324          
    325              /* Wait Until the Voltage Regulator is ready */
    326              while((PWR->CSR & PWR_CSR_VOSF) != RESET)
   \                     ??SetSysClock_5: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable2_15  ;; 0x40007004
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x06C0             LSLS     R0,R0,#+27
   \   0000008A   0xD4FB             BMI.N    ??SetSysClock_5
    327              {
    328              }
    329          
    330              /* HCLK = SYSCLK /1*/
    331              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
   \   0000008C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   00000092   0x6008             STR      R0,[R1, #+0]
    332          
    333              /* PCLK2 = HCLK /1*/
    334              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
   \   00000094   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    335          
    336              /* PCLK1 = HCLK /1*/
    337              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
   \   0000009C   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    338          
    339              /*  PLL configuration */
    340              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
    341                                                  RCC_CFGR_PLLDIV));
   \   000000A4   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0xF430 0x007D      BICS     R0,R0,#0xFD0000
   \   000000AC   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    342              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
   \   000000B0   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0xF450 0x0011      ORRS     R0,R0,#0x910000
   \   000000B8   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    343          
    344              /* Enable PLL */
    345              RCC->CR |= RCC_CR_PLLON;
   \   000000BC   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   000000C4   0x....             LDR.N    R1,??DataTable2  ;; 0x40023800
   \   000000C6   0x6008             STR      R0,[R1, #+0]
    346          
    347              /* Wait till PLL is ready */
    348              while((RCC->CR & RCC_CR_PLLRDY) == 0)
   \                     ??SetSysClock_6: (+1)
   \   000000C8   0x....             LDR.N    R0,??DataTable2  ;; 0x40023800
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x0180             LSLS     R0,R0,#+6
   \   000000CE   0xD5FB             BPL.N    ??SetSysClock_6
    349              {
    350              }
    351          
    352              /* Select PLL as system clock source */
    353              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
   \   000000D0   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0x0880             LSRS     R0,R0,#+2
   \   000000D6   0x0080             LSLS     R0,R0,#+2
   \   000000D8   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   000000DA   0x6008             STR      R0,[R1, #+0]
    354              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
   \   000000DC   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   000000E4   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40023808
   \   000000E6   0x6008             STR      R0,[R1, #+0]
    355          
    356              /* Wait till PLL is used as system clock source */
    357              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
   \                     ??SetSysClock_7: (+1)
   \   000000E8   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023808
   \   000000EA   0x6800             LDR      R0,[R0, #+0]
   \   000000EC   0xF010 0x000C      ANDS     R0,R0,#0xC
   \   000000F0   0x280C             CMP      R0,#+12
   \   000000F2   0xD1F9             BNE.N    ??SetSysClock_7
    358              {
    359              }
    360            }
    361            else
    362            {
    363              /* If HSE fails to start-up, the application will have wrong clock
    364                 configuration. User can add here some code to deal with this error */
    365            }
    366          }
   \                     ??SetSysClock_4: (+1)
   \   000000F4   0xB002             ADD      SP,SP,#+8
   \   000000F6   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40023800         DC32     0x40023800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40023808         DC32     0x40023808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x88FFC00C         DC32     0x88ffc00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xEEFEFFFE         DC32     0xeefefffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4002380C         DC32     0x4002380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40023804         DC32     0x40023804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x00F42400         DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x007A1200         DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     PLLMulTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     AHBPrescTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x40023C00         DC32     0x40023c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x40023824         DC32     0x40023824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x40007000         DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x40007004         DC32     0x40007004
    367          
    368          /**
    369            * @}
    370            */
    371          
    372          /**
    373            * @}
    374            */
    375          
    376          /**
    377            * @}
    378            */
    379          
    380          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock
      12   SystemCoreClockUpdate
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
      12  PLLMulTable
     248  SetSysClock
       4  SystemCoreClock
     218  SystemCoreClockUpdate
      82  SystemInit

 
  32 bytes in section .data
 612 bytes in section .text
 
 612 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
