###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:43
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktStack.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktStack.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\SPIRIT_PktStack.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\SPIRIT_PktStack.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\SPIRIT1_Library\Source\src\SPIRIT_PktStack.c
      1          /**
      2           * @file    SPIRIT_PktStack.c
      3           * @author  High End Analog & RF BU - AMS / ART Team IMS-Systems Lab
      4           * @version V3.0.1
      5           * @date    November 19, 2012
      6           * @brief   Configuration and management of SPIRIT STack packets.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     21           */
     22          
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "SPIRIT_PktStack.h"
     26          #include "MCU_Interface.h"
     27          
     28          
     29          /**
     30           * @addtogroup SPIRIT_Libraries
     31           * @{
     32           */
     33          
     34          
     35          /**
     36           * @addtogroup SPIRIT_PktStack
     37           * @{
     38           */
     39          
     40          
     41          /**
     42           * @defgroup PktStack_Private_TypesDefinitions          Pkt STack Private Types Definitions
     43           * @{
     44           */
     45          
     46          /**
     47           *@}
     48           */
     49          
     50          
     51          /**
     52           * @defgroup PktStack_Private_Defines                   Pkt STack Private Defines
     53           * @{
     54           */
     55          
     56          /**
     57           *@}
     58           */
     59          
     60          
     61          /**
     62           * @defgroup PktStack_Private_Macros                    Pkt STack Private Macros
     63           * @{
     64           */
     65          
     66          /**
     67           *@}
     68           */
     69          
     70          
     71          /**
     72           * @defgroup PktStack_Private_Variables                 Pkt STack Private Variables
     73           * @{
     74           */
     75          
     76          /**
     77           *@}
     78           */
     79          
     80          
     81          /**
     82           * @defgroup PktStack_Private_FunctionPrototypes        Pkt STack Private Function Prototypes
     83           * @{
     84           */
     85          
     86          /**
     87           *@}
     88           */
     89          
     90          
     91          /**
     92           * @defgroup PktStack_Private_Functions                 Pkt STack Private Functions
     93           * @{
     94           */
     95          
     96          
     97          /**
     98           * @brief  Initializes the SPIRIT STack packet according to the specified
     99           *         parameters in the PktStackInit.
    100           * @param  pxPktStackInit STack packet init structure.
    101           *         This parameter is a pointer to @ref PktStackInit.
    102           * @retval None.
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void SpiritPktStackInit(PktStackInit* pxPktStackInit)
    105          {
   \                     SpiritPktStackInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    106            uint8_t tempRegValue[4], i;
    107          
    108            /* Check the parameters */
    109            s_assert_param(IS_STACK_PREAMBLE_LENGTH(pxPktStackInit->xPreambleLength));
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD061             BEQ.N    ??SpiritPktStackInit_0
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2808             CMP      R0,#+8
   \   00000010   0xD05E             BEQ.N    ??SpiritPktStackInit_0
   \   00000012   0x7820             LDRB     R0,[R4, #+0]
   \   00000014   0x2810             CMP      R0,#+16
   \   00000016   0xD05B             BEQ.N    ??SpiritPktStackInit_0
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x2818             CMP      R0,#+24
   \   0000001C   0xD058             BEQ.N    ??SpiritPktStackInit_0
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x2820             CMP      R0,#+32
   \   00000022   0xD055             BEQ.N    ??SpiritPktStackInit_0
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2828             CMP      R0,#+40
   \   00000028   0xD052             BEQ.N    ??SpiritPktStackInit_0
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x2830             CMP      R0,#+48
   \   0000002E   0xD04F             BEQ.N    ??SpiritPktStackInit_0
   \   00000030   0x7820             LDRB     R0,[R4, #+0]
   \   00000032   0x2838             CMP      R0,#+56
   \   00000034   0xD04C             BEQ.N    ??SpiritPktStackInit_0
   \   00000036   0x7820             LDRB     R0,[R4, #+0]
   \   00000038   0x2840             CMP      R0,#+64
   \   0000003A   0xD049             BEQ.N    ??SpiritPktStackInit_0
   \   0000003C   0x7820             LDRB     R0,[R4, #+0]
   \   0000003E   0x2848             CMP      R0,#+72
   \   00000040   0xD046             BEQ.N    ??SpiritPktStackInit_0
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0x2850             CMP      R0,#+80
   \   00000046   0xD043             BEQ.N    ??SpiritPktStackInit_0
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x2858             CMP      R0,#+88
   \   0000004C   0xD040             BEQ.N    ??SpiritPktStackInit_0
   \   0000004E   0x7820             LDRB     R0,[R4, #+0]
   \   00000050   0x2860             CMP      R0,#+96
   \   00000052   0xD03D             BEQ.N    ??SpiritPktStackInit_0
   \   00000054   0x7820             LDRB     R0,[R4, #+0]
   \   00000056   0x2868             CMP      R0,#+104
   \   00000058   0xD03A             BEQ.N    ??SpiritPktStackInit_0
   \   0000005A   0x7820             LDRB     R0,[R4, #+0]
   \   0000005C   0x2870             CMP      R0,#+112
   \   0000005E   0xD037             BEQ.N    ??SpiritPktStackInit_0
   \   00000060   0x7820             LDRB     R0,[R4, #+0]
   \   00000062   0x2878             CMP      R0,#+120
   \   00000064   0xD034             BEQ.N    ??SpiritPktStackInit_0
   \   00000066   0x7820             LDRB     R0,[R4, #+0]
   \   00000068   0x2880             CMP      R0,#+128
   \   0000006A   0xD031             BEQ.N    ??SpiritPktStackInit_0
   \   0000006C   0x7820             LDRB     R0,[R4, #+0]
   \   0000006E   0x2888             CMP      R0,#+136
   \   00000070   0xD02E             BEQ.N    ??SpiritPktStackInit_0
   \   00000072   0x7820             LDRB     R0,[R4, #+0]
   \   00000074   0x2890             CMP      R0,#+144
   \   00000076   0xD02B             BEQ.N    ??SpiritPktStackInit_0
   \   00000078   0x7820             LDRB     R0,[R4, #+0]
   \   0000007A   0x2898             CMP      R0,#+152
   \   0000007C   0xD028             BEQ.N    ??SpiritPktStackInit_0
   \   0000007E   0x7820             LDRB     R0,[R4, #+0]
   \   00000080   0x28A0             CMP      R0,#+160
   \   00000082   0xD025             BEQ.N    ??SpiritPktStackInit_0
   \   00000084   0x7820             LDRB     R0,[R4, #+0]
   \   00000086   0x28A8             CMP      R0,#+168
   \   00000088   0xD022             BEQ.N    ??SpiritPktStackInit_0
   \   0000008A   0x7820             LDRB     R0,[R4, #+0]
   \   0000008C   0x28B0             CMP      R0,#+176
   \   0000008E   0xD01F             BEQ.N    ??SpiritPktStackInit_0
   \   00000090   0x7820             LDRB     R0,[R4, #+0]
   \   00000092   0x28B8             CMP      R0,#+184
   \   00000094   0xD01C             BEQ.N    ??SpiritPktStackInit_0
   \   00000096   0x7820             LDRB     R0,[R4, #+0]
   \   00000098   0x28C0             CMP      R0,#+192
   \   0000009A   0xD019             BEQ.N    ??SpiritPktStackInit_0
   \   0000009C   0x7820             LDRB     R0,[R4, #+0]
   \   0000009E   0x28C8             CMP      R0,#+200
   \   000000A0   0xD016             BEQ.N    ??SpiritPktStackInit_0
   \   000000A2   0x7820             LDRB     R0,[R4, #+0]
   \   000000A4   0x28D0             CMP      R0,#+208
   \   000000A6   0xD013             BEQ.N    ??SpiritPktStackInit_0
   \   000000A8   0x7820             LDRB     R0,[R4, #+0]
   \   000000AA   0x28D8             CMP      R0,#+216
   \   000000AC   0xD010             BEQ.N    ??SpiritPktStackInit_0
   \   000000AE   0x7820             LDRB     R0,[R4, #+0]
   \   000000B0   0x28E0             CMP      R0,#+224
   \   000000B2   0xD00D             BEQ.N    ??SpiritPktStackInit_0
   \   000000B4   0x7820             LDRB     R0,[R4, #+0]
   \   000000B6   0x28E8             CMP      R0,#+232
   \   000000B8   0xD00A             BEQ.N    ??SpiritPktStackInit_0
   \   000000BA   0x7820             LDRB     R0,[R4, #+0]
   \   000000BC   0x28F0             CMP      R0,#+240
   \   000000BE   0xD007             BEQ.N    ??SpiritPktStackInit_0
   \   000000C0   0x7820             LDRB     R0,[R4, #+0]
   \   000000C2   0x28F8             CMP      R0,#+248
   \   000000C4   0xD004             BEQ.N    ??SpiritPktStackInit_0
   \   000000C6   0x216D             MOVS     R1,#+109
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000000CC   0x.... 0x....      BL       s_assert_failed
    110            s_assert_param(IS_STACK_SYNC_LENGTH(pxPktStackInit->xSyncLength));
   \                     ??SpiritPktStackInit_0: (+1)
   \   000000D0   0x7860             LDRB     R0,[R4, #+1]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD00D             BEQ.N    ??SpiritPktStackInit_1
   \   000000D6   0x7860             LDRB     R0,[R4, #+1]
   \   000000D8   0x2802             CMP      R0,#+2
   \   000000DA   0xD00A             BEQ.N    ??SpiritPktStackInit_1
   \   000000DC   0x7860             LDRB     R0,[R4, #+1]
   \   000000DE   0x2804             CMP      R0,#+4
   \   000000E0   0xD007             BEQ.N    ??SpiritPktStackInit_1
   \   000000E2   0x7860             LDRB     R0,[R4, #+1]
   \   000000E4   0x2806             CMP      R0,#+6
   \   000000E6   0xD004             BEQ.N    ??SpiritPktStackInit_1
   \   000000E8   0x216E             MOVS     R1,#+110
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000000EE   0x.... 0x....      BL       s_assert_failed
    111            s_assert_param(IS_STACK_CRC_MODE(pxPktStackInit->xCrcMode));
   \                     ??SpiritPktStackInit_1: (+1)
   \   000000F2   0x7AA0             LDRB     R0,[R4, #+10]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD010             BEQ.N    ??SpiritPktStackInit_2
   \   000000F8   0x7AA0             LDRB     R0,[R4, #+10]
   \   000000FA   0x2820             CMP      R0,#+32
   \   000000FC   0xD00D             BEQ.N    ??SpiritPktStackInit_2
   \   000000FE   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000100   0x2840             CMP      R0,#+64
   \   00000102   0xD00A             BEQ.N    ??SpiritPktStackInit_2
   \   00000104   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000106   0x2860             CMP      R0,#+96
   \   00000108   0xD007             BEQ.N    ??SpiritPktStackInit_2
   \   0000010A   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000010C   0x2880             CMP      R0,#+128
   \   0000010E   0xD004             BEQ.N    ??SpiritPktStackInit_2
   \   00000110   0x216F             MOVS     R1,#+111
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000116   0x.... 0x....      BL       s_assert_failed
    112            s_assert_param(IS_STACK_LENGTH_WIDTH_BITS(pxPktStackInit->cPktLengthWidth));
   \                     ??SpiritPktStackInit_2: (+1)
   \   0000011A   0x7A60             LDRB     R0,[R4, #+9]
   \   0000011C   0x2811             CMP      R0,#+17
   \   0000011E   0xDB04             BLT.N    ??SpiritPktStackInit_3
   \   00000120   0x2170             MOVS     R1,#+112
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000126   0x.... 0x....      BL       s_assert_failed
    113            s_assert_param(IS_STACK_FIX_VAR_LENGTH(pxPktStackInit->xFixVarLength));
   \                     ??SpiritPktStackInit_3: (+1)
   \   0000012A   0x7A20             LDRB     R0,[R4, #+8]
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD007             BEQ.N    ??SpiritPktStackInit_4
   \   00000130   0x7A20             LDRB     R0,[R4, #+8]
   \   00000132   0x2801             CMP      R0,#+1
   \   00000134   0xD004             BEQ.N    ??SpiritPktStackInit_4
   \   00000136   0x2171             MOVS     R1,#+113
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000013C   0x.... 0x....      BL       s_assert_failed
    114            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xFec));
   \                     ??SpiritPktStackInit_4: (+1)
   \   00000140   0x7B20             LDRB     R0,[R4, #+12]
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD007             BEQ.N    ??SpiritPktStackInit_5
   \   00000146   0x7B20             LDRB     R0,[R4, #+12]
   \   00000148   0x2801             CMP      R0,#+1
   \   0000014A   0xD004             BEQ.N    ??SpiritPktStackInit_5
   \   0000014C   0x2172             MOVS     R1,#+114
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000152   0x.... 0x....      BL       s_assert_failed
    115            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
   \                     ??SpiritPktStackInit_5: (+1)
   \   00000156   0x7B60             LDRB     R0,[R4, #+13]
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD007             BEQ.N    ??SpiritPktStackInit_6
   \   0000015C   0x7B60             LDRB     R0,[R4, #+13]
   \   0000015E   0x2801             CMP      R0,#+1
   \   00000160   0xD004             BEQ.N    ??SpiritPktStackInit_6
   \   00000162   0x2173             MOVS     R1,#+115
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000168   0x.... 0x....      BL       s_assert_failed
    116            s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));
   \                     ??SpiritPktStackInit_6: (+1)
   \   0000016C   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD010             BEQ.N    ??SpiritPktStackInit_7
   \   00000172   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000174   0x2801             CMP      R0,#+1
   \   00000176   0xD00D             BEQ.N    ??SpiritPktStackInit_7
   \   00000178   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000017A   0x2802             CMP      R0,#+2
   \   0000017C   0xD00A             BEQ.N    ??SpiritPktStackInit_7
   \   0000017E   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000180   0x2803             CMP      R0,#+3
   \   00000182   0xD007             BEQ.N    ??SpiritPktStackInit_7
   \   00000184   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000186   0x2804             CMP      R0,#+4
   \   00000188   0xD004             BEQ.N    ??SpiritPktStackInit_7
   \   0000018A   0x2174             MOVS     R1,#+116
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000190   0x.... 0x....      BL       s_assert_failed
    117          
    118          
    119            /* Reads the PROTOCOL1 register */
    120            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
   \                     ??SpiritPktStackInit_7: (+1)
   \   00000194   0xAA00             ADD      R2,SP,#+0
   \   00000196   0x2101             MOVS     R1,#+1
   \   00000198   0x2051             MOVS     R0,#+81
   \   0000019A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000019E   0x9001             STR      R0,[SP, #+4]
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000001A4   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000001A8   0x8001             STRH     R1,[R0, #+0]
    121          
    122            /* Mask a reserved bit */
    123            tempRegValue[0] &= ~0x20;
   \   000001AA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001AE   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000001B2   0xF88D 0x0000      STRB     R0,[SP, #+0]
    124          
    125            /* Always (!) set the automatic packet filtering */
    126            tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
   \   000001B6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001BA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000001BE   0xF88D 0x0000      STRB     R0,[SP, #+0]
    127          
    128            /* Writes the value on register */
    129            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
   \   000001C2   0xAA00             ADD      R2,SP,#+0
   \   000001C4   0x2101             MOVS     R1,#+1
   \   000001C6   0x2051             MOVS     R0,#+81
   \   000001C8   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000001CC   0x9001             STR      R0,[SP, #+4]
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000001D2   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000001D6   0x8001             STRH     R1,[R0, #+0]
    130          
    131            /* Reads the PCKT_FLT_OPTIONS register */
    132            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \   000001D8   0xAA00             ADD      R2,SP,#+0
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0x204F             MOVS     R0,#+79
   \   000001DE   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000001E2   0x9001             STR      R0,[SP, #+4]
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000001E8   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000001EC   0x8001             STRH     R1,[R0, #+0]
    133          
    134            /* Always reset the control and source filtering */
    135            tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
   \   000001EE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001F2   0xF010 0x00CF      ANDS     R0,R0,#0xCF
   \   000001F6   0xF88D 0x0000      STRB     R0,[SP, #+0]
    136          
    137            /* Writes the value on register */
    138            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \   000001FA   0xAA00             ADD      R2,SP,#+0
   \   000001FC   0x2101             MOVS     R1,#+1
   \   000001FE   0x204F             MOVS     R0,#+79
   \   00000200   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000204   0x9001             STR      R0,[SP, #+4]
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   0000020A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000020E   0x8001             STRH     R1,[R0, #+0]
    139          
    140          
    141            /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
    142            tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
   \   00000210   0x7AE0             LDRB     R0,[R4, #+11]
   \   00000212   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000216   0xF88D 0x0000      STRB     R0,[SP, #+0]
    143          
    144          
    145            /* Packet format and width length setting */
    146            pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
   \   0000021A   0x7A60             LDRB     R0,[R4, #+9]
   \   0000021C   0x2800             CMP      R0,#+0
   \   0000021E   0xD103             BNE.N    ??SpiritPktStackInit_8
   \   00000220   0x2001             MOVS     R0,#+1
   \   00000222   0x7260             STRB     R0,[R4, #+9]
   \   00000224   0x7A60             LDRB     R0,[R4, #+9]
   \   00000226   0xE000             B.N      ??SpiritPktStackInit_9
   \                     ??SpiritPktStackInit_8: (+1)
   \   00000228   0x7A60             LDRB     R0,[R4, #+9]
    147            tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
   \                     ??SpiritPktStackInit_9: (+1)
   \   0000022A   0x7A60             LDRB     R0,[R4, #+9]
   \   0000022C   0x1E40             SUBS     R0,R0,#+1
   \   0000022E   0xF050 0x00C0      ORRS     R0,R0,#0xC0
   \   00000232   0xF88D 0x0001      STRB     R0,[SP, #+1]
    148          
    149            /* Preamble, sync and fixed or variable length setting */
    150            tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
    151                              ((uint8_t) pxPktStackInit->xFixVarLength);
   \   00000236   0x7820             LDRB     R0,[R4, #+0]
   \   00000238   0x7861             LDRB     R1,[R4, #+1]
   \   0000023A   0x4308             ORRS     R0,R1,R0
   \   0000023C   0x7A21             LDRB     R1,[R4, #+8]
   \   0000023E   0x4308             ORRS     R0,R1,R0
   \   00000240   0xF88D 0x0002      STRB     R0,[SP, #+2]
    152          
    153            /* CRC length, whitening and FEC setting */
    154            tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
   \   00000244   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000246   0xF88D 0x0003      STRB     R0,[SP, #+3]
    155          
    156            if(pxPktStackInit->xDataWhitening == S_ENABLE)
   \   0000024A   0x7B60             LDRB     R0,[R4, #+13]
   \   0000024C   0x2801             CMP      R0,#+1
   \   0000024E   0xD105             BNE.N    ??SpiritPktStackInit_10
    157            {
    158               tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
   \   00000250   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000254   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000258   0xF88D 0x0003      STRB     R0,[SP, #+3]
    159            }
    160          
    161            if(pxPktStackInit->xFec == S_ENABLE)
   \                     ??SpiritPktStackInit_10: (+1)
   \   0000025C   0x7B20             LDRB     R0,[R4, #+12]
   \   0000025E   0x2801             CMP      R0,#+1
   \   00000260   0xD105             BNE.N    ??SpiritPktStackInit_11
    162            {
    163               tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
   \   00000262   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000266   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000026A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    164            }
    165            
    166            /* Writes registers */
    167            SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
   \                     ??SpiritPktStackInit_11: (+1)
   \   0000026E   0xAA00             ADD      R2,SP,#+0
   \   00000270   0x2104             MOVS     R1,#+4
   \   00000272   0x2030             MOVS     R0,#+48
   \   00000274   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
    168          
    169            /* Sync words setting */
    170            for(i=0;i<4;i++)
   \   00000278   0x2000             MOVS     R0,#+0
   \   0000027A   0x0005             MOVS     R5,R0
   \                     ??SpiritPktStackInit_12: (+1)
   \   0000027C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000027E   0x2D04             CMP      R5,#+4
   \   00000280   0xDA17             BGE.N    ??SpiritPktStackInit_13
    171            {
    172              if(i<3-(pxPktStackInit->xSyncLength >>1))
   \   00000282   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000284   0x7860             LDRB     R0,[R4, #+1]
   \   00000286   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000288   0x0840             LSRS     R0,R0,#+1
   \   0000028A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000028C   0xF1D0 0x0003      RSBS     R0,R0,#+3
   \   00000290   0x4285             CMP      R5,R0
   \   00000292   0xDA04             BGE.N    ??SpiritPktStackInit_14
    173              {
    174                tempRegValue[i]=0;
   \   00000294   0x2000             MOVS     R0,#+0
   \   00000296   0xA900             ADD      R1,SP,#+0
   \   00000298   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000029A   0x5468             STRB     R0,[R5, R1]
   \   0000029C   0xE007             B.N      ??SpiritPktStackInit_15
    175              }
    176              else
    177              {
    178                tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
   \                     ??SpiritPktStackInit_14: (+1)
   \   0000029E   0x6860             LDR      R0,[R4, #+4]
   \   000002A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002A2   0x00E9             LSLS     R1,R5,#+3
   \   000002A4   0x0002             MOVS     R2,R0
   \   000002A6   0x40CA             LSRS     R2,R2,R1
   \   000002A8   0xA800             ADD      R0,SP,#+0
   \   000002AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002AC   0x542A             STRB     R2,[R5, R0]
    179              }
    180            }
   \                     ??SpiritPktStackInit_15: (+1)
   \   000002AE   0x1C6D             ADDS     R5,R5,#+1
   \   000002B0   0xE7E4             B.N      ??SpiritPktStackInit_12
    181          
    182            /* Enables or disables the CRC check */
    183            if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
   \                     ??SpiritPktStackInit_13: (+1)
   \   000002B2   0x7AA0             LDRB     R0,[R4, #+10]
   \   000002B4   0x2800             CMP      R0,#+0
   \   000002B6   0xD103             BNE.N    ??SpiritPktStackInit_16
    184            {
    185              SpiritPktStackFilterOnCrc(S_DISABLE);
   \   000002B8   0x2000             MOVS     R0,#+0
   \   000002BA   0x.... 0x....      BL       SpiritPktCommonFilterOnCrc
   \   000002BE   0xE002             B.N      ??SpiritPktStackInit_17
    186            }
    187            else
    188            {
    189              SpiritPktStackFilterOnCrc(S_ENABLE);
   \                     ??SpiritPktStackInit_16: (+1)
   \   000002C0   0x2001             MOVS     R0,#+1
   \   000002C2   0x.... 0x....      BL       SpiritPktCommonFilterOnCrc
    190            }
    191          
    192            /* Writes registers */
    193            g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
   \                     ??SpiritPktStackInit_17: (+1)
   \   000002C6   0xAA00             ADD      R2,SP,#+0
   \   000002C8   0x2104             MOVS     R1,#+4
   \   000002CA   0x2036             MOVS     R0,#+54
   \   000002CC   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000002D0   0x9001             STR      R0,[SP, #+4]
   \   000002D2   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000002D6   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000002DA   0x8001             STRH     R1,[R0, #+0]
    194          
    195          }
   \   000002DC   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    196          
    197          
    198          /**
    199           * @brief  Returns the SPIRIT STack packet structure according to the specified parameters in the registers.
    200           * @param  pxPktStackInit STack packet init structure.
    201           *         This parameter is a pointer to @ref PktStackInit.
    202           * @retval None.
    203           */

   \                                 In section .text, align 2, keep-with-next
    204          void SpiritPktStackGetInfo(PktStackInit* pxPktStackInit)
    205          {
   \                     SpiritPktStackGetInfo: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    206            uint8_t tempRegValue[10];
    207          
    208            /* Reads registers */
    209            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 10, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x210A             MOVS     R1,#+10
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9003             STR      R0,[SP, #+12]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00000014   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    210          
    211            /* Length width */
    212            pxPktStackInit->cPktLengthWidth=(tempRegValue[1] & 0x0F)+1;
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x7260             STRB     R0,[R4, #+9]
    213          
    214            /* Control length */
    215            pxPktStackInit->xControlLength=(StackControlLength)(tempRegValue[0] & 0x07);
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000002E   0x72E0             STRB     R0,[R4, #+11]
    216          
    217            /* CRC mode */
    218            pxPktStackInit->xCrcMode=(StackCrcMode)(tempRegValue[3] & 0xE0);
   \   00000030   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000034   0xF010 0x00E0      ANDS     R0,R0,#0xE0
   \   00000038   0x72A0             STRB     R0,[R4, #+10]
    219          
    220            /* Whitening */
    221            pxPktStackInit->xDataWhitening=(SpiritFunctionalState)((tempRegValue[3] >> 4) & 0x01);
   \   0000003A   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000003E   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   00000042   0x7360             STRB     R0,[R4, #+13]
    222          
    223            /* FEC */
    224            pxPktStackInit->xFec=(SpiritFunctionalState)(tempRegValue[3] & 0x01);
   \   00000044   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000048   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000004C   0x7320             STRB     R0,[R4, #+12]
    225          
    226            /* FIX or VAR bit */
    227            pxPktStackInit->xFixVarLength=(StackFixVarLength)(tempRegValue[2] & 0x01);
   \   0000004E   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000052   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000056   0x7220             STRB     R0,[R4, #+8]
    228          
    229            /* Preamble length */
    230            pxPktStackInit->xPreambleLength=(StackPreambleLength)(tempRegValue[2] & 0xF8);
   \   00000058   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000005C   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   00000060   0x7020             STRB     R0,[R4, #+0]
    231          
    232            /* Sync length */
    233            pxPktStackInit->xSyncLength=(StackSyncLength)(tempRegValue[2] & 0x06);
   \   00000062   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000066   0xF010 0x0006      ANDS     R0,R0,#0x6
   \   0000006A   0x7060             STRB     R0,[R4, #+1]
    234          
    235            /* sync Words */
    236            pxPktStackInit->lSyncWords=0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x6060             STR      R0,[R4, #+4]
    237            for(uint8_t i=0 ; i<4 ; i++)
   \   00000070   0x2000             MOVS     R0,#+0
   \                     ??SpiritPktStackGetInfo_0: (+1)
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x2804             CMP      R0,#+4
   \   00000076   0xDA14             BGE.N    ??SpiritPktStackGetInfo_1
    238            {
    239                if(i>2-(pxPktStackInit->xSyncLength >>1))
   \   00000078   0x7861             LDRB     R1,[R4, #+1]
   \   0000007A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007C   0x0849             LSRS     R1,R1,#+1
   \   0000007E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000080   0xF1D1 0x0102      RSBS     R1,R1,#+2
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x4281             CMP      R1,R0
   \   00000088   0xDA09             BGE.N    ??SpiritPktStackGetInfo_2
    240                {
    241                  pxPktStackInit->lSyncWords |= tempRegValue[i+6]<<(8*i);
   \   0000008A   0x6861             LDR      R1,[R4, #+4]
   \   0000008C   0xAA00             ADD      R2,SP,#+0
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x1882             ADDS     R2,R0,R2
   \   00000092   0x7992             LDRB     R2,[R2, #+6]
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x00C3             LSLS     R3,R0,#+3
   \   00000098   0x409A             LSLS     R2,R2,R3
   \   0000009A   0x4311             ORRS     R1,R2,R1
   \   0000009C   0x6061             STR      R1,[R4, #+4]
    242                }
    243            }
   \                     ??SpiritPktStackGetInfo_2: (+1)
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0xE7E7             B.N      ??SpiritPktStackGetInfo_0
    244          
    245          }
   \                     ??SpiritPktStackGetInfo_1: (+1)
   \   000000A2   0xBD1F             POP      {R0-R4,PC}       ;; return
    246          
    247          
    248          /**
    249           * @brief  Initializes the SPIRIT STack packet addresses according to the specified
    250           *         parameters in the PktStackAddresses struct.
    251           * @param  pxPktStackAddresses STack packet addresses init structure.
    252           *         This parameter is a pointer to @ref PktStackAddressesInit .
    253           * @retval None.
    254           */

   \                                 In section .text, align 2, keep-with-next
    255          void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
    256          {
   \                     SpiritPktStackAddressesInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    257            uint8_t tempRegValue[3];
    258          
    259            /* Check the parameters */
    260            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktStackAddressesInit_0
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktStackAddressesInit_0
   \   00000010   0xF44F 0x7182      MOV      R1,#+260
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000018   0x.... 0x....      BL       s_assert_failed
    261            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
   \                     ??SpiritPktStackAddressesInit_0: (+1)
   \   0000001C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD008             BEQ.N    ??SpiritPktStackAddressesInit_1
   \   00000022   0x78A0             LDRB     R0,[R4, #+2]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD005             BEQ.N    ??SpiritPktStackAddressesInit_1
   \   00000028   0xF240 0x1105      MOVW     R1,#+261
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000030   0x.... 0x....      BL       s_assert_failed
    262            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
   \                     ??SpiritPktStackAddressesInit_1: (+1)
   \   00000034   0x7920             LDRB     R0,[R4, #+4]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD008             BEQ.N    ??SpiritPktStackAddressesInit_2
   \   0000003A   0x7920             LDRB     R0,[R4, #+4]
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD005             BEQ.N    ??SpiritPktStackAddressesInit_2
   \   00000040   0xF44F 0x7183      MOV      R1,#+262
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000048   0x.... 0x....      BL       s_assert_failed
    263            
    264            /* Reads the filtering options ragister */
    265            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \                     ??SpiritPktStackAddressesInit_2: (+1)
   \   0000004C   0xAA00             ADD      R2,SP,#+0
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x204F             MOVS     R0,#+79
   \   00000052   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    266            
    267            /* Enables or disables filtering on my address */
    268            if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
   \   00000062   0x7820             LDRB     R0,[R4, #+0]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD106             BNE.N    ??SpiritPktStackAddressesInit_3
    269            {
    270              tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
   \   00000068   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000070   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000074   0xE005             B.N      ??SpiritPktStackAddressesInit_4
    271            }
    272            else
    273            {
    274              tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
   \                     ??SpiritPktStackAddressesInit_3: (+1)
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000007E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    275            }
    276            
    277            /* Enables or disables filtering on multicast address */
    278            if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
   \                     ??SpiritPktStackAddressesInit_4: (+1)
   \   00000082   0x78A0             LDRB     R0,[R4, #+2]
   \   00000084   0x2801             CMP      R0,#+1
   \   00000086   0xD106             BNE.N    ??SpiritPktStackAddressesInit_5
    279            {
    280              tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
   \   00000088   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000090   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000094   0xE005             B.N      ??SpiritPktStackAddressesInit_6
    281            }
    282            else
    283            {
    284              tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
   \                     ??SpiritPktStackAddressesInit_5: (+1)
   \   00000096   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009A   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000009E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    285            }
    286            
    287            /* Enables or disables filtering on broadcast address */
    288            if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
   \                     ??SpiritPktStackAddressesInit_6: (+1)
   \   000000A2   0x7920             LDRB     R0,[R4, #+4]
   \   000000A4   0x2801             CMP      R0,#+1
   \   000000A6   0xD106             BNE.N    ??SpiritPktStackAddressesInit_7
    289            {
    290              tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
   \   000000A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AC   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000B0   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000B4   0xE005             B.N      ??SpiritPktStackAddressesInit_8
    291            }
    292            else
    293            {
    294              tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
   \                     ??SpiritPktStackAddressesInit_7: (+1)
   \   000000B6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000BA   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000BE   0xF88D 0x0000      STRB     R0,[SP, #+0]
    295            }
    296            
    297            /* Writes value on the register */
    298            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \                     ??SpiritPktStackAddressesInit_8: (+1)
   \   000000C2   0xAA00             ADD      R2,SP,#+0
   \   000000C4   0x2101             MOVS     R1,#+1
   \   000000C6   0x204F             MOVS     R0,#+79
   \   000000C8   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000CC   0x9001             STR      R0,[SP, #+4]
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000000D2   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000D6   0x8001             STRH     R1,[R0, #+0]
    299            
    300            /* Fills array with the addresses passed in the structure */
    301            tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
   \   000000D8   0x7960             LDRB     R0,[R4, #+5]
   \   000000DA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    302            tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
   \   000000DE   0x78E0             LDRB     R0,[R4, #+3]
   \   000000E0   0xF88D 0x0001      STRB     R0,[SP, #+1]
    303            tempRegValue[2] = pxPktStackAddresses->cMyAddress;
   \   000000E4   0x7860             LDRB     R0,[R4, #+1]
   \   000000E6   0xF88D 0x0002      STRB     R0,[SP, #+2]
    304            
    305            /* Writes them on the addresses registers */
    306            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
   \   000000EA   0xAA00             ADD      R2,SP,#+0
   \   000000EC   0x2103             MOVS     R1,#+3
   \   000000EE   0x204C             MOVS     R0,#+76
   \   000000F0   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000F4   0x9001             STR      R0,[SP, #+4]
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000000FA   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000FE   0x8001             STRH     R1,[R0, #+0]
    307            
    308          }
   \   00000100   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    309          
    310          
    311          /**
    312          * @brief  Returns the SPIRIT STack packet addresses structure according to the specified
    313          *         parameters in the registers.
    314          * @param  pxPktStackAddresses STack packet addresses init structure.
    315          *         This parameter is a pointer to @ref PktStackAddresses.
    316          * @retval None.
    317          */

   \                                 In section .text, align 2, keep-with-next
    318          void SpiritPktStackGetAddressesInfo(PktStackAddressesInit* pxPktStackAddresses)
    319          {
   \                     SpiritPktStackGetAddressesInfo: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    320            uint8_t tempRegValue[3];
    321            
    322            /* Reads values on the PCKT_FLT_GOALS registers */
    323            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2103             MOVS     R1,#+3
   \   00000008   0x204C             MOVS     R0,#+76
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00000014   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000018   0x8001             STRH     R1,[R0, #+0]
    324            
    325            /* Fit the structure with the read addresses */
    326            pxPktStackAddresses->cBroadcastAddress = tempRegValue[0];
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0x7160             STRB     R0,[R4, #+5]
    327            pxPktStackAddresses->cMulticastAddress = tempRegValue[1];
   \   00000020   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000024   0x70E0             STRB     R0,[R4, #+3]
    328            pxPktStackAddresses->cMyAddress = tempRegValue[2];
   \   00000026   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000002A   0x7060             STRB     R0,[R4, #+1]
    329            
    330            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
   \   0000002C   0xAA00             ADD      R2,SP,#+0
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x204F             MOVS     R0,#+79
   \   00000032   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   0000003C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000040   0x8001             STRH     R1,[R0, #+0]
    331            
    332            /* Fit the structure with the read filtering bits */
    333            pxPktStackAddresses->xFilterOnBroadcastAddress = (SpiritFunctionalState)((tempRegValue[0] >> 1) & 0x01);
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \   0000004A   0x7120             STRB     R0,[R4, #+4]
    334            pxPktStackAddresses->xFilterOnMulticastAddress = (SpiritFunctionalState)((tempRegValue[0] >> 2) & 0x01);
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000054   0x70A0             STRB     R0,[R4, #+2]
    335            pxPktStackAddresses->xFilterOnMyAddress = (SpiritFunctionalState)((tempRegValue[0] >> 3) & 0x01);
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0xF3C0 0x00C0      UBFX     R0,R0,#+3,#+1
   \   0000005E   0x7020             STRB     R0,[R4, #+0]
    336            
    337          }
   \   00000060   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    338          
    339          
    340          /**
    341          * @brief  Initializes the SPIRIT STack packet LLP options according to the specified
    342          *         parameters in the PktStackLlpInit struct.
    343          * @param  pxPktStackLlpInit STack packet LLP init structure.
    344          *         This parameter is a pointer to @ref PktStackLlpInit.
    345          * @retval None.
    346          */

   \                                 In section .text, align 2, keep-with-next
    347          void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
    348          {
   \                     SpiritPktStackLlpInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    349            uint8_t tempRegValue[2];
    350          
    351            /* Check the parameters */
    352            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackLlpInit->xPiggybacking));
   \   00000004   0x7860             LDRB     R0,[R4, #+1]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD008             BEQ.N    ??SpiritPktStackLlpInit_0
   \   0000000A   0x7860             LDRB     R0,[R4, #+1]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD005             BEQ.N    ??SpiritPktStackLlpInit_0
   \   00000010   0xF44F 0x71B0      MOV      R1,#+352
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000018   0x.... 0x....      BL       s_assert_failed
    353            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackLlpInit->xAutoAck));
   \                     ??SpiritPktStackLlpInit_0: (+1)
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD008             BEQ.N    ??SpiritPktStackLlpInit_1
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD005             BEQ.N    ??SpiritPktStackLlpInit_1
   \   00000028   0xF240 0x1161      MOVW     R1,#+353
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000030   0x.... 0x....      BL       s_assert_failed
    354            s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
   \                     ??SpiritPktStackLlpInit_1: (+1)
   \   00000034   0x78A0             LDRB     R0,[R4, #+2]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD031             BEQ.N    ??SpiritPktStackLlpInit_2
   \   0000003A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000003C   0x2810             CMP      R0,#+16
   \   0000003E   0xD02E             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000040   0x78A0             LDRB     R0,[R4, #+2]
   \   00000042   0x2820             CMP      R0,#+32
   \   00000044   0xD02B             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000046   0x78A0             LDRB     R0,[R4, #+2]
   \   00000048   0x2830             CMP      R0,#+48
   \   0000004A   0xD028             BEQ.N    ??SpiritPktStackLlpInit_2
   \   0000004C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000004E   0x2840             CMP      R0,#+64
   \   00000050   0xD025             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000052   0x78A0             LDRB     R0,[R4, #+2]
   \   00000054   0x2850             CMP      R0,#+80
   \   00000056   0xD022             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000058   0x78A0             LDRB     R0,[R4, #+2]
   \   0000005A   0x2860             CMP      R0,#+96
   \   0000005C   0xD01F             BEQ.N    ??SpiritPktStackLlpInit_2
   \   0000005E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000060   0x2870             CMP      R0,#+112
   \   00000062   0xD01C             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000064   0x78A0             LDRB     R0,[R4, #+2]
   \   00000066   0x2880             CMP      R0,#+128
   \   00000068   0xD019             BEQ.N    ??SpiritPktStackLlpInit_2
   \   0000006A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000006C   0x2890             CMP      R0,#+144
   \   0000006E   0xD016             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000070   0x78A0             LDRB     R0,[R4, #+2]
   \   00000072   0x28A0             CMP      R0,#+160
   \   00000074   0xD013             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000076   0x78A0             LDRB     R0,[R4, #+2]
   \   00000078   0x28B0             CMP      R0,#+176
   \   0000007A   0xD010             BEQ.N    ??SpiritPktStackLlpInit_2
   \   0000007C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000007E   0x28C0             CMP      R0,#+192
   \   00000080   0xD00D             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000082   0x78A0             LDRB     R0,[R4, #+2]
   \   00000084   0x28D0             CMP      R0,#+208
   \   00000086   0xD00A             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000088   0x78A0             LDRB     R0,[R4, #+2]
   \   0000008A   0x28E0             CMP      R0,#+224
   \   0000008C   0xD007             BEQ.N    ??SpiritPktStackLlpInit_2
   \   0000008E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000090   0x28F0             CMP      R0,#+240
   \   00000092   0xD004             BEQ.N    ??SpiritPktStackLlpInit_2
   \   00000094   0xF44F 0x71B1      MOV      R1,#+354
   \   00000098   0x....             LDR.N    R0,??DataTable14
   \   0000009A   0x.... 0x....      BL       s_assert_failed
    355            /* check if piggybacking is enabled and autoack is disabled */
    356            s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));
   \                     ??SpiritPktStackLlpInit_2: (+1)
   \   0000009E   0x7860             LDRB     R0,[R4, #+1]
   \   000000A0   0x2801             CMP      R0,#+1
   \   000000A2   0xD107             BNE.N    ??SpiritPktStackLlpInit_3
   \   000000A4   0x7820             LDRB     R0,[R4, #+0]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD104             BNE.N    ??SpiritPktStackLlpInit_3
   \   000000AA   0xF44F 0x71B2      MOV      R1,#+356
   \   000000AE   0x....             LDR.N    R0,??DataTable14
   \   000000B0   0x.... 0x....      BL       s_assert_failed
    357          
    358            /* Piggybacking mechanism setting on the PROTOCOL1 register */
    359            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
   \                     ??SpiritPktStackLlpInit_3: (+1)
   \   000000B4   0xAA00             ADD      R2,SP,#+0
   \   000000B6   0x2102             MOVS     R1,#+2
   \   000000B8   0x2051             MOVS     R0,#+81
   \   000000BA   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   000000BE   0x9001             STR      R0,[SP, #+4]
   \   000000C0   0x....             LDR.N    R0,??DataTable14_1
   \   000000C2   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000C6   0x8001             STRH     R1,[R0, #+0]
    360            if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
   \   000000C8   0x7860             LDRB     R0,[R4, #+1]
   \   000000CA   0x2801             CMP      R0,#+1
   \   000000CC   0xD106             BNE.N    ??SpiritPktStackLlpInit_4
    361            {
    362              tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
   \   000000CE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D2   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000D6   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000DA   0xE005             B.N      ??SpiritPktStackLlpInit_5
    363            }
    364            else
    365            {
    366              tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
   \                     ??SpiritPktStackLlpInit_4: (+1)
   \   000000DC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000E0   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000000E4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    367            }
    368          
    369            /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
    370            if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
   \                     ??SpiritPktStackLlpInit_5: (+1)
   \   000000E8   0x7820             LDRB     R0,[R4, #+0]
   \   000000EA   0x2801             CMP      R0,#+1
   \   000000EC   0xD106             BNE.N    ??SpiritPktStackLlpInit_6
    371            {
    372              tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
   \   000000EE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000F2   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000F6   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   000000FA   0xE005             B.N      ??SpiritPktStackLlpInit_7
    373            }
    374            else
    375            {
    376              tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
   \                     ??SpiritPktStackLlpInit_6: (+1)
   \   000000FC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000100   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000104   0xF88D 0x0001      STRB     R0,[SP, #+1]
    377            }
    378          
    379            /* Max number of retransmission setting */
    380            tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
   \                     ??SpiritPktStackLlpInit_7: (+1)
   \   00000108   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000010C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000110   0xF88D 0x0001      STRB     R0,[SP, #+1]
    381            tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
   \   00000114   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000118   0x78A1             LDRB     R1,[R4, #+2]
   \   0000011A   0x4308             ORRS     R0,R1,R0
   \   0000011C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    382          
    383            /* Writes registers */
    384            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
   \   00000120   0xAA00             ADD      R2,SP,#+0
   \   00000122   0x2102             MOVS     R1,#+2
   \   00000124   0x2051             MOVS     R0,#+81
   \   00000126   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000012A   0x9001             STR      R0,[SP, #+4]
   \   0000012C   0x....             LDR.N    R0,??DataTable14_1
   \   0000012E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000132   0x8001             STRH     R1,[R0, #+0]
    385          
    386          }
   \   00000134   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    387          
    388          
    389          /**
    390           * @brief  Returns the SPIRIT STack packet LLP options according to the specified
    391           *         values in the registers.
    392           * @param  pxPktStackLlpInit STack packet LLP structure.
    393           *         This parameter is a pointer to @ref PktStackLlpInit.
    394           * @retval None.
    395           */

   \                                 In section .text, align 2, keep-with-next
    396          void SpiritPktStackLlpGetInfo(PktStackLlpInit* pxPktStackLlpInit)
    397          {
   \                     SpiritPktStackLlpGetInfo: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    398            uint8_t tempRegValue[2];
    399          
    400            /* Piggybacking mechanism setting on the PROTOCOL1 register */
    401            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2051             MOVS     R0,#+81
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable14_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    402          
    403            /* Fit the structure with the read values */
    404            pxPktStackLlpInit->xPiggybacking = (SpiritFunctionalState)((tempRegValue[0] >> 6) & 0x01);
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF3C0 0x1080      UBFX     R0,R0,#+6,#+1
   \   00000020   0x7060             STRB     R0,[R4, #+1]
    405            pxPktStackLlpInit->xAutoAck = (SpiritFunctionalState)((tempRegValue[1] >> 2) & 0x01);
   \   00000022   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000026   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   0000002A   0x7020             STRB     R0,[R4, #+0]
    406            pxPktStackLlpInit->xNMaxRetx = (StackNMaxReTx)(tempRegValue[1] & PROTOCOL0_NMAX_RETX_MASK);
   \   0000002C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000030   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000034   0x70A0             STRB     R0,[R4, #+2]
    407          
    408          }
   \   00000036   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    409          
    410          
    411          /**
    412           * @brief  Configures the STack packet format for SPIRIT.
    413           * @param  None.
    414           * @retval None.
    415           */

   \                                 In section .text, align 2, keep-with-next
    416          void SpiritPktStackSetFormat(void)
    417          {
   \                     SpiritPktStackSetFormat: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    418            uint8_t tempRegValue;
    419          
    420            /* Reads the PCKTCTRL3 register value */
    421            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable14_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    422          
    423            /* Build value to be written. Also set to 0 the direct RX mode bits */
    424            tempRegValue &= 0x0F;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
    425            tempRegValue |= ((uint8_t)PCKTCTRL3_PCKT_FRMT_STACK);
   \   00000024   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000028   0xF050 0x00C0      ORRS     R0,R0,#0xC0
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    426          
    427            /* Writes the value on the PCKTCTRL3 register. */
    428            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2031             MOVS     R0,#+49
   \   00000036   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0x....             LDR.N    R0,??DataTable14_1
   \   0000003E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000042   0x8001             STRH     R1,[R0, #+0]
    429          
    430            /* Reads the PCKTCTRL1 register value */
    431            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000044   0xAA00             ADD      R2,SP,#+0
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x2033             MOVS     R0,#+51
   \   0000004A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x....             LDR.N    R0,??DataTable14_1
   \   00000052   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000056   0x8001             STRH     R1,[R0, #+0]
    432          
    433            /* Build the new value. Set to 0 the direct TX mode bits */
    434            tempRegValue &= 0xF3;
   \   00000058   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005C   0xF010 0x00F3      ANDS     R0,R0,#0xF3
   \   00000060   0xF88D 0x0000      STRB     R0,[SP, #+0]
    435          
    436            /* Writes the PCKTCTRL1 value on register */
    437            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL1_BASE, 1, &tempRegValue);
   \   00000064   0xAA00             ADD      R2,SP,#+0
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x2033             MOVS     R0,#+51
   \   0000006A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000006E   0x9001             STR      R0,[SP, #+4]
   \   00000070   0x....             LDR.N    R0,??DataTable14_1
   \   00000072   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000076   0x8001             STRH     R1,[R0, #+0]
    438          
    439            /* Reads the PROTOCOL1 register */
    440            g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
   \   00000078   0xAA00             ADD      R2,SP,#+0
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0x2051             MOVS     R0,#+81
   \   0000007E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000082   0x9001             STR      R0,[SP, #+4]
   \   00000084   0x....             LDR.N    R0,??DataTable14_1
   \   00000086   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000008A   0x8001             STRH     R1,[R0, #+0]
    441          
    442            /* Mask a reserved bit */
    443            tempRegValue &= ~0x20;
   \   0000008C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000090   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000094   0xF88D 0x0000      STRB     R0,[SP, #+0]
    444          
    445            /* Writes the value on the PROTOCOL1 register */
    446            g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
   \   00000098   0xAA00             ADD      R2,SP,#+0
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x2051             MOVS     R0,#+81
   \   0000009E   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   000000A2   0x9001             STR      R0,[SP, #+4]
   \   000000A4   0x....             LDR.N    R0,??DataTable14_1
   \   000000A6   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000AA   0x8001             STRH     R1,[R0, #+0]
    447          
    448          }
   \   000000AC   0xBD07             POP      {R0-R2,PC}       ;; return
    449          
    450          
    451          /**
    452           * @brief  Sets the address length for SPIRIT STack packets (always 2).
    453           * @param  None.
    454           * @retval None.
    455           */

   \                                 In section .text, align 2, keep-with-next
    456          void SpiritPktStackSetAddressLength(void)
    457          {
   \                     SpiritPktStackSetAddressLength: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    458            uint8_t tempRegValue;
    459          
    460            /* Reads the PCKTCTRL4 register value */
    461            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable14_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    462          
    463            /* Build the new value */
    464            tempRegValue &= ~PCKTCTRL4_ADDRESS_LEN_MASK;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xF010 0x00E7      ANDS     R0,R0,#0xE7
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
    465            tempRegValue |= ((uint8_t)0x10);
   \   00000024   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000028   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    466          
    467            /* Writes the value on the PCKTCTRL4 register */
    468            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x2030             MOVS     R0,#+48
   \   00000036   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0x....             LDR.N    R0,??DataTable14_1
   \   0000003E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000042   0x8001             STRH     R1,[R0, #+0]
    469          
    470          }
   \   00000044   0xBD07             POP      {R0-R2,PC}       ;; return
    471          
    472          
    473          /**
    474           * @brief  Sets the payload length for SPIRIT STack packets. Since the packet length
    475           *         depends from the address (always 2 for this packet format)
    476           *         and the control field size, this function reads the control length register
    477           *         content in order to determine the correct packet length to be written.
    478           * @param  nPayloadLength payload length in bytes.
    479           *         This parameter can be any value of uint16_t.
    480           * @retval None.
    481           */

   \                                 In section .text, align 2, keep-with-next
    482          void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
    483          {
   \                     SpiritPktStackSetPayloadLength: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    484            uint8_t tempRegValue[2];
    485          
    486            /* Computes the oversize (address + control) size */
    487            uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
   \   00000006   0x.... 0x....      BL       SpiritPktCommonGetControlLength
   \   0000000A   0x1C85             ADDS     R5,R0,#+2
    488          
    489            /* Computes PCKTLEN0 value from lPayloadLength */
    490            tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
   \   0000000C   0x1928             ADDS     R0,R5,R4
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    491            /* Computes PCKTLEN1 value from lPayloadLength */
    492            tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000016   0x1928             ADDS     R0,R5,R4
   \   00000018   0x1200             ASRS     R0,R0,#+8
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    493          
    494            /* Writes the value on the PCKTLENx registers */
    495            g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x2102             MOVS     R1,#+2
   \   00000022   0x2034             MOVS     R0,#+52
   \   00000024   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0x....             LDR.N    R0,??DataTable14_1
   \   0000002C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000030   0x8001             STRH     R1,[R0, #+0]
    496          
    497          }
   \   00000032   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    498          
    499          
    500          /**
    501           * @brief  Returns the payload length for SPIRIT STack packets. Since the
    502           *         packet length depends from the address and the control
    503           *         field size, this function reads the correspondent
    504           *         registers in order to determine the correct payload length
    505           *         to be returned.
    506           * @param  None.
    507           * @retval uint16_t Payload length.
    508           */

   \                                 In section .text, align 2, keep-with-next
    509          uint16_t SpiritPktStackGetPayloadLength(void)
    510          {
   \                     SpiritPktStackGetPayloadLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    511            uint8_t tempRegValue[2];
    512            /* Computes the oversize (address + control) size */
    513            uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
   \   00000002   0x.... 0x....      BL       SpiritPktCommonGetControlLength
   \   00000006   0x1C84             ADDS     R4,R0,#+2
    514          
    515            /* Reads the PCKTLEN1 registers value */
    516            g_xStatus = SpiritSpiReadRegisters(PCKTLEN1_BASE, 2, tempRegValue);
   \   00000008   0xAA00             ADD      R2,SP,#+0
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x2034             MOVS     R0,#+52
   \   0000000E   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0x....             LDR.N    R0,??DataTable14_1
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
    517          
    518            /* Rebuild and return the payload length value */
    519            return (((uint16_t) tempRegValue[1])<<8 + (uint16_t) tempRegValue[0] - overSize);
   \   0000001C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000020   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000024   0x3108             ADDS     R1,R1,#+8
   \   00000026   0x1B09             SUBS     R1,R1,R4
   \   00000028   0x4088             LSLS     R0,R0,R1
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    520          
    521          }
    522          
    523          
    524          /**
    525           * @brief  Computes and sets the variable payload length for SPIRIT STack packets.
    526           * @param  nMaxPayloadLength payload length in bytes.
    527           *         This parameter is an uint16_t.
    528           * @param  xControlLength control length in bytes.
    529           *         This parameter can be any value of @ref StackControlLength.
    530           * @retval None.
    531           */

   \                                 In section .text, align 2, keep-with-next
    532          void SpiritPktStackSetVarLengthWidth(uint16_t nMaxPayloadLength, StackControlLength xControlLength)
    533          {
   \                     SpiritPktStackSetVarLengthWidth: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    534            uint8_t tempRegValue,
    535                    i;
    536            uint32_t packetLength;
    537          
    538          
    539            /* packet length = payload length + address length (2) + control length */
    540            packetLength=nMaxPayloadLength+2+xControlLength;
   \   00000008   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x1928             ADDS     R0,R5,R4
   \   0000000E   0x1C80             ADDS     R0,R0,#+2
   \   00000010   0x0007             MOVS     R7,R0
    541          
    542            /* Computes the number of bits */
    543            for(i=0;i<16;i++)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x0006             MOVS     R6,R0
   \                     ??SpiritPktStackSetVarLengthWidth_0: (+1)
   \   00000016   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000018   0x2E10             CMP      R6,#+16
   \   0000001A   0xDA04             BGE.N    ??SpiritPktStackSetVarLengthWidth_1
    544            {
    545              if(packetLength == 0) 
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD002             BEQ.N    ??SpiritPktStackSetVarLengthWidth_1
    546              {
    547                break;
    548              }
    549              packetLength >>= 1;
   \                     ??SpiritPktStackSetVarLengthWidth_2: (+1)
   \   00000020   0x087F             LSRS     R7,R7,#+1
    550            }
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \   00000024   0xE7F7             B.N      ??SpiritPktStackSetVarLengthWidth_0
    551            i==0 ? i=1 : i;
   \                     ??SpiritPktStackSetVarLengthWidth_1: (+1)
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD102             BNE.N    ??SpiritPktStackSetVarLengthWidth_3
   \   0000002C   0x2601             MOVS     R6,#+1
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0xE000             B.N      ??SpiritPktStackSetVarLengthWidth_4
   \                     ??SpiritPktStackSetVarLengthWidth_3: (+1)
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
    552          
    553            /* Reads the PCKTCTRL3 register value */
    554            g_xStatus = SpiritSpiReadRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \                     ??SpiritPktStackSetVarLengthWidth_4: (+1)
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x2031             MOVS     R0,#+49
   \   0000003A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x....             LDR.N    R0,??DataTable14_1
   \   00000042   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000046   0x8001             STRH     R1,[R0, #+0]
    555          
    556            /* Build the register value */
    557            tempRegValue &= ~PCKTCTRL3_LEN_WID_MASK;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xF010 0x00F0      ANDS     R0,R0,#0xF0
   \   00000050   0xF88D 0x0000      STRB     R0,[SP, #+0]
    558            tempRegValue |= ((uint8_t)(i-1));
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0x1E71             SUBS     R1,R6,#+1
   \   0000005A   0x4308             ORRS     R0,R1,R0
   \   0000005C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    559          
    560            /* Writes the PCKTCTRL3 register value */
    561            g_xStatus = SpiritSpiWriteRegisters(PCKTCTRL3_BASE, 1, &tempRegValue);
   \   00000060   0xAA00             ADD      R2,SP,#+0
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x2031             MOVS     R0,#+49
   \   00000066   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x....             LDR.N    R0,??DataTable14_1
   \   0000006E   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000072   0x8001             STRH     R1,[R0, #+0]
    562          
    563          }
   \   00000074   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    564          
    565          
    566          /**
    567           * @brief  Rx packet source mask. Used to mask the address of the accepted packets. If 0 -> no filtering.
    568           * @param  cMask Rx source mask.
    569           *         This parameter is an uint8_t.
    570           * @retval None.
    571           */

   \                                 In section .text, align 2, keep-with-next
    572          void SpiritPktStackSetRxSourceMask(uint8_t cMask)
    573          {
   \                     SpiritPktStackSetRxSourceMask: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    574            /* Writes value on the register PCKT_FLT_GOALS_SOURCE_MASK */
    575            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_MASK_BASE, 1, &cMask);
   \   00000004   0xAA02             ADD      R2,SP,#+8
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204A             MOVS     R0,#+74
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x....             LDR.N    R0,??DataTable14_1
   \   00000012   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    576          
    577          }
   \   00000018   0xBD07             POP      {R0-R2,PC}       ;; return
    578          
    579          
    580          /**
    581           * @brief  Returns the Rx packet source mask. Used to mask the address of the accepted packets. If 0 -> no filtering.
    582           * @param  None.
    583           * @retval uint8_t Rx source mask.
    584           */

   \                                 In section .text, align 2, keep-with-next
    585          uint8_t SpiritPktStackGetRxSourceMask(void)
    586          {
   \                     SpiritPktStackGetRxSourceMask: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    587            uint8_t tempRegValue;
    588          
    589            /* Writes value on the PCKT_FLT_GOALS_SOURCE_MASK register */
    590            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_SOURCE_MASK_BASE, 1, &tempRegValue);
   \   00000004   0xAA00             ADD      R2,SP,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x204A             MOVS     R0,#+74
   \   0000000A   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x....             LDR.N    R0,??DataTable14_1
   \   00000012   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000016   0x8001             STRH     R1,[R0, #+0]
    591          
    592            /* Return the read value */
    593            return tempRegValue;
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0xBD0E             POP      {R1-R3,PC}       ;; return
    594          
    595          }
    596          
    597          /**
    598           * @brief  Returns the packet length field of the received packet.
    599           * @param  None.
    600           * @retval uint16_t Packet length.
    601           */

   \                                 In section .text, align 2, keep-with-next
    602          uint16_t SpiritPktStackGetReceivedPktLength(void)
    603          {
   \                     SpiritPktStackGetReceivedPktLength: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    604            uint8_t tempRegValue[2];
    605            uint16_t tempLength;
    606            
    607            /* Reads the RX_PCKT_LENx registers value */
    608            g_xStatus = SpiritSpiReadRegisters(RX_PCKT_LEN1_BASE, 2, tempRegValue);
   \   00000002   0xAA00             ADD      R2,SP,#+0
   \   00000004   0x2102             MOVS     R1,#+2
   \   00000006   0x20C9             MOVS     R0,#+201
   \   00000008   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x....             LDR.N    R0,??DataTable14_1
   \   00000010   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000014   0x8001             STRH     R1,[R0, #+0]
    609          
    610            /* Rebuild and return the the length field */
    611            tempLength = ((((uint16_t) tempRegValue[0]) << 8) + (uint16_t) tempRegValue[1]);
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000001E   0xEB11 0x2000      ADDS     R0,R1,R0, LSL #+8
   \   00000022   0x0004             MOVS     R4,R0
    612            
    613            /* Computes the oversize (address + control) size */
    614            tempLength -= 2 + (uint16_t) SpiritPktStackGetControlLength();
   \   00000024   0x.... 0x....      BL       SpiritPktCommonGetControlLength
   \   00000028   0x1A20             SUBS     R0,R4,R0
   \   0000002A   0x1E80             SUBS     R0,R0,#+2
   \   0000002C   0x0004             MOVS     R4,R0
    615            
    616            return tempLength;
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    617          
    618          }
    619          
    620          
    621          /**
    622           * @brief  If enabled RX packet is accepted only if the masked source address field matches the
    623           *         masked source address field reference (SOURCE_MASK & SOURCE_FIELD_REF == SOURCE_MASK & RX_SOURCE_FIELD).
    624           * @param  xNewState new state for Source address filtering enable bit.
    625           *         This parameter can be S_ENABLE or S_DISABLE.
    626           * @retval None.
    627           * @note   This filtering control is enabled by default but the source address mask is by default set to 0.
    628           *         As a matter of fact the user has to enable the source filtering bit after the packet initialization
    629           *         because the PktInit routine disables it.
    630           */

   \                                 In section .text, align 2, keep-with-next
    631          void SpiritPktStackFilterOnSourceAddress(SpiritFunctionalState xNewState)
    632          {
   \                     SpiritPktStackFilterOnSourceAddress: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    633            uint8_t tempRegValue;
    634          
    635             /* Check the parameters */
    636            s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD007             BEQ.N    ??SpiritPktStackFilterOnSourceAddress_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD004             BEQ.N    ??SpiritPktStackFilterOnSourceAddress_0
   \   00000010   0xF44F 0x711F      MOV      R1,#+636
   \   00000014   0x....             LDR.N    R0,??DataTable14
   \   00000016   0x.... 0x....      BL       s_assert_failed
    637          
    638          
    639            /* Modify the register value: set or reset the source bit filtering */
    640            g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktStackFilterOnSourceAddress_0: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x204F             MOVS     R0,#+79
   \   00000020   0x.... 0x....      BL       SdkEvalSpiReadRegisters
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0x....             LDR.N    R0,??DataTable14_1
   \   00000028   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000002C   0x8001             STRH     R1,[R0, #+0]
    641          
    642            /* Set or reset the SOURCE ADDRESS filtering enabling bit */
    643            if(xNewState == S_ENABLE)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0xD106             BNE.N    ??SpiritPktStackFilterOnSourceAddress_1
    644            {
    645              tempRegValue |= PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK;
   \   00000034   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000038   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000040   0xE005             B.N      ??SpiritPktStackFilterOnSourceAddress_2
    646            }
    647            else
    648            {
    649              tempRegValue &= ~PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK;
   \                     ??SpiritPktStackFilterOnSourceAddress_1: (+1)
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    650            }
    651          
    652            /* Writes the new value on the PCKT_FLT_OPTIONS register */
    653            g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
   \                     ??SpiritPktStackFilterOnSourceAddress_2: (+1)
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x204F             MOVS     R0,#+79
   \   00000054   0x.... 0x....      BL       SdkEvalSpiWriteRegisters
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x....             LDR.N    R0,??DataTable14_1
   \   0000005C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000060   0x8001             STRH     R1,[R0, #+0]
    654          
    655          }
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     g_xStatus

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000048   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000050   0x5F 0x50          DC8 5FH, 50H, 72H, 6FH, 6AH, 65H, 63H, 74H
   \              0x72 0x6F    
   \              0x6A 0x65    
   \              0x63 0x74    
   \   00000058   0x5C 0x53          DC8 5CH, 53H, 50H, 49H, 52H, 49H, 54H, 31H
   \              0x50 0x49    
   \              0x52 0x49    
   \              0x54 0x31    
   \   00000060   0x5F 0x4C          DC8 5FH, 4CH, 69H, 62H, 72H, 61H, 72H, 79H
   \              0x69 0x62    
   \              0x72 0x61    
   \              0x72 0x79    
   \   00000068   0x5C 0x53          DC8 5CH, 53H, 6FH, 75H, 72H, 63H, 65H, 5CH
   \              0x6F 0x75    
   \              0x72 0x63    
   \              0x65 0x5C    
   \   00000070   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 53H, 50H, 49H, 52H
   \              0x63 0x5C    
   \              0x53 0x50    
   \              0x49 0x52    
   \   00000078   0x49 0x54          DC8 49H, 54H, 5FH, 50H, 6BH, 74H, 53H, 74H
   \              0x5F 0x50    
   \              0x6B 0x74    
   \              0x53 0x74    
   \   00000080   0x61 0x63          DC8 61H, 63H, 6BH, 2EH, 63H, 0
   \              0x6B 0x2E    
   \              0x63 0x00    
   \   00000086   0x00 0x00          DC8 0, 0
    656          
    657          /**
    658           *@}
    659           */
    660          
    661          /**
    662           *@}
    663           */
    664          
    665          
    666          /**
    667           *@}
    668           */
    669          
    670          
    671          
    672          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SpiritPktStackAddressesInit
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktStackFilterOnSourceAddress
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktStackGetAddressesInfo
        16   -> SdkEvalSpiReadRegisters
      24   SpiritPktStackGetInfo
        24   -> SdkEvalSpiReadRegisters
      16   SpiritPktStackGetPayloadLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SpiritPktCommonGetControlLength
      16   SpiritPktStackGetReceivedPktLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SpiritPktCommonGetControlLength
      16   SpiritPktStackGetRxSourceMask
        16   -> SdkEvalSpiReadRegisters
      24   SpiritPktStackInit
        24   -> SdkEvalSpiReadRegisters
        24   -> SdkEvalSpiWriteRegisters
        24   -> SpiritPktCommonFilterOnCrc
        24   -> s_assert_failed
      16   SpiritPktStackLlpGetInfo
        16   -> SdkEvalSpiReadRegisters
      16   SpiritPktStackLlpInit
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
        16   -> s_assert_failed
      16   SpiritPktStackSetAddressLength
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
      16   SpiritPktStackSetFormat
        16   -> SdkEvalSpiReadRegisters
        16   -> SdkEvalSpiWriteRegisters
      24   SpiritPktStackSetPayloadLength
        24   -> SdkEvalSpiWriteRegisters
        24   -> SpiritPktCommonGetControlLength
      16   SpiritPktStackSetRxSourceMask
        16   -> SdkEvalSpiWriteRegisters
      32   SpiritPktStackSetVarLengthWidth
        32   -> SdkEvalSpiReadRegisters
        32   -> SdkEvalSpiWriteRegisters


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
     136  ?_0
     258  SpiritPktStackAddressesInit
     100  SpiritPktStackFilterOnSourceAddress
      98  SpiritPktStackGetAddressesInfo
     164  SpiritPktStackGetInfo
      46  SpiritPktStackGetPayloadLength
      52  SpiritPktStackGetReceivedPktLength
      30  SpiritPktStackGetRxSourceMask
     734  SpiritPktStackInit
      56  SpiritPktStackLlpGetInfo
     310  SpiritPktStackLlpInit
      70  SpiritPktStackSetAddressLength
     174  SpiritPktStackSetFormat
      52  SpiritPktStackSetPayloadLength
      26  SpiritPktStackSetRxSourceMask
     118  SpiritPktStackSetVarLengthWidth

 
   136 bytes in section .rodata
 2 296 bytes in section .text
 
 2 296 bytes of CODE  memory
   136 bytes of CONST memory

Errors: none
Warnings: none
