###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        20/Nov/2015  05:04:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\misc.c
#    Command line =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\misc.c
#        -D USE_STDPERIPH_DRIVER -D VECT_TAB_FLASH -D STM32L1XX_MD -D
#        IAR_ARM_CM3 -D USE_FULL_ASSERT -D SPIRIT_USE_FULL_ASSERT -D
#        USE_SYSTICK_DELAY -D SDK -lC
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\
#        -o
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\.\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\examples\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\Application\runtime\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Eval_STM32L\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SPIRIT1_Library\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\SDK_Eval_Util\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\SDK_Virtual_Com\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\..\STM32L\STM32_USB-FS-Device_Lib\Source\inc\
#        -I
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\..\ACQ\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\"
#    List file    =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\List\misc.lst
#    Object file  =  
#        E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\SPIRIT1_Library_Project\EWARM\DZ-SB-DISC01\Obj\misc.o
#
###############################################################################

E:\ACQ\Proj_ver09a_15102015\End_02\2013_11_25_Spirit1_Elektrolux\STM32L\STM32L1xx_StdPeriph_Lib\Source\STM32L1xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    31-December-2010
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     20            ******************************************************************************  
     21            */ 
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "misc.h"
     25          
     26          /** @addtogroup STM32L1xx_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup MISC 
     31            * @brief MISC driver modules
     32            * @{
     33            */
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     38          
     39          /* Private macro -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          
     44          /** @defgroup MISC_Private_Functions
     45            * @{
     46            */
     47          /**
     48            *
     49          @verbatim   
     50           *******************************************************************************
     51                              Interrupts configuration functions
     52           *******************************************************************************  
     53            
     54            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     55            The Cortex-M3 exceptions are managed by CMSIS functions.
     56            
     57            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig() function
     58               according to the following table.
     59           
     60           The table below gives the allowed values of the pre-emption priority and subpriority according
     61           to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     62            ============================================================================================================================
     63              NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  | Description
     64            ============================================================================================================================
     65             NVIC_PriorityGroup_0  |                0                  |            0-15             |   0 bits for pre-emption priority
     66                                   |                                   |                             |   4 bits for subpriority
     67            ----------------------------------------------------------------------------------------------------------------------------
     68             NVIC_PriorityGroup_1  |                0-1                |            0-7              |   1 bits for pre-emption priority
     69                                   |                                   |                             |   3 bits for subpriority
     70            ----------------------------------------------------------------------------------------------------------------------------    
     71             NVIC_PriorityGroup_2  |                0-3                |            0-3              |   2 bits for pre-emption priority
     72                                   |                                   |                             |   2 bits for subpriority
     73            ----------------------------------------------------------------------------------------------------------------------------    
     74             NVIC_PriorityGroup_3  |                0-7                |            0-1              |   3 bits for pre-emption priority
     75                                   |                                   |                             |   1 bits for subpriority
     76            ----------------------------------------------------------------------------------------------------------------------------    
     77             NVIC_PriorityGroup_4  |                0-15               |            0                |   4 bits for pre-emption priority
     78                                   |                                   |                             |   0 bits for subpriority                       
     79            ============================================================================================================================     
     80          
     81          
     82            2. Enable and Configure the priority of the selected IRQ Channels.  
     83          
     84          @note When the NVIC_PriorityGroup_0 is selected, it will no any nested interrupt,
     85                the IRQ priority will be managed only by subpriority.
     86                The sub-priority is only used to sort pending exception priorities, 
     87                and does not affect active exceptions.
     88          
     89          @note Lower priority values gives higher priority.
     90          
     91          @note Priority Order:
     92                 1. Lowest Preemption priority
     93                 2. Lowest Subpriority
     94                 3. Lowest hardware priority (IRQn position)
     95            
     96          @endverbatim
     97          */
     98          
     99          /**
    100            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
    101            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
    102            *   This parameter can be one of the following values:
    103            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
    104            *                                4 bits for subpriority
    105            *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
    106            *           interrupt. This interrupts priority is managed only with subpriority.  
    107            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    108            *                                3 bits for subpriority
    109            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    110            *                                2 bits for subpriority
    111            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    112            *                                1 bits for subpriority
    113            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    114            *                                0 bits for subpriority
    115            * @retval None
    116            */

   \                                 In section .text, align 2, keep-with-next
    117          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    118          {
   \                     NVIC_PriorityGroupConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    119            /* Check the parameters */
    120            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
   \   00000004   0xF5B4 0x6FE0      CMP      R4,#+1792
   \   00000008   0xD00F             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   0000000A   0xF5B4 0x6FC0      CMP      R4,#+1536
   \   0000000E   0xD00C             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000010   0xF5B4 0x6FA0      CMP      R4,#+1280
   \   00000014   0xD009             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000016   0xF5B4 0x6F80      CMP      R4,#+1024
   \   0000001A   0xD006             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   0000001C   0xF5B4 0x7F40      CMP      R4,#+768
   \   00000020   0xD003             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000022   0x2178             MOVS     R1,#+120
   \   00000024   0x....             LDR.N    R0,??DataTable4
   \   00000026   0x.... 0x....      BL       assert_failed
    121            
    122            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    123            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     ??NVIC_PriorityGroupConfig_0: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x5fa0000
   \   0000002C   0x4320             ORRS     R0,R0,R4
   \   0000002E   0x....             LDR.N    R1,??DataTable4_2  ;; 0xe000ed0c
   \   00000030   0x6008             STR      R0,[R1, #+0]
    124          }
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    125          
    126          /**
    127            * @brief  Initializes the NVIC peripheral according to the specified
    128            *         parameters in the NVIC_InitStruct.
    129            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    130            *         function should be called before.    
    131            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    132            *         the configuration information for the specified NVIC peripheral.
    133            * @retval None
    134            */

   \                                 In section .text, align 2, keep-with-next
    135          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    136          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    137            uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x270F             MOVS     R7,#+15
    138            
    139            /* Check the parameters */
    140            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
   \   0000000A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD006             BEQ.N    ??NVIC_Init_0
   \   00000010   0x78E0             LDRB     R0,[R4, #+3]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD003             BEQ.N    ??NVIC_Init_0
   \   00000016   0x218C             MOVS     R1,#+140
   \   00000018   0x....             LDR.N    R0,??DataTable4
   \   0000001A   0x.... 0x....      BL       assert_failed
    141            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
   \                     ??NVIC_Init_0: (+1)
   \   0000001E   0x7860             LDRB     R0,[R4, #+1]
   \   00000020   0x2810             CMP      R0,#+16
   \   00000022   0xDB03             BLT.N    ??NVIC_Init_1
   \   00000024   0x218D             MOVS     R1,#+141
   \   00000026   0x....             LDR.N    R0,??DataTable4
   \   00000028   0x.... 0x....      BL       assert_failed
    142            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
   \                     ??NVIC_Init_1: (+1)
   \   0000002C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000002E   0x2810             CMP      R0,#+16
   \   00000030   0xDB03             BLT.N    ??NVIC_Init_2
   \   00000032   0x218E             MOVS     R1,#+142
   \   00000034   0x....             LDR.N    R0,??DataTable4
   \   00000036   0x.... 0x....      BL       assert_failed
    143              
    144            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \                     ??NVIC_Init_2: (+1)
   \   0000003A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD022             BEQ.N    ??NVIC_Init_3
    145            {
    146              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    147              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \   00000040   0x....             LDR.N    R0,??DataTable4_2  ;; 0xe000ed0c
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000048   0xF5D0 0x60E0      RSBS     R0,R0,#+1792
   \   0000004C   0x0A00             LSRS     R0,R0,#+8
   \   0000004E   0x0005             MOVS     R5,R0
    148              tmppre = (0x4 - tmppriority);
   \   00000050   0xF1D5 0x0004      RSBS     R0,R5,#+4
   \   00000054   0x0006             MOVS     R6,R0
    149              tmpsub = tmpsub >> tmppriority;
   \   00000056   0x0038             MOVS     R0,R7
   \   00000058   0x0007             MOVS     R7,R0
   \   0000005A   0x40EF             LSRS     R7,R7,R5
    150          
    151              tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
   \   0000005C   0x7860             LDRB     R0,[R4, #+1]
   \   0000005E   0x40B0             LSLS     R0,R0,R6
   \   00000060   0x0005             MOVS     R5,R0
    152              tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
   \   00000062   0x78A0             LDRB     R0,[R4, #+2]
   \   00000064   0x4038             ANDS     R0,R7,R0
   \   00000066   0x4305             ORRS     R5,R0,R5
    153              tmppriority = tmppriority << 0x04;
   \   00000068   0x012D             LSLS     R5,R5,#+4
    154                  
    155              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \   0000006A   0x....             LDR.N    R0,??DataTable4_3  ;; 0xe000e400
   \   0000006C   0x7821             LDRB     R1,[R4, #+0]
   \   0000006E   0x540D             STRB     R5,[R1, R0]
    156              
    157              /* Enable the Selected IRQ Channels --------------------------------------*/
    158              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    159                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x7821             LDRB     R1,[R4, #+0]
   \   00000074   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   00000078   0x4088             LSLS     R0,R0,R1
   \   0000007A   0x....             LDR.N    R1,??DataTable4_4  ;; 0xe000e100
   \   0000007C   0x7822             LDRB     R2,[R4, #+0]
   \   0000007E   0x1152             ASRS     R2,R2,#+5
   \   00000080   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
   \   00000084   0xE009             B.N      ??NVIC_Init_4
    160            }
    161            else
    162            {
    163              /* Disable the Selected IRQ Channels -------------------------------------*/
    164              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    165                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_3: (+1)
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x7821             LDRB     R1,[R4, #+0]
   \   0000008A   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000008E   0x4088             LSLS     R0,R0,R1
   \   00000090   0x....             LDR.N    R1,??DataTable4_5  ;; 0xe000e180
   \   00000092   0x7822             LDRB     R2,[R4, #+0]
   \   00000094   0x1152             ASRS     R2,R2,#+5
   \   00000096   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    166            }
    167          }
   \                     ??NVIC_Init_4: (+1)
   \   0000009A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    168          
    169          /**
    170            * @brief  Sets the vector table location and Offset.
    171            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    172            *   This parameter can be one of the following values:
    173            *     @arg NVIC_VectTab_RAM
    174            *     @arg NVIC_VectTab_FLASH
    175            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    176            * @retval None
    177            */

   \                                 In section .text, align 2, keep-with-next
    178          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    179          { 
   \                     NVIC_SetVectorTable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    180            /* Check the parameters */
    181            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
   \   00000006   0xF1B4 0x5F00      CMP      R4,#+536870912
   \   0000000A   0xD006             BEQ.N    ??NVIC_SetVectorTable_0
   \   0000000C   0xF1B4 0x6F00      CMP      R4,#+134217728
   \   00000010   0xD003             BEQ.N    ??NVIC_SetVectorTable_0
   \   00000012   0x21B5             MOVS     R1,#+181
   \   00000014   0x....             LDR.N    R0,??DataTable4
   \   00000016   0x.... 0x....      BL       assert_failed
    182            assert_param(IS_NVIC_OFFSET(Offset));  
   \                     ??NVIC_SetVectorTable_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_6  ;; 0x1ffff
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xD303             BCC.N    ??NVIC_SetVectorTable_1
   \   00000020   0x21B6             MOVS     R1,#+182
   \   00000022   0x....             LDR.N    R0,??DataTable4
   \   00000024   0x.... 0x....      BL       assert_failed
    183             
    184            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     ??NVIC_SetVectorTable_1: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable4_7  ;; 0x1fffff80
   \   0000002A   0x4028             ANDS     R0,R0,R5
   \   0000002C   0x4320             ORRS     R0,R0,R4
   \   0000002E   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000ed08
   \   00000030   0x6008             STR      R0,[R1, #+0]
    185          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    186          
    187          /**
    188            * @brief  Selects the condition for the system to enter low power mode.
    189            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    190            *   This parameter can be one of the following values:
    191            *     @arg NVIC_LP_SEVONPEND
    192            *     @arg NVIC_LP_SLEEPDEEP
    193            *     @arg NVIC_LP_SLEEPONEXIT
    194            * @param  NewState: new state of LP condition. 
    195            *         This parameter can be: ENABLE or DISABLE.
    196            * @retval None
    197            */

   \                                 In section .text, align 2, keep-with-next
    198          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    199          {
   \                     NVIC_SystemLPConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    200            /* Check the parameters */
    201            assert_param(IS_NVIC_LP(LowPowerMode));
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C10             CMP      R4,#+16
   \   0000000A   0xD009             BEQ.N    ??NVIC_SystemLPConfig_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD006             BEQ.N    ??NVIC_SystemLPConfig_0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xD003             BEQ.N    ??NVIC_SystemLPConfig_0
   \   00000018   0x21C9             MOVS     R1,#+201
   \   0000001A   0x....             LDR.N    R0,??DataTable4
   \   0000001C   0x.... 0x....      BL       assert_failed
    202            assert_param(IS_FUNCTIONAL_STATE(NewState));  
   \                     ??NVIC_SystemLPConfig_0: (+1)
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D00             CMP      R5,#+0
   \   00000024   0xD006             BEQ.N    ??NVIC_SystemLPConfig_1
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D01             CMP      R5,#+1
   \   0000002A   0xD003             BEQ.N    ??NVIC_SystemLPConfig_1
   \   0000002C   0x21CA             MOVS     R1,#+202
   \   0000002E   0x....             LDR.N    R0,??DataTable4
   \   00000030   0x.... 0x....      BL       assert_failed
    203            
    204            if (NewState != DISABLE)
   \                     ??NVIC_SystemLPConfig_1: (+1)
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD006             BEQ.N    ??NVIC_SystemLPConfig_2
    205            {
    206              SCB->SCR |= LowPowerMode;
   \   0000003A   0x....             LDR.N    R0,??DataTable4_9  ;; 0xe000ed10
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x4320             ORRS     R0,R4,R0
   \   00000042   0x....             LDR.N    R1,??DataTable4_9  ;; 0xe000ed10
   \   00000044   0x6008             STR      R0,[R1, #+0]
   \   00000046   0xE005             B.N      ??NVIC_SystemLPConfig_3
    207            }
    208            else
    209            {
    210              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \                     ??NVIC_SystemLPConfig_2: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable4_9  ;; 0xe000ed10
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x43A0             BICS     R0,R0,R4
   \   00000050   0x....             LDR.N    R1,??DataTable4_9  ;; 0xe000ed10
   \   00000052   0x6008             STR      R0,[R1, #+0]
    211            }
    212          }
   \                     ??NVIC_SystemLPConfig_3: (+1)
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    213          
    214          /**
    215            * @brief  Configures the SysTick clock source.
    216            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    217            *   This parameter can be one of the following values:
    218            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    219            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    220            * @retval None
    221            */

   \                                 In section .text, align 2, keep-with-next
    222          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    223          {
   \                     SysTick_CLKSourceConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    224            /* Check the parameters */
    225            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
   \   00000004   0x2C04             CMP      R4,#+4
   \   00000006   0xD006             BEQ.N    ??SysTick_CLKSourceConfig_0
   \   00000008   0xF114 0x0F05      CMN      R4,#+5
   \   0000000C   0xD003             BEQ.N    ??SysTick_CLKSourceConfig_0
   \   0000000E   0x21E1             MOVS     R1,#+225
   \   00000010   0x....             LDR.N    R0,??DataTable4
   \   00000012   0x.... 0x....      BL       assert_failed
    226            
    227            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xD106             BNE.N    ??SysTick_CLKSourceConfig_1
    228            {
    229              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \   0000001A   0x....             LDR.N    R0,??DataTable4_10  ;; 0xe000e010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000022   0x....             LDR.N    R1,??DataTable4_10  ;; 0xe000e010
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0xE005             B.N      ??SysTick_CLKSourceConfig_2
    230            }
    231            else
    232            {
    233              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_1: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable4_10  ;; 0xe000e010
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000030   0x....             LDR.N    R1,??DataTable4_10  ;; 0xe000e010
   \   00000032   0x6008             STR      R0,[R1, #+0]
    234            }
    235          }
   \                     ??SysTick_CLKSourceConfig_2: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x0001FFFF         DC32     0x1ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x1FFFFF80         DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 41H, 43H, 51H, 5CH, 50H
   \              0x5C 0x41    
   \              0x43 0x51    
   \              0x5C 0x50    
   \   00000008   0x72 0x6F          DC8 72H, 6FH, 6AH, 5FH, 76H, 65H, 72H, 30H
   \              0x6A 0x5F    
   \              0x76 0x65    
   \              0x72 0x30    
   \   00000010   0x39 0x61          DC8 39H, 61H, 5FH, 31H, 35H, 31H, 30H, 32H
   \              0x5F 0x31    
   \              0x35 0x31    
   \              0x30 0x32    
   \   00000018   0x30 0x31          DC8 30H, 31H, 35H, 5CH, 45H, 6EH, 64H, 5FH
   \              0x35 0x5C    
   \              0x45 0x6E    
   \              0x64 0x5F    
   \   00000020   0x30 0x32          DC8 30H, 32H, 5CH, 32H, 30H, 31H, 33H, 5FH
   \              0x5C 0x32    
   \              0x30 0x31    
   \              0x33 0x5F    
   \   00000028   0x31 0x31          DC8 31H, 31H, 5FH, 32H, 35H, 5FH, 53H, 70H
   \              0x5F 0x32    
   \              0x35 0x5F    
   \              0x53 0x70    
   \   00000030   0x69 0x72          DC8 69H, 72H, 69H, 74H, 31H, 5FH, 45H, 6CH
   \              0x69 0x74    
   \              0x31 0x5F    
   \              0x45 0x6C    
   \   00000038   0x65 0x6B          DC8 65H, 6BH, 74H, 72H, 6FH, 6CH, 75H, 78H
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x75 0x78    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 4CH, 5CH
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x4C 0x5C    
   \   00000048   0x53 0x54          DC8 53H, 54H, 4DH, 33H, 32H, 4CH, 31H, 78H
   \              0x4D 0x33    
   \              0x32 0x4C    
   \              0x31 0x78    
   \   00000050   0x78 0x5F          DC8 78H, 5FH, 53H, 74H, 64H, 50H, 65H, 72H
   \              0x53 0x74    
   \              0x64 0x50    
   \              0x65 0x72    
   \   00000058   0x69 0x70          DC8 69H, 70H, 68H, 5FH, 4CH, 69H, 62H, 5CH
   \              0x68 0x5F    
   \              0x4C 0x69    
   \              0x62 0x5C    
   \   00000060   0x53 0x6F          DC8 53H, 6FH, 75H, 72H, 63H, 65H, 5CH, 53H
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x5C 0x53    
   \   00000068   0x54 0x4D          DC8 54H, 4DH, 33H, 32H, 4CH, 31H, 78H, 78H
   \              0x33 0x32    
   \              0x4C 0x31    
   \              0x78 0x78    
   \   00000070   0x5F 0x53          DC8 5FH, 53H, 74H, 64H, 50H, 65H, 72H, 69H
   \              0x74 0x64    
   \              0x50 0x65    
   \              0x72 0x69    
   \   00000078   0x70 0x68          DC8 70H, 68H, 5FH, 44H, 72H, 69H, 76H, 65H
   \              0x5F 0x44    
   \              0x72 0x69    
   \              0x76 0x65    
   \   00000080   0x72 0x5C          DC8 72H, 5CH, 73H, 72H, 63H, 5CH, 6DH, 69H
   \              0x73 0x72    
   \              0x63 0x5C    
   \              0x6D 0x69    
   \   00000088   0x73 0x63          DC8 73H, 63H, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \   0000008D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    236          
    237          /**
    238            * @}
    239            */
    240          
    241          /**
    242            * @}
    243            */
    244          
    245          /**
    246            * @}
    247            */
    248          
    249          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   NVIC_Init
        24   -> assert_failed
       8   NVIC_PriorityGroupConfig
         8   -> assert_failed
      16   NVIC_SetVectorTable
        16   -> assert_failed
      16   NVIC_SystemLPConfig
        16   -> assert_failed
       8   SysTick_CLKSourceConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     144  ?_0
     156  NVIC_Init
      52  NVIC_PriorityGroupConfig
      52  NVIC_SetVectorTable
      86  NVIC_SystemLPConfig
      54  SysTick_CLKSourceConfig

 
 144 bytes in section .rodata
 444 bytes in section .text
 
 444 bytes of CODE  memory
 144 bytes of CONST memory

Errors: none
Warnings: none
